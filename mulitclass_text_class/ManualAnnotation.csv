"body","PR_ID","acknowledgement","action","apology","citation","code","commit","disagreement","emoji","greeting","offer","opinion","question","request","requirement","statement","suggestion","summon","thank","welcome"
"fixes #35159 _x000D_
_x000D_
When update using nested attributes is performed on the field which has `has_rich_text` then field value was not getting updated. _x000D_
_x000D_
```_x000D_
class Message < ApplicationRecord_x000D_
    # also occurs with `has_many`_x000D_
    has_one :post_x000D_
_x000D_
    accepts_nested_attributes_for :post_x000D_
end_x000D_
_x000D_
class Post < ApplicationRecord_x000D_
    has_rich_text :content_x000D_
end_x000D_
```_x000D_
_x000D_
Following test is failing on master. This PR fixes the issue._x000D_
```_x000D_
test ""can update post from within message"" do_x000D_
    message = Message.create!(title: ""Seasons"")_x000D_
    post = message.create_post!_x000D_
_x000D_
    # test updating post directly from the message_x000D_
    message.update!(post_attributes: { content: ""Test content"", id: post.id })_x000D_
_x000D_
    # it appears that everything updated?_x000D_
    assert_equal ""Test content"", message.post.content.to_plain_text_x000D_
_x000D_
    # let's reload the model and double check_x000D_
    message.reload_x000D_
_x000D_
    # this fails. The content is never saved._x000D_
    assert_equal ""Test content"", message.post.content.to_plain_text_x000D_
end_x000D_
```_x000D_
","C 0000001",0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
This was a very (positively) impactful change for us with postgres + pgpool, as previously we had to be super careful not to leak connections across various areas like thread pools, puma workers, etc._x000D_
_x000D_
...but it's not mentioned in the changelog, so I found it by looking through source code. I think it deserves an honorable mention :)_x000D_
_x000D_
### Other Information_x000D_
_x000D_
(guidelines say that CHANGELOG modifications should go at the top of the file. Let me know if this should be moved to the top of the Active Record section in the 5.2 release notes)","C 0000002",0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0
"While looking at the comment(https://github.com/rails/rails/issues/35417#issuecomment-467826466) on issue #35417 found deprecation message had unnecessary space in it. Fixed that and was checking why `ActiveSupport::Deprecation.warn <<~eowarn` where not indented properly when found unnecessary space in another deprecation message. _x000D_
_x000D_
Did not add `[ci skip]` because of changes are to the code. _x000D_
_x000D_
Feel free to close this PR if this is a cosmetic change ","C 0000003",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"### Summary_x000D_
Indentation in these examples was set to one space only, in this patch I just fix it to use two spaces since that is the preferred style.","C 0000004",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"This is a small change of guide._x000D_
_x000D_
In addition to `: json`,`: xml`, I think there is something that changes the content-type._x000D_
However, I thought that guide would be difficult to see if I added them all, so deleted `()` and added TIP._x000D_
_x000D_
What do you think?","C 0000005",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"In here #35406 `formats` was renamed to `format`. Updated the test description for same._x000D_
_x000D_
@r? @tenderlove ","C 0000006",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"# Background_x000D_
_x000D_
I had first added these changes into a separate commit on https://github.com/rails/rails/pull/35390. _x000D_
_x000D_
Was encouraged by @georgeclaghorn [in this comment](https://github.com/rails/rails/pull/35390#discussion_r259695792) to open a separate PR for this change. _x000D_
_x000D_
# Overview_x000D_
_x000D_
Consider a model with `One` and `Many` attachments configured:_x000D_
_x000D_
```ruby_x000D_
class User < ActiveRecord::Base_x000D_
  has_one_attached :avatar_x000D_
  has_many_attached :highlights_x000D_
end_x000D_
```_x000D_
_x000D_
### One Attachment_x000D_
_x000D_
After attaching `One` attachment (`:avatar`), we can see that the associated_x000D_
`_blob` record (`:avatar_blob`) still returns as `nil`._x000D_
_x000D_
```ruby_x000D_
user.avatar.attach(blob)_x000D_
user.avatar_attachment.present?  => true_x000D_
user.avatar_blob.present?        => false    # Incorrect!_x000D_
```_x000D_
_x000D_
This is a false negative. It happens because after the attachment and blob_x000D_
are built:_x000D_
_x000D_
  1. The record already has its `_blob` association loaded, as `nil`_x000D_
  2. the `::Attachment` is associated with the record but the `::Blob` only gets_x000D_
    associated with the `::Attachment`, not the record itself_x000D_
_x000D_
In reality, the blob does in fact exist. We can verify this as follows:_x000D_
_x000D_
```ruby_x000D_
user.avatar.attach(blob)_x000D_
user.avatar_attachment.blob.present?    => true  # Blob does exist!_x000D_
```_x000D_
_x000D_
The fix in this change is to simply assign the `::Blob` when assigning_x000D_
the `::Attachment`. After this fix is applied, we correctly observe:_x000D_
_x000D_
```ruby_x000D_
user.avatar.attach(blob)_x000D_
user.avatar_attachment.present?  => true_x000D_
user.avatar_blob.present?        => true    # Woohoo!_x000D_
```_x000D_
_x000D_
### Many Attachments_x000D_
_x000D_
We don't see this issue with `Many` attachments because the `_blob` association_x000D_
is already loaded as part of attaching more/newer blobs._x000D_
_x000D_
```ruby_x000D_
user.highlights.attach(blob)_x000D_
user.highlights_attachments.any?    => true_x000D_
user.highlights_blobs.any?          => true_x000D_
```_x000D_
","C 0000007",0,1,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0
"This commit ensures that locals are passed in to the template objects_x000D_
when they are constructed, then removes the `locals=` mutator on the_x000D_
template object.  This means we don't need to mutate Template objects_x000D_
with locals in the `decorate` method._x000D_
_x000D_
Similar to #35408 and #35406","C 0000008",0,0,0,2,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0
"This converts Template objects to only have one variant because they can only have one variant.  Instead of storing a single element array, just store the variant directly on the template object._x000D_
_x000D_
Similar to #35406","C 0000009",1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0
"This is a quality of life improvement for those developing ActionView itself (cc @tenderlove)_x000D_
_x000D_
This PR first renames the existing `inspect` implementation to `short_identifier`. This improves the 👀 reading of `identifier_method_name`, which used to read `inspect.tr(""^a-z_"", ""_"")`, which is a bit awkward because it relies on what `inspect` _happens_ to return. `short_identifier.tr(""^a-z_"", ""_"")` conveys what it does better (and allows us to change `inspect` 🎉 )._x000D_
_x000D_
Inspect used to return a string like `app/views/home/index.html.erb`, which is confusing because I would normally expect to see a type and it isn't immediately obvious that that isn't a string, particularly when in an array (ie. `[some/template, another/template]` parses to me the same as `[""some/template"", ""another/template""]` on first glance)._x000D_
_x000D_
This PR changes inspect to return a string like:_x000D_
```_x000D_
#<ActionView::FileTemplate app/views/tags/_tag.html.erb locals=[""name""]>_x000D_
```_x000D_
_x000D_
Including the class name makes it look more like most `#inspect` methods. I also added `locals` to this output because it's often different for the same identifier (we need to compile each set of locals separately). It _could_ be helpful to include handler, formats, and variants, but they should be inferable by the developer from the identifier, so I didn't include them._x000D_
_x000D_
I'd guess the reason we override inspect here in the first place is to avoid printing out the whole source code for the template.","C 0000010",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Templates only have one format.  Before this commit, templates would be_x000D_
constructed with a single element array that contained the format.  This_x000D_
commit eliminates the single element array and just implements a_x000D_
`format` method.  This saves one array allocation per template.","C 0000011",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"These patches deprecate Template construction *without* a format.  In other words, this PR guarantees that a constructed template object will always have an associated format.  This allows us to eliminate some nil checks as well as avoid mutations in the `decorate` method._x000D_
","C 0000012",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
#34505 introduced the ability to block writes even if the database allows it. It added a `READ_QUERY` regex to help determine if a query was a read or a write. The regex is built using `ActiveRecord::ConnectionAdapters::AbstractAdapter.build_read_query_regexp` and it doesn't account for reads with leading parenthesis and/or spaces._x000D_
_x000D_
https://github.com/rails/rails/blob/67732efcb658807929be0e968642ee1d90b3c986/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L104-L106_x000D_
_x000D_
This would cause read queries like unions (`(SELECT ...) UNION (SELECT ...)`) to be treated as writes._x000D_
_x000D_
In this PR, I update the regex allow for leading parenthesis and/or spaces._x000D_
","C 0000013",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Fixes issue https://github.com/rails/rails/issues/35312_x000D_
_x000D_
Rails should not override Cache-Control header if one set manually","C 0000014",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"Related cbcdecd, 2a56b2d._x000D_
_x000D_
This is a regression caused by cbcdecd._x000D_
_x000D_
If query caching is enabled, prepared statement handles are never_x000D_
re-used, since we missed that a query is preprocessed when query caching_x000D_
is enabled, but doesn't keep the `preparable` flag._x000D_
_x000D_
We should care about that case.","C 0000015",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Related to 287920ca7d06c8f51198ec750d65ba703835b257,_x000D_
https://3.basecamp.com/3076981/buckets/24956/chats/12416418@1619936443_x000D_
_x000D_
/cc @matthewd ","C 0000016",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Backport of https://github.com/rails/rails/pull/35395 targeting 5.2.x._x000D_
_x000D_
### Other Information_x000D_
_x000D_
Please refer to https://github.com/rails/rails/pull/35395 for details.","C 0000017",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Wait until initialization has completed before we assign `config.action_mailer` to `ActionMailer::Base`._x000D_
_x000D_
Eager loading of `app/mailers` must also be disabled._x000D_
_x000D_
### Other Information_x000D_
_x000D_
The ActionMailer railtie looks at `config.action_mailer` and assigns these options to `ActionMailer::Base`. However, it was previously doing so as soon as soon as `ActionMailer` was loaded (`ActiveSupport.on_load(:action_mailer)`)._x000D_
_x000D_
We now wait for initialization to complete (`ActiveSupport.on_load(:after_initialize)`) _as well_ as the `ActionMailer` being loaded._x000D_
_x000D_
This is an important change because `ActionMailer` (and its config) is explicitly designed to be extensible, specifically ActionMailer allows third-party gems to register additional ""delivery methods""._x000D_
_x000D_
Delivery methods can be registered with third-party Railtie by using:_x000D_
_x000D_
```ruby_x000D_
class Railtie < ::Rails::Railtie_x000D_
  initializer ""foo_mail.register_delivery_method"" do_x000D_
    ActionMailer::Base.add_delivery_method :foo, FooMailer_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
or ideally:_x000D_
_x000D_
_x000D_
```ruby_x000D_
class Railtie < ::Rails::Railtie_x000D_
  initializer ""foo_mail.register_delivery_method"" do_x000D_
    ActiveSupport.on_load(:action_mailer) do_x000D_
      add_delivery_method :foo, FooMailer_x000D_
    end_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
`add_delivery_method` adds support for `ActionMailer::Base.foo_settings` and `config.action_mailer.foo_settings` (https://github.com/rails/rails/blob/master/actionmailer/lib/action_mailer/delivery_methods.rb#L51)._x000D_
_x000D_
However, calling `add_delivery_method` requires `ActionMailer` to be loaded, and _prior_ to this commit, the config would already have been assigned on `ActionMailer::Base`, so there's no opportunity to do:_x000D_
_x000D_
```ruby_x000D_
config.action_mailer.foo_settings = {_x000D_
    foo_auth: 'bar'_x000D_
} _x000D_
```_x000D_
_x000D_
If you were previously to put the above in your environment config, you'd get an error because when `ActionMailer` when `ActionMailer` is eager loaded in production, third-party gems haven't run their initializers so `undefined method 'foo_settings=' for ActionMailer::Base:Class` is raised (e.g. https://github.com/mailgun/mailgun-ruby/issues/104)._x000D_
_x000D_
Instead, if you were to move your logic into `app/initializers/foo_mail.rb` e.g._x000D_
_x000D_
```ruby_x000D_
Rails.application.configure do_x000D_
  config.action_mailer.delivery_method = :foo_x000D_
  config.action_mailer.foo_settings = {_x000D_
      api_key: ENV['FOO_API_KEY'],_x000D_
      domain: ENV['FOO_DOMAIN'],_x000D_
  }_x000D_
end_x000D_
```_x000D_
_x000D_
this _silently_ fails _in production_ (with eager loading enabled), because we're (without this PR) assigning the config _after_ `ActionMailer` has been loaded (and the config copied across), so although we've set the config it is never used and out of sync with `ActionMailer::Base`, which for example still returns `:smtp` for `ActionMailer::Base.delivery_method`, even though `Rails.application.config.action_mailer.delivery_method` correctly returns `:foo`._x000D_
_x000D_
This commit resolves the issue by ensuring we wait until all initializers have run _before_ settings up `ActionMailer::Base` with options from `action_mailer.config`._x000D_
_x000D_
We can now in `app/initializers/foo_mailer.rb` do:_x000D_
_x000D_
```ruby_x000D_
ActiveSupport.on_load(:action_mailer) do_x000D_
  Rails.application.configure do_x000D_
      config.action_mailer.delivery_method = :foo_x000D_
      config.action_mailer.foo_settings = {_x000D_
        api_key: ENV['FOO_API_KEY'],_x000D_
        domain: ENV['FOO_DOMAIN'],_x000D_
      }_x000D_
  end_x000D_
end_x000D_
```","C 0000018",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
,"C 0000019",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
,"C 0000020",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0
"### Summary_x000D_
_x000D_
This PR updates [puma's](https://github.com/puma/puma/) version from 3.11 to 3.12._x000D_
","C 0000021",0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"### Summary_x000D_
_x000D_
`SecureRandom` is used in `generate_key` but was never required in this file. This doesn't fix any bugs in Rails but lets me save a confusing line in one of my applications. 💜","C 0000022",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"`select` can also use symbol as the field specification, so we updated the usage code.","C 0000023",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Shrine relies on `ActionDispatch::Http::UploadedFile` working with `IO.copy_stream`. In https://github.com/rails/rails/pull/28676, `#to_path` method was added to `ActionDispatch::Http::UploadedFile`, which broke usage with `IO.copy_stream` (https://github.com/shrinerb/shrine/issues/353):_x000D_
_x000D_
```rb_x000D_
source = ActionDispatch::Http::UploadedFile.new(...)_x000D_
IO.copy_stream(source, destination)_x000D_
# ~> TypeError: can't convert ActionDispatch::Http::UploadedFile to IO (ActionDispatch::Http::UploadedFile#to_io gives Tempfile)_x000D_
```_x000D_
_x000D_
Normally `IO.copy_stream` just calls `#read` on the source object to read the content. However, when `#to_path` is defined, `IO.copy_stream` calls `#to_io` in order to retrieve the raw `File` object. In this case it trips up, because `ActionDispatch::Http::UploadedFile#to_io` returned a `Tempfile` object, which is not an `IO` subclass._x000D_
_x000D_
We fix this by modifying `#to_io` to return an actual `File` object (which is a `IO` subclass). I think this is also more correct behaviour in general._x000D_
_x000D_
I had to test this with an actual `Tempfile` object, so then I also updated the rest of the tests to use an actual `Tempfile` objects (which simplified them).","C 0000024",0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0
"```ruby_x000D_
class Post < ActiveRecord::Base_x000D_
  enum status: %i[ drafted active trashed ]_x000D_
end_x000D_
_x000D_
Post.not_drafted # => where.not(status: :drafted)_x000D_
Post.not_active  # => where.not(status: :active)_x000D_
Post.not_trashed # => where.not(status: :trashed)_x000D_
```_x000D_
_x000D_
Particularly convenient when you want to disallow access in a controller, like `Post.not_trashed.find(params[:id])`.","C 0000025",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Zeitwork uses a default inflector that’s different than ActiveSupport’s to define which modules can be autoloader based on filesystem paths. If these two inflectors disagree on the filename<->constant conversion, then the modules created for autoloading can be named one thing and the actual constants defined in those files can be named something else. Because the ActiveSupport::Inflector can be customized, it’s possible for the two inflectors to disagree. In Rails 5, only the ActiveSupport::Inflector was used to constantize, so any exceptions applied to it in an initializer or whatever would apply to the autoloader as well. If we make Zeitwork use the ActiveSupport inflector, then they should agree again, and backwards compatibility should be maintained._x000D_
_x000D_
Zeitwork supports custom inflectors and expects it's `inflector` to have a very similar interface to ActiveSupports so I am guessing this was always intended (@fxn can probably say more), but I think the question is if this should be the default or not. I think it should because it maintains backwards compatibility with the way things worked with the classic autoloader, and it allows users one more notch of control over the ""magic"" constant discovery that Rails does. _x000D_
","C 0000026",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
Changes `a index` to `an index`","C 0000027",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"It seems that the reason why the `test_select_with_subquery_in_from_uses_original_table_name` does not pass is that the return value of `sqlite3_column_name()` is wrong due to subquery flattening._x000D_
_x000D_
This seems to have been fixed with 3.20.0(https://sqlite.org/changes.html#version_3_20_0)._x000D_
But CI uses the old version(maybe 3.11.0), I added `DISTINCT` to avoid optimization by subquery flattening._x000D_
_x000D_
Ref: https://sqlite.org/optoverview.html#flattening_x000D_
","C 0000028",1,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0
"This commit adds a finalizer just to inline templates.  We can't cache_x000D_
compilation of inline templates because it's possible that people could_x000D_
have render calls that look like this:_x000D_
_x000D_
```ruby_x000D_
loop do_x000D_
  render inline: ""#{rand}""_x000D_
end_x000D_
```_x000D_
_x000D_
and we would cache every one of these different inline templates.  That_x000D_
would cause a memory leak.  OTOH, we don't need finalizers on regular_x000D_
templates because we can cache, control, and detect changes to the_x000D_
template source._x000D_
_x000D_
Fixes: #35372_x000D_
","C 0000029",1,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"This removes one call to `lookup_context` and also eliminates a_x000D_
conditional in `_render_template`._x000D_
","C 0000030",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"**Summary**_x000D_
This PR updates the callbacks skipping methods mentioned in the guides._x000D_
_x000D_
I recently came across code for `increment`,  `decrement` and `toggle` methods._x000D_
These methods are just updating the attribute, without persisting the changes in the database, and therefore, wont affect the object lifecycle._x000D_
_x000D_
On the other hand, methods `increment!` and `decrement!` persist the changes in the database without invoking any callbacks [The guide does not mentions them]","C 0000031",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"I want to start reducing the calls to `lookup_context`.  That method_x000D_
caches the lookup context in an ivar, but I would like to cache the_x000D_
lookup context on the stack.  That way we aren't coupled to the behavior_x000D_
of the `lookup_context` method.","C 0000032",0,1,0,0,0,0,0,0,0,0,3,0,0,2,0,1,0,0,0
"## Summary_x000D_
_x000D_
This change is to allow using `tzinfo-2.x` in a project that also includes `activesupport`._x000D_
_x000D_
## Other Information_x000D_
_x000D_
### Motivation_x000D_
_x000D_
Currently, the *bundle* for a project that uses both `activesupport` and `tzinfo-2.0` resolves to a much older version of activesupport (`v3.2.22.5` since that version doesn't have a dependency on `tzinfo`)","C 0000033",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
While looking at #35365 found that getting started doc has two migration files which had `ActiveRecord::Migration[5.0]` mentioned. Updated them to Rails 6.0_x000D_
_x000D_
I could see we have similar migration version at other places in the documentation. I would like to update those as well. Let me know if I should go ahead and update those as well._x000D_
","C 0000034",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0
"Fixed description when n: n relation is implemented with `has_and_belongs_to_many`._x000D_
If  execute `collection.destroy (object, ...)`, I think the object associated with `collection` will be destroyed, but what about it?_x000D_
_x000D_
For example, it works as follows._x000D_
_x000D_
```_x000D_
$ @part.assemblies.include?(@assembly1)_x000D_
=> true_x000D_
$ @part.assemblies.destroy(@assembly1)_x000D_
$ @part.assemblies.include?(@assembly1)_x000D_
=> false_x000D_
```","C 0000035",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"With Zeitwerk 1.3.0 we can simplify a bit logging related code.","C 0000036",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
When using `select` with `'DISTINCT( ... )'` if you use method `size` on a non loaded relation it overrides the column selected by passing `:all` so it returns different value than count. _x000D_
_x000D_
Fixes #35214 ","C 0000037",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This is caused by 0ee96d1._x000D_
_x000D_
Since #18744, `select` columns doesn't be qualified by table name if_x000D_
using `from`. 0ee96d1 follows that for `pluck` as well._x000D_
_x000D_
But people depends that `pluck` columns are qualified even if using_x000D_
`from`._x000D_
_x000D_
So I've fixed that to be qualified if `from` has the original table name_x000D_
to keep the behavior as much as before._x000D_
_x000D_
Fixes #35359._x000D_
_x000D_
cc @eileencodes ","C 0000038",0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0
"fixes #35351_x000D_
_x000D_
### Summary_x000D_
_x000D_
If a form with `rich_text_area` has the option set as `placeholder: true` and has a locale set for the form field then the placeholder text should be translated and shown. _x000D_
_x000D_
Example: _x000D_
```_x000D_
en:_x000D_
  activerecord:_x000D_
    attributes:_x000D_
      message:_x000D_
        title: Set a title for your message_x000D_
        content: Write your message_x000D_
```_x000D_
_x000D_
```_x000D_
<%= form_with(model: message) do |form| %>_x000D_
  <div class=""field"">_x000D_
    <%= form.label :title %>_x000D_
    <%= form.text_field :title, placeholder: true %>_x000D_
  </div>_x000D_
_x000D_
  <div class=""field"">_x000D_
    <%= form.label :content %>_x000D_
    <%= form.rich_text_area :content, placeholder: true %>_x000D_
  </div>_x000D_
<% end %>_x000D_
```_x000D_
_x000D_
#### Expected: _x000D_
`text_field` translate placeholder value and sets it to `Set a title for your message`. similarly, for `rich_text_area` should have translated placeholder._x000D_
","C 0000039",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"Implicitly updating the lock version without knowing the current version_x000D_
is meaningless.","C 0000040",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"While we need some compatibility, I am exploring departing from `ActiveSupport::Dependencies` as public API in `:zeitwerk` mode._x000D_
_x000D_
`Rails.autoloaders` is gradually taking shape as an alternative, and_x000D_
_x000D_
```ruby_x000D_
Rails.autoloaders.logger = Rails.logger_x000D_
```_x000D_
_x000D_
goes in that direction. Let's see if this passes the test of time._x000D_
_x000D_
I will probably implement the `:debug` dance in Zeitwerk itself. Also, the test suite needs a reorganization. But for the time being this will suffice here for the next beta.","C 0000041",0,1,0,0,1,0,0,0,0,0,0,0,0,0,2,0,1,0,0
"### Add more two Brazilian times zones for the ActiveSupport::TimeZone::MAPPING._x000D_
_x000D_
The two new keys:_x000D_
    ""Manaus""                       => ""America/Manaus"",_x000D_
    ""Bahia""                          => ""America/Bahia"",_x000D_
_x000D_
These Time Zones are already available inside the TZInfo gem. Adding these two zones will help a lot._x000D_
_x000D_
### Tests_x000D_
_x000D_
These time zones are already tested inside the TZInfo.","C 0000042",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"# What changed_x000D_
_x000D_
I changed the variable name._x000D_
_x000D_
# Why this pull request_x000D_
_x000D_
Because rubecop's offense `Lint / ShadowingOuterLocalVariable` was detected in` activerecord / lib / active_record / relation / query_methods.rb`._x000D_
_x000D_
# What became of it_x000D_
_x000D_
## Before_x000D_
_x000D_
```_x000D_
$ rubocop activerecord/lib/active_record/relation/query_methods.rb _x000D_
Inspecting 1 file_x000D_
W_x000D_
_x000D_
Offenses:_x000D_
_x000D_
activerecord/lib/active_record/relation/query_methods.rb:1165:24: W: Lint/ShadowingOuterLocalVariable: Shadowing outer local variable - field._x000D_
            arg.map { |field, dir|_x000D_
                       ^^^^^_x000D_
_x000D_
1 file inspected, 1 offense detected_x000D_
```_x000D_
_x000D_
## After_x000D_
_x000D_
```_x000D_
$ rubocop activerecord/lib/active_record/relation/query_methods.rb _x000D_
_x000D_
Inspecting 1 file_x000D_
._x000D_
_x000D_
1 file inspected, no offenses detected_x000D_
```","C 0000043",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Since b21f50d8ae36d9b50b673579e17bccbe55363b34, requiring `active_storage` on its own has failed with the following error:_x000D_
_x000D_
    activestorage/lib/active_storage.rb:55:in `<module:ActiveStorage>': undefined method `minutes' for 5:Integer (NoMethodError)_x000D_
_x000D_
I discovered this while trying to get the rspec-rails test suite to pass on Rails master, as it [requires `active_storage` outside the context of a full application](https://github.com/rspec/rspec-rails/blob/7720e7b1c8c60f033a8e1f9c61f6ca12c84121f4/example_app_generator/spec/support/default_preview_path#L10).","C 0000044",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
,"C 0000045",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
,"C 0000046",1,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Currently, `ActionView::Base.new` will raise a `NotImplementedError` if given an instance of `ActionView::PathSet` on initialization. For example, `ActionController::Base.view_paths` will return an instance of `ActionView::PathSet` so the following will raise a `NotImplementedError `:_x000D_
_x000D_
`view = ActionView::Base.new(ActionController::Base.view_paths, assigns = {})`_x000D_
_x000D_
This commit prevents the raised error in favor of a deprecation warning._x000D_
_x000D_
@tenderlove Is it sufficient here to add this single `when ActionView::PathSet` to the case in `build_lookup_context` or are there other cases we also need to consider?","C 0000047",0,0,0,0,0,0,1,0,0,0,0,0,0,3,2,1,0,0,0
"This reverts a fix that broke schemas in SQLite3, and applies a different fix to solve the same test case._x000D_
_x000D_
This fixes #35292._x000D_
_x000D_
Basically, when passing a symbol with a dot to `pluck`, we are expecting it to be a table + a column. MySQL and PostgreSQL handled it fine, because quoting `schema + table` is the same as quoting `table + column`: `""part1"".""part2""`. So a quote_table_name was being applied by pluck._x000D_
_x000D_
However, this is not the case in SQLite3, which wants `""schema.table"".""column""` (note the schema and table in the same quotes), and so would generate `""table.column""`. The applied logic is instead to check for a dot, and if found, to quote each part separately.","C 0000048",0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Follow up on comment https://github.com/rails/rails/pull/35327#discussion_r258489309_x000D_
_x000D_
@r? @matthewd ","C 0000049",0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0
"This is a follow-up of #35310._x000D_
_x000D_
Currently `Topic.find_by(id: ""not-a-number"")` matches to a `id = 0`_x000D_
record. That is considered as silently leaking information._x000D_
_x000D_
If non numeric string is given to find by an integer column, it should_x000D_
not be matched to any record._x000D_
_x000D_
Related #12793.","C 0000050",0,1,0,0,0,1,0,0,0,0,0,0,0,0,2,0,1,0,0
"Follow on #35265_x000D_
_x000D_
Found that `RenderedCollection` class had attr_reader defined for `rendered_templates` but was not used. Refactored code to add reader for `spacer` and fixed the usage of it. _x000D_
_x000D_
@r? @tenderlove ","C 0000051",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0
"With this patch we unhook `ActiveSupport::Dependencies` in `:zeitwerk` mode._x000D_
_x000D_
This doesn't make a difference for autoloadable constants, because `autoload` runs before `const_missing`, but when constants are missing the backtraces include `dependencies.rb`, which may be confusing. That also opens unnecessarily the door to potential gotchas, as seen in #35278.","C 0000052",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"We no longer depend on `rendered_format` side effects, so we can remove_x000D_
this method now. 🎉","C 0000053",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0
"Follow up on #35316._x000D_
_x000D_
Replaced the usage of `where().delete/destroy_all` with `delete/destroy_by`.","C 0000054",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Follow up on #35316. _x000D_
_x000D_
Added delegation test for `delete_by` and `destroy_by` methods._x000D_
_x000D_
@r? @kamipo ","C 0000055",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0
"Change 'happen' to a more technical term_x000D_
_x000D_
_x000D_
","C 0000056",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Add rigorous verification_x000D_
_x000D_
### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000057",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
,"C 0000058",0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0
"closes #35304 _x000D_
_x000D_
Adds `delete_by` and `destroy_by` as relation methods to add missing symmetry._x000D_
_x000D_
@r? @dhh ","C 0000059",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0
"Since there was no explanation of combining callback conditions in Conditional callbacks, it was added.","C 0000060",0,0,0,0,0,0,0,0,0,0,1,1,0,2,0,0,0,0,0
"That is considered as silently leaking information._x000D_
If type casting doesn't return any actual value, it should not be_x000D_
matched to any record._x000D_
_x000D_
Fixes #33624._x000D_
Closes #33946.","C 0000061",1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"The preamble 'finally' is described in item 8.2 of the AR callback._x000D_
However, since it is not the last item, the expression 'finally' is contradictory._x000D_
_x000D_
When item 8.3 was added, I guessed that item 8.2 was supposed to be ""finally"" deleted, so I deleted it.","C 0000062",0,0,0,0,0,2,0,0,0,0,0,0,0,3,3,0,1,0,0
"### Summary_x000D_
_x000D_
I found rubocop warnings, so automatically corrected them._x000D_
_x000D_
Offenses:_x000D_
_x000D_
```_x000D_
railties/lib/rails/autoloaders.rb:1:1: C: [Corrected] Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true._x000D_
module Rails_x000D_
^_x000D_
actionmailer/test/base_test.rb:917:1: C: [Corrected] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning._x000D_
actionmailer/test/base_test.rb:917:1: C: [Corrected] Layout/TrailingWhitespace: Trailing whitespace detected._x000D_
actionmailer/test/base_test.rb:917:5: C: [Corrected] Style/RedundantBegin: Redundant begin block detected._x000D_
    begin_x000D_
    ^^^^^_x000D_
actionmailer/test/base_test.rb:918:3: C: [Corrected] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation._x000D_
      events = []_x000D_
  ^^^^_x000D_
actionmailer/test/base_test.rb:930:1: C: [Corrected] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end._x000D_
actionmailer/test/base_test.rb:930:1: C: [Corrected] Layout/TrailingWhitespace: Trailing whitespace detected._x000D_
```_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000063",1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"The CI failure for `test_errors_for_bigint_fks_on_integer_pk_table` is_x000D_
due to the poor regex that extract all ``` `(\w+)` ``` like parts from_x000D_
the message (`:foreign_key` should be `""old_car_id""`, but `""engines""`):_x000D_
_x000D_
https://travis-ci.org/rails/rails/jobs/494123455#L1703_x000D_
_x000D_
I've improved the regex more strictly and have more exercised mismatched_x000D_
foreign key tests._x000D_
_x000D_
Fixes #35294","C 0000064",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
This PR fixes #35296._x000D_
_x000D_
_x000D_
<!--### Other Information_x000D_
_x000D_
If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000065",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"https://travis-ci.org/rails/rails/jobs/493027997#L1689-L1708","C 0000066",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0
"This commit passes the template format to the digestor in order to come_x000D_
up with a key.  Before this commit, the digestor would depend on the_x000D_
side effect of the template renderer setting the rendered_format on the_x000D_
lookup context.  I would like to remove that mutation, so I've changed_x000D_
this to pass the template format in to the digestor._x000D_
_x000D_
I've introduced a new instance variable that will be alive during a_x000D_
template render.  When the template is being rendered, it pushes the_x000D_
current template on to a stack, setting `@current_template` to the_x000D_
template currently being rendered.  When the cache helper asks the_x000D_
digestor for a key, it uses the format of the template currently on the_x000D_
stack._x000D_
_x000D_
I removed the `rendered_format=` side effect in https://github.com/rails/rails/pull/35265 but the tests failed.  It turns out that the digest caching code depends on that side effect, so this PR aims to remove the digest cache's dependency on the `rendered_format` setter.  This PR fixes the Railties test in #35265 ","C 0000067",1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Add `Numeric#in_cents` to convert a number to a cents representation, except to `Integer` values._x000D_
","C 0000068",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"So I've caught a bug when I was re-using a single hash instance of translation options in a few places in my code, and then noticed that my hash had some extra elements I didn't put there :)_x000D_
_x000D_
Turns out we had that mutating helper all the time right under our noses!_x000D_
_x000D_
OK, so now options will be duplicated **every** time. It could be better for performance to only duplicate those options inside relevant `if` clause, but I decided that this way we will be sure that nobody forgets to perform this operation in case of further changes.","C 0000069",0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"[ci skip]_x000D_
_x000D_
Just changing 2 incorrect instances of ""upto"" to ""up to"" in the documentation. ","C 0000070",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"### Summary_x000D_
This fixes a bug caused by having too many bind parameters in a query. Queries without the query cache already work correctly by switching to using an unprepared statement. This change adds the same bind parameter length check to the QueryCache. See https://github.com/rails/rails/issues/35251","C 0000071",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0
"Since #35036, the subclasses of `ActionView::Base` requires the `compiled_method_container` method._x000D_
This is incompatible. For example, `web-console` use view class that subclass of `ActionView::Base`, and does not work it now cause of this._x000D_
_x000D_
I am not sure that using `self.class` is correct, but I think that it is better to show a deprecate message rather than raise exception.","C 0000072",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"This deprecates using class level querying methods if the receiver scope_x000D_
regarded as leaked, since #32380 and #35186 may cause that silently_x000D_
leaking information when people upgrade the app._x000D_
_x000D_
We need deprecation first before making those.","C 0000073",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
This pull request addresses the following error._x000D_
It has been reported at https://travis-ci.org/rails/rails/jobs/493530508#L1533_x000D_
_x000D_
```ruby_x000D_
$ cd actioncable_x000D_
$ bundle exec ruby -w -Itest test/subscription_adapter/postgresql_test.rb_x000D_
Traceback (most recent call last):_x000D_
	1: from test/subscription_adapter/postgresql_test.rb:8:in `<main>'_x000D_
test/subscription_adapter/postgresql_test.rb:10:in `<class:PostgresqlAdapterTest>': uninitialized constant PostgresqlAdapterTest::ChannelPrefixTest (NameError)_x000D_
```_x000D_
_x000D_
Follow up #35276","C 0000074",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Found some nitpicks while looking at #35242. Feel free to close the PR if these are cosmetic changes._x000D_
_x000D_
@r? @eileencodes _x000D_
","C 0000075",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
The same DB could be used by multiple apps (or engines, see #34714), thus we need a way to avoid naming conflicts._x000D_
_x000D_
The functionality has been already implemented for Redis (#27425), we only need to include the module._x000D_
_x000D_
","C 0000076",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"This fix should allow AR to raise ActiveRecord::IrreversibleOrderError when an order has more than one argument and include 'nulls first/last'_x000D_
Previously I received `foo NULLS FIRST DESC, bar DESC` from `foo NULLS FIRST, bar` trying to reverse order and it raised pg exception because of bad syntax.","C 0000077",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Fixes https://github.com/rails/rails/issues/35194._x000D_
_x000D_
This is a really strange bug._x000D_
_x000D_
For some reason, `.reload_schema_from_cache` called by `Topic.reset_column_information` can change how date time columns behave. It seems to change included modules of `ActiveRecord::Type::DateTime` instances, _but only sometimes_._x000D_
_x000D_
In the expected flow, the value cast starts [here](https://github.com/rails/rails/blob/a20b00db3fd2e05a960c1d68cc7bce64733e49e7/activerecord/lib/active_record/attribute_methods/time_zone_conversion.rb#L11) and includes `[ActiveRecord::Type::Internal::Timezone, #<ActiveModel::Type::Helpers::AcceptsMultiparameterTime:0x00007f8cae260358>, ActiveModel::Type::Helpers::TimeValue, ActiveSupport::ToJsonWithActiveSupportEncoder, ActiveSupport::Dependencies::Loadable, JSON::Ext::Generator::GeneratorMethods::Object, ActiveSupport::Tryable, Kernel]`. In the failing test case, the value cast starts [here](https://github.com/rails/rails/blob/a20b00db3fd2e05a960c1d68cc7bce64733e49e7/activemodel/lib/active_model/type/helpers/accepts_multiparameter_time.rb#L8) and includes `[ActiveSupport::Tryable, #<Module:0x00007f8b010f1e58>]`._x000D_
_x000D_
This seems to be triggered by initializing a new topic in `AttributeMethodsTest#test_YAML_dumping_a_record_with_time_zone-aware_attribute` after resetting column info in a previous test. My proposed solution is more of a band-aid to minimize the blast radius of attribute changes between tests (this was already being done for other tests in `AttributeMethodsTest`)._x000D_
_x000D_
","C 0000078",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Currently `csp_meta_tag` generates `name` attribute only._x000D_
However, in libraries like `Material-UI` and `JSS`, expect that the meta tag that contains the nonce with `property` attribute._x000D_
_x000D_
https://material-ui.com/css-in-js/advanced/#how-does-one-implement-csp_x000D_
https://github.com/cssinjs/jss/blob/master/docs/csp.md_x000D_
_x000D_
This patch allows `csp_meta_tag` to specify arbitrary options and allows `nonce` to be passed to those libraries._x000D_
","C 0000079",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"fixes #35252 _x000D_
_x000D_
@r? @georgeclaghorn _x000D_
_x000D_
cc/ @marcusmalmberg","C 0000080",0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0
"Having `order(""CASE column1 WHEN 'data1' THEN 0 ELSE column2 END, column3.id NULLS FIRST, RANDOM()"")` and adding `.last` i get exception from postgres because of invalid query syntax:_x000D_
```_x000D_
ORDER BY CASE column1 WHEN 'data1' THEN 0 ELSE column2 END DESC, column3.id NULLS FIRST DESC, RANDOM()_x000D_
```_x000D_
_x000D_
after making this patch it works correctly:_x000D_
```_x000D_
ORDER BY CASE column1 WHEN 'data1' THEN 0 ELSE column2 END DESC, column3.id DESC NULLS FIRST, RANDOM() DESC_x000D_
```","C 0000081",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"### Summary_x000D_
Both methods were introduced in Ruby 2.5 and fit this use case very_x000D_
nicely: listing a directory's entries excluding the ""."" and "".."" nodes._x000D_
_x000D_
The private method #exclude_from was removed as it no longer serves_x000D_
its original purpose.","C 0000082",1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"This PR changes template renderers to return a more complex object instead of just a string.  The reason I wanted to do this is because the template renderers modify the lookup context, setting the `rendered_format` on it.  This mutation is extremely far from the owner of the lookup context (the controller).  The reason the mutation is so far from the controller is because the controller didn't know what types of templates had been rendered.  This PR changes the return value such that the controller can now know what was rendered, and the template renderers no longer need to mutate the lookup context._x000D_
_x000D_
Of course this introduces one or two more object allocations per template (one in the case of a partial, two in the case of a collection).  However, benchmarks between master and this branch seem comparable, so I think it's ok:_x000D_
_x000D_
```ruby_x000D_
require ""benchmark/ips""_x000D_
require ""action_view""_x000D_
require ""action_pack""_x000D_
require ""action_controller""_x000D_
require ""stackprof""_x000D_
_x000D_
class TestController < ActionController::Base_x000D_
end_x000D_
_x000D_
TestController.view_paths = [File.expand_path(""test/benchmarks"")]_x000D_
_x000D_
# Create a bunch of data_x000D_
_x000D_
controller_view = TestController.new.view_context_x000D_
_x000D_
Benchmark.ips do |x|_x000D_
  x.report(""many partials"") do_x000D_
    controller_view.render(""many_partials"")_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
#### This branch:_x000D_
_x000D_
```_x000D_
$ be ruby render_benchmark.rb_x000D_
Warming up --------------------------------------_x000D_
       many partials    52.000  i/100ms_x000D_
Calculating -------------------------------------_x000D_
       many partials    539.589  (± 3.5%) i/s -      2.704k in   5.017926s_x000D_
```_x000D_
_x000D_
#### Master:_x000D_
_x000D_
```_x000D_
$ be ruby render_benchmark.rb_x000D_
Warming up --------------------------------------_x000D_
       many partials    54.000  i/100ms_x000D_
Calculating -------------------------------------_x000D_
       many partials    560.691  (± 3.7%) i/s -      2.808k in   5.015547s_x000D_
```_x000D_
_x000D_
Since the controller now knows what type of templates were rendered, it can set the `rendered_format` property in one place.  We no longer have to do `@lookup_context.rendered_format ||=` because we can be confident that the top level rendered format is the one we want._x000D_
_x000D_
Additionally, I think we can now remove `rendered_format` from the lookup context and just set the content type directly on the response (but I'll follow up with that).","C 0000083",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"Using the subscript method `#[]` on a string has several overloads and_x000D_
rather complex implementation. One of the overloads is the capability to_x000D_
accept a regular expression and then run a match, then return the_x000D_
receiver (if it matched) or one of the groups from the MatchData._x000D_
_x000D_
The function of the `UUID#cast` method is to cast a UUID to a type and_x000D_
format acceptable by postgres. Naturally UUIDs are supposed to be_x000D_
string and of a certain format, but it had been determined that it was_x000D_
not ideal for the framework to send just any old string to Postgres and_x000D_
allow the engine to complain when ""foobar"" or """" was sent, being_x000D_
obviously of the wrong format for a valid UUID. Therefore this code was_x000D_
written to facilitate the checking, and if it were not of the correct_x000D_
format, a `nil` would be returned as is conventional in Rails._x000D_
_x000D_
Now, the subscript method will allocate one or more strings on a match_x000D_
and return one of them, based on the index parameter. However, there_x000D_
is no need for a new string, as a UUID of the correct format is already_x000D_
such, and so long as the format was verified then the string supplied is_x000D_
adequate for consumption by the database._x000D_
_x000D_
The subscript method also creates a MatchData object which will never be_x000D_
used, and so must eventually be garbage collected._x000D_
_x000D_
Garbage collection indeed. This innocuous method tends to be called_x000D_
quite a lot, for example if the primary key of a table is a uuid, then_x000D_
this method will be called. If the foreign key of a relation is a UUID,_x000D_
once again this method is called. If that foreign key is belonging to_x000D_
a has_many relationship with dozens of objects, then again dozens of_x000D_
UUIDs shall be cast to a dup of themselves, and spawn dozens of_x000D_
MatchData objects, and so on._x000D_
_x000D_
So, for users that:_x000D_
* Use UUIDs as primary keys_x000D_
* Use Postgres_x000D_
* Operate on collections of objects_x000D_
_x000D_
This accomplishes a significant savings in total allocations, and may_x000D_
save many garbage collections._x000D_
_x000D_
### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000084",0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Closes https://github.com/rails/rails/issues/35260._x000D_
_x000D_
Rewords the RDBMS note in the ActiveRecord basics guide._x000D_
_x000D_
This may be an unpopular opinion, or promoting of bad behaviour, but I think a big advantage of ActiveRecord is that you don't actually need an intimate knowledge of SQL / RDBMS. Yes, they are helpful to know, and highly necessary in order to master ActiveRecord, but I wouldn't label them as crucial for beginners._x000D_
","C 0000085",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"As discussed with @matthewd in #35235._x000D_
_x000D_
In this alternative, we `require` the library as soon as `config.autoloader` is set to `:zeitwerk`. I have restored the single quotes in the `Gemfile` template too.","C 0000086",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This reverts #32380, since this may cause that silently leaking_x000D_
information when people upgrade the app._x000D_
_x000D_
We need deprecation first before making this.","C 0000087",0,0,0,0,3,0,0,0,0,1,0,1,0,0,3,0,0,0,0
"https://codeclimate.com/github/rails/rails/pull/35254_x000D_
_x000D_
![image](https://user-images.githubusercontent.com/12642/52730592-1b23ae80-2fff-11e9-8ab5-c26bb7dbf731.png)_x000D_
","C 0000088",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"While checking #35229 found that `build_lookup_context` had some unused arguments in it. Removed those arguments. _x000D_
_x000D_
@r? @tenderlove ","C 0000089",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"I don't know this is the right fix necessarily._x000D_
_x000D_
When rendering a collection, each object in the collection can respond to `to_partial_path`.  The template renderer will render the partial returned by that method.  However, each object in the collection could return a different template.  That means there isn't *one* template associated with the collection.  Our collection template cache code depends on the collection using just one template.  If you try to set `cached: true` on a collection that doesn't have just one template associated with it, it will raise an exception._x000D_
_x000D_
The patch in this PR fixes the exception, but doesn't actually cache the templates.  Obviously, this use case isn't supported today, and it seems like nobody has noticed._x000D_
_x000D_
1. I'm not sure how or if we should support caching collections like this_x000D_
2. If we decide not to support this, should it raise an exception?","C 0000090",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Fix the `config_for` to always return a NonSymbolAccessDeprecatedHash:_x000D_
_x000D_
- If you have hashes inside array, the hashes were getting initialized_x000D_
  as regular HWIA wereas we want them to be_x000D_
  NonSymbolAccessDeprecatedHash in order to trigger a deprecation_x000D_
  warning when keys are accessed with string._x000D_
_x000D_
  This patch fixes that by overwriting the `[]=` to to the same_x000D_
  as what HWIA does (with the difference that we don't call_x000D_
  `convert_key` to not trigger a deprecation when setting value)._x000D_
_x000D_
  I also took the liberty to extract `hash.nested_under_indifferent_access`,_x000D_
  into a separate method to allow subclasses to return whatever_x000D_
  they want._x000D_
  Inheriting HWIA is not common, but I think it's useful for cases_x000D_
  like this one where we want to preprocess reading and writing values_x000D_
  in the hash (for deprecation purposes or other reasons)._x000D_
_x000D_
cc/ @gmcgibbon _x000D_
","C 0000091",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"The special case happens when through association has a custom scope_x000D_
that is applied to the source association when loading._x000D_
In this case, the source association would need to be reset after_x000D_
main association is loaded. See tests._x000D_
_x000D_
After this patch, the source association reset code will consistently relay on the scope passed to the preloader as being a reason for extra SQL conditions and reset to be done. ","C 0000092",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
**Rails Version**: 6.0.0.beta1_x000D_
_x000D_
Having the following `database.yml`:_x000D_
_x000D_
```yml_x000D_
default: &default_x000D_
  adapter: postgresql_x000D_
  encoding: unicode_x000D_
  pool: <%= ENV.fetch(""RAILS_MAX_THREADS"") { 5 } %>_x000D_
_x000D_
development:_x000D_
  <<: *default_x000D_
  database: project_development_x000D_
_x000D_
test:_x000D_
  <<: *default_x000D_
  database: project_test_x000D_
_x000D_
production:_x000D_
  <<: *default_x000D_
  database: project_production_x000D_
```_x000D_
_x000D_
I got the following exceptions running tests (after calling `maintain_test_schema!`):_x000D_
_x000D_
```_x000D_
PG::ConnectionBad:_x000D_
#   FATAL:  database ""project_development"" does not exist_x000D_
#   /bundle/gems/pg-1.1.4/lib/pg.rb:56:in `initialize'_x000D_
```_x000D_
_x000D_
After some investigation I found that DB configurations all had `""test""` as `env_name`._x000D_
And specifically for `test` env:_x000D_
_x000D_
```_x000D_
[6] pry(main)> resolver = ActiveRecord::ConnectionAdapters::ConnectionSpecification::Resolver.new(ActiveRecord::Base.configurations)_x000D_
=> #<ActiveRecord::ConnectionAdapters::ConnectionSpecification::Resolver:0x000055b27e697590_x000D_
 @configurations=_x000D_
  #<ActiveRecord::DatabaseConfigurations:0x000055b27e5febb0_x000D_
   @configurations=_x000D_
    [#<ActiveRecord::DatabaseConfigurations::UrlConfig:0x000055b27bec2830_x000D_
      @config=_x000D_
       {""adapter""=>""postgresql"",_x000D_
        ""encoding""=>""unicode"",_x000D_
        ""pool""=>5,_x000D_
        ""database""=>""project_development"",_x000D_
        ""username""=>""postgres"",_x000D_
        ""password""=>""postgres"",_x000D_
[7] pry(main)> resolver.resolve(:test, :test)_x000D_
=> {""adapter""=>""postgresql"",_x000D_
 ""encoding""=>""unicode"",_x000D_
 ""pool""=>5,_x000D_
 ""database""=>""project_development"",_x000D_
 ""username""=>""postgres"",_x000D_
 ""password""=>""postgres"",_x000D_
 ""port""=>5432,_x000D_
 ""host""=>""postgres"",_x000D_
 ""name""=>""test""}_x000D_
```_x000D_
_x000D_
This is a regression comparing to 5.2._x000D_
_x000D_
**NOTE:** For those struggling with this problem: it could be fixed by adding `url`_x000D_
_x000D_
```yml_x000D_
default: &default_x000D_
  url: <%= ENV['DATABASE_URL'] %>_x000D_
```","C 0000093",0,0,0,0,0,0,0,0,0,0,1,0,0,2,1,0,0,0,0
"Is this a terrible idea? I want the transition from configuration hashes to objects to be smooth and given that @SamSaffron had to ask me what to do I think I could make this more app and gem friendly. If anyone has an idea of how to do this in another way let me know._x000D_
_x000D_
cc/ @tenderlove @matthewd @rafaelfranca _x000D_
_x000D_
---_x000D_
_x000D_
In chat Sam Saffron asked how to use the setter now that configurations_x000D_
is no longer a hash when you need to do AR::Base.configurations[""test""]=._x000D_
_x000D_
Now you can just do `ActiveRecord::Base.configurations = { the hash }` but_x000D_
I realized it throws an error and is unintuitive. To aid in the_x000D_
transition from hashes to object I've added the setter to the_x000D_
method_missing call so that it can be used and throws a warning instead_x000D_
of just erroring with undefined method._x000D_
_x000D_
While in here I also improved the deprecation warning._x000D_
_x000D_
Getters message:_x000D_
_x000D_
```_x000D_
DEPRECATION WARNING: `ActiveRecord::Base.configurations` no longer_x000D_
returns a hash. Methods that act on the hash like `values` are_x000D_
deprecated and will be removed in Rails 6.1. Use the `configs_for`_x000D_
method to collect and iterate over the database configurations._x000D_
```_x000D_
_x000D_
Setter message:_x000D_
_x000D_
```_x000D_
DEPRECATION WARNING: Setting `ActiveRecord::Base.configurations` with_x000D_
`:[]=` is deprecated. Use `ActiveRecord::Base.configurations=` directly_x000D_
to set the configurations instead._x000D_
```","C 0000094",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"when doing a default install 1.4.0 gets installed, causing the error ""can't activate sqlite3 (~> 1.3.6), already activated sqlite3-1.4.0""_x000D_
see https://stackoverflow.com/questions/54527277/cant-activate-sqlite3-1-3-6-already-activated-sqlite3-1-4-0_x000D_
this small fix changes the dependency to the latest version of sqlite3-ruby which includes ""various bugfixes""_x000D_
_x000D_
### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000095",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"- https://github.com/rails/rails/pull/35127 introduced a new change to_x000D_
  not make a query when the counter cache value of the parent is 0._x000D_
_x000D_
  The implementation was overwriting the `find_target?` method from_x000D_
  `AR::Associaton`._x000D_
  This had the side effect of making `Topic.comments.destroy_all` to_x000D_
  not destroy anything in some circumstances. You can find a reproduction script _x000D_
  in this comment  https://github.com/rails/rails/pull/35127#issuecomment-462876180_x000D_
_x000D_
  The bug was mainly happening during test because the counter_cache_x000D_
  value isn't set when fixtures load._x000D_
_x000D_
  This PR removes the `find_target?` overwritten method in_x000D_
  HasManyAssociation and inline the condition inside methods that_x000D_
  needs it (such as `size` and `load_target` which is used by `to_ary`)_x000D_
_x000D_
  Even though the root cause of the problem was mainly happening in_x000D_
  test, I decided to opt-out the `destroy_all` from checking the_x000D_
  counter cache value has this could cause potential issue if fonr any_x000D_
  reason the counter cacher get desync._x000D_
_x000D_
cc/ @rafaelfranca @byroot _x000D_
_x000D_
","C 0000096",0,1,0,0,0,0,0,0,1,0,3,2,0,1,1,0,1,1,0
"Motivation:_x000D_
  - Currently we have 2 separate monkey patches in place for tracking_x000D_
  enqueued time for 2 separate workers. It seems that activejob could be_x000D_
  a source of truth for how long an item has been enqueued so that we can_x000D_
  easily use it for consistent monitoring across workers/apps to ensure_x000D_
  that jobs are running at an acceptable speed._x000D_
_x000D_
Changes:_x000D_
  - Add an enqueued at attribute and serialization tooling._x000D_
  - Add a method to get how long a job has been enqueued for._x000D_
  - Add a logging item to show how long a job was enqueued prior to the_x000D_
  perform method firing._x000D_
_x000D_
### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000097",0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0
"On CI we've seen a few test failures when the DatabaseSelectorTest runs_x000D_
before the ConnectionHandlersMultiDbTest. This is because it's creating_x000D_
2 handlers but not properly tearing them down._x000D_
_x000D_
Example failure:_x000D_
_x000D_
```_x000D_
Failure:_x000D_
ActiveRecord::ConnectionAdapters::ConnectionHandlersMultiDbTest#test_connects_to_with_single_configuration_x000D_
[/rails/activerecord/test/cases/connection_adapters/connection_handlers_multi_db_test.rb:241]:_x000D_
Expected: 1_x000D_
  Actual: 2_x000D_
```_x000D_
_x000D_
cc/ @matthewd for bringing this to my attention.","C 0000098",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"## Introduction_x000D_
_x000D_
This patch integrates [Zeitwerk](https://github.com/fxn/zeitwerk) and makes it the default autoloader for Rails 6 applications._x000D_
_x000D_
* You can now robustly use constant paths in class and module definitions:_x000D_
_x000D_
  ```ruby_x000D_
  # Matches Ruby semantics now._x000D_
  class Admin::UsersController < ApplicationController_x000D_
    # ..._x000D_
  end_x000D_
  ```_x000D_
_x000D_
* All known use cases of `require_dependency` have been eliminated._x000D_
_x000D_
* There is a [centralized solution](https://github.com/fxn/zeitwerk#preloading) to orderly preload STI hierarchies._x000D_
_x000D_
* Edge cases in which the autoloaded constant depended on execution order are gone._x000D_
_x000D_
* Autoloading is thread-safe in general, not just for the currently supported use cases with explicit locks like web requests. For example, you can now write multi-threaded scripts to be run by `bin/rails runner` and they will autoload just fine._x000D_
_x000D_
## Principles behind the integration_x000D_
_x000D_
The classic autoloader has been there since [the beginning](https://github.com/rails/rails/blob/v1.0.0/activesupport/lib/active_support/dependencies.rb), and while it has [no public interface](https://api.rubyonrails.org/classes/ActiveSupport/Dependencies.html) except for locking mechanisms, extra care has been taken:_x000D_
_x000D_
* The implementation of `ActiveSupport::Dependencies` and its test suite are untouched._x000D_
_x000D_
* Easy way to opt-out: just throw `config.autoloader = :classic` into `config/application.rb`. It has to go after `config.load_defaults 6.0` if you have that line._x000D_
_x000D_
* Integration has been clearly delineated so that falling back to the classic autoloader is safe._x000D_
_x000D_
* It is a key observation that `Kernel#autoload` is invoked by the constant resolution algorithm as classes and modules are checked. In particular, it takes precedence over `const_missing` and thus we can leave `const_missing` there to have a cleaner patch, it won't do anything anyway for autoloadable constants._x000D_
_x000D_
* Seamless take over in new apps from an end-user point of view._x000D_
_x000D_
I envision a gradual evolution of this feature, Rails 6 is just a first step._x000D_
_x000D_
## Patch overview_x000D_
_x000D_
* There is a new config attribute `config.autoloader` that can be `:classic` or `:zeitwerk`. This is `:zeitwerk` for new apps on CRuby, and `:classic` for apps loading the defaults of previous versions or run by other interpreters._x000D_
_x000D_
* If Zeitwerk is enabled, there are two globally accessible autoloaders: `Rails.autoloader`, and `Rails.once_autoloader`. The former is the main one. The latter, in addition to not win a Pulitzer for naming, is responsible for `autoload_once_paths`, and importantly also for autoload paths that come from gems. Both autoloaders autoload, but only `Rails.autoloader` is invoked by Rails to reload, so if you have engines like Action Storage or Devise installed as gems, they won't be reloaded anymore._x000D_
_x000D_
* In particular, if you throw `Rails.autoloader.logger = method(:puts)` to `config/application.rb` you'll see Zeitwerk doing its thing._x000D_
_x000D_
* Selected private API is emulated, but it is _not_ the goal of the integration to fully replicate the private API. If there is code that depends on the inner workings excessively, I prefer that people switch to `:classic` until it gets updated, to clutter the integration to support any imaginable abuse of the private API. This autoloading is an inflection point and it is our opportunity to start afresh._x000D_
_x000D_
* Furthermore, the private API called downwards from `const_missing` should not be called anymore because, as explained above, `Kernel#autoload` runs first. There might be some edge case around autoloading errors, not worth it, keep it simple._x000D_
_x000D_
* People should not write `require_dependency` anymore, and upgrades should delete the calls. If you detect a use case for it please tell us._x000D_
_x000D_
* Eager loading calls `Zeitwerk.eager_load_all`. Therefore, it will eager load not only the Rails application, but also all gems managed by Zeitwerk._x000D_
_x000D_
* Engines can technically use Zeitwerk by clearing their autoload paths, but better don't and leave the choice to the parent application._x000D_
_x000D_
* Autoload paths are frozen in the finisher. The public API for them is `config.autoload_paths`, but if existing code is pushing to `ActiveSupport::Dependencies.autoload_paths`, it has to do so before the finisher. Action Mailer has been updated to do that._x000D_
_x000D_
* Applications using `bootsnap` have to upgrade to 1.4.0._x000D_
_x000D_
## Backwards incompatibility_x000D_
_x000D_
In `:classic` mode there is no change. If Zeitwerk is enabled:_x000D_
_x000D_
* For files below the standard `concerns` directories (like `app/models/concerns`), `Concerns` cannot be a namespace. That is, `app/models/concerns/geolocatable.rb` is expected to define `Geolocatable`, not `Concerns::Geolocatable`._x000D_
_x000D_
* A file should define only one constant in its namespace (but can define inner ones). So, if `app/models/foo.rb` defines `Foo` and also `Bar`, `Bar` won't be reloaded cleanly. You can have inner constants, so `Foo` may define an auxiliary internal class `Foo::Woo`._x000D_
_x000D_
* A file that defines a class or module that acts as a namespace, needs to define the class or module using the `class` and `module` keywords. For example, if you have `app/models/hotel.rb` defining the `Hotel` class, and `app/models/hotel/pricing.rb` defining a mixin for hotels, the `Hotel` class must be defined with `class`, you cannot do `Hotel = Class.new { ... }` or `Hotel = Struct.new { ... }` or anything like that. Those idioms are fine in classes and modules that do not act as namespaces._x000D_
_x000D_
* Once the application has booted, autoload paths are frozen._x000D_
_x000D_
* Autoload paths that do not exist on boot are ignored._x000D_
_x000D_
## Future work_x000D_
_x000D_
I believe the patch is in good shape for a beta. For final, I'll work on documentation. In particular, the [Autoloading and Reloading Constants](https://guides.rubyonrails.org/autoloading_and_reloading_constants.html) needs a complete revision._x000D_
_x000D_
There are some `if RUBY_ENGINE == ""ruby""` and `config.autoloader == :zeitwerk` here and there, I'll try to encapsulate them somehow._x000D_
","C 0000099",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Turn lookup context in to a stack, push and pop if formats change_x000D_
_x000D_
This commit keeps a stack of lookup contexts on the ActionView::Base instance.  If a format is passed to render, we instantiate a new lookup context and push it on the stack, that way any child calls to ""render"" will use the same format information as the parent.  This also isolates ""sibling"" calls to render (multiple calls to render in the same template)._x000D_
    _x000D_
Fixes #35222 #34138_x000D_
_x000D_
~~This is just a WIP.  This commit means that the LookupContext no longer has a 1:1 relationship with the instance of ActionView::Base that evaluates the templates.  I suspect this breaks template caching and I want to verify before merging.~~_x000D_
_x000D_
Nevermind, it doesn't touch the template cache.  Template caches are stored on ""Resolvers"" which wrap paths that we search.  Those are stored on the controller instance, so they should live for the life of the process.","C 0000100",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"It seems unstable only an isolated test. I investigate and fix with PR.","C 0000101",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Currently, we only document the use case for ActiveJob's `queue_as` block_x000D_
arguments in [Rails Guides][1]. It seems necessary to document them in the API_x000D_
docs as well considering how useful and powerful this option is._x000D_
_x000D_
[1]: https://edgeguides.rubyonrails.org/active_job_basics.html#queues","C 0000102",0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"### Other Information_x000D_
Benchmark Report:_x000D_
```_x000D_
n = 1000000_x000D_
Benchmark.bm do |x|_x000D_
  x.report(""old: "") {for i in 1..n; namespaces_to_paths(namespaces); end}_x000D_
  x.report(""new: "") {for i in 1..n; namespaces_to_paths_v1(namespaces); end}_x000D_
end_x000D_
_x000D_
        user       system    total        real_x000D_
old:  13.200857   0.081975  13.282832 ( 13.288438 )_x000D_
new:   9.347042   0.024553   9.371595 (  9.376679 )_x000D_
_x000D_
[#<Benchmark::Tms:0x00007fe6a5838fb8 @cstime=0.0, @cutime=0.0, @label=""old: "", @real=13.288438000017777, @stime=0.08197500000000013, @total=13.282832000000006, @utime=13.200857000000006>,_x000D_
 #<Benchmark::Tms:0x00007fe6a36b8e10 @cstime=0.0, @cutime=0.0, @label=""new: "", @real=9.376678999979049, @stime=0.024553000000000047, @total=9.371595000000003, @utime=9.347042000000002>]_x000D_
```_x000D_
","C 0000103",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"This reverts commit 38f9e41f2c4b64377ffb036c53873dbfb51546cf, reversing_x000D_
changes made to 5e493c3b839f10d639f5cce1f1b9ff9292702821._x000D_
_x000D_
Reason: The ajv@6.9.1 was released that fixes issue._x000D_
_x000D_
I want to check this fix in CI..._x000D_
","C 0000104",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0
"### Summary_x000D_
_x000D_
Corrects a small error in the documentation regarding usage of JavaScript in Rails 😄_x000D_
_x000D_
1. Swaps the `#users` jQuery selector to correct position._x000D_
2. Prevents ERB from escaping the HTML using the `raw` helper.","C 0000105",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"### Summary_x000D_
When using a custom delivery job in combination with a parameterized mail it did not use the specified custom mailer job but always Parameterized::DeliveryJob._x000D_
_x000D_
### Other Information_x000D_
_x000D_
This is already fixed in master. This is basically just a cherry-pick of @gmcgibbon work into 5-2-stable. However, the original work also contained some more code so cherry-picking did not work so I added @gmcgibbon as co-author of the commit to give him the proper credit, I hope this is fine._x000D_
_x000D_
cc @sikachu","C 0000106",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0
"I implemented Foreign key create in `create_table` for SQLite3 at_x000D_
#24743. This follows #24743 to implement `add_foreign_key` and_x000D_
`remove_foreign_key`._x000D_
Unfortunately SQLite3 has one limitation that_x000D_
`PRAGMA foreign_key_list(table-name)` doesn't have constraint name._x000D_
So we couldn't implement find/remove foreign key by name for now._x000D_
_x000D_
Fixes #35207._x000D_
Closes #31343.","C 0000107",0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0
"Because ajv@6.9.0 does not work with webpack._x000D_
Ref: https://github.com/epoberezkin/ajv/issues/941_x000D_
_x000D_
_x000D_
","C 0000108",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Bump the migration examples in the Edge Guide from [5.0] to [6.0]. This will make it align with current migration generator behavior.","C 0000109",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
,"C 0000110",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000111",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"I applied the following migration._x000D_
_x000D_
```ruby_x000D_
create_table ""users"" do |t|_x000D_
  t.string :name_x000D_
  t.timestamp_x000D_
end_x000D_
```_x000D_
_x000D_
It contains a typo, `timestamp` instead of `timestamps`._x000D_
But this is appliable without errors._x000D_
_x000D_
_x000D_
Short-hands for TableDefinition#columns is callable without column names._x000D_
It do nothing when called without column names._x000D_
This change suggests raise ArgumentError in such cases.","C 0000112",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"This is an alternative to https://github.com/rails/rails/pull/35188_x000D_
_x000D_
I like this PR better because the diff is smaller and easier to understand, IMO.  I've verified it has the same impact as https://github.com/rails/rails/pull/35188 and it has the same performance characteristics as master.","C 0000113",0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
A change to `config_for` in https://github.com/rails/rails/pull/33815 and https://github.com/rails/rails/pull/33882 has altered the behaviour of the returned object in a breaking manner. _x000D_
_x000D_
Before that change, nested hashes returned from `config_for` could be accessed using non-symbol keys. After the change, all keys are recursively symbolized so non-symbol access fails to read the expected values._x000D_
_x000D_
This is a breaking change for any app that might be relying on the nested hashes returned from `config_for` calls, and thus should be deprecated before being removed from the codebase._x000D_
_x000D_
### Solution_x000D_
_x000D_
This PR introduces a temporary `NonSymbolAccessDeprecatedHash` class that recursively wraps any nested hashes inside the `OrderedOptions` object returned from `config_for` and issues a deprecation notice when a non-symbol based access is performed._x000D_
_x000D_
This way, any apps that are still relying on the ability to access these nested hashes using non-symbol keys will be able to observe the deprecation notices and have time to implement fixes before non-symbol access is removed for good._x000D_
_x000D_
### Other Information_x000D_
_x000D_
Note that the top-level access to the `OrderedOptions` object returned from `config_for` has indifferent access semantics due to the nature of how `OrderedOptions` works. This functionality is the same for `Rails.config` and `secrets`, so is not changed nor is any deprecation notice issued._x000D_
_x000D_
The deprecation is only for nested keys below the top-level, since that is the functionality that is potentially broken.","C 0000114",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"### Summary_x000D_
_x000D_
Closes https://github.com/rails/rails/issues/34829._x000D_
_x000D_
The docs for `ActiveRecord::Associations::CollectionProxy` describe `ActiveRecord::Associations::Association`. I've moved them to `Association` and rewrote `CollectionProxy`'s docs to be more applicable to what the class actually does.`_x000D_
_x000D_
Also _x000D_
_x000D_
- I stopped referencing ivars in the documentation, I'm referencing public readers instead as to not focus on the implementation._x000D_
- I've reworded target to be described as a result set instead of simply an object._x000D_
","C 0000115",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The `distinct` affects (reduces) rows of the result, so it is important_x000D_
part when both `distinct` and `offset` are given._x000D_
_x000D_
Replacing SELECT clause to `1 AS one` and removing `distinct` and_x000D_
`order` is just optimization for the `exists?`, we should not apply the_x000D_
optimization for that case._x000D_
_x000D_
Fixes #35191.","C 0000116",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"### Summary_x000D_
_x000D_
The Changelog links for Rails 6 are broken in guides - https://edgeguides.rubyonrails.org/6_0_release_notes.html_x000D_
_x000D_
This fix bumps the branch from 6-0-stable to master, where they are available._x000D_
","C 0000117",0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0
"### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000118",0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"This commit fixes the memory leak in dev.  I'm not super pleased with the commit right now and I want to refactor it some, but I also want to make sure it's public.  Specifically I dislike the part where I added another layer to the cache.  I think I can improve that part._x000D_
_x000D_
I think the source of the leak is that the digest cache was combined with the template object cache.  This commit splits the caches, then combines them behind the `DetailsKey` interface.  Resolvers have to ask the details key thing for their cache.  That gave the LookupContext an implicit dependency on `DetailsKey`, which is why I had to change the `fallbacks` method to do a check at runtime (otherwise the circular dependency ruins file loading)._x000D_
_x000D_
I think separating the caches will fix the tests here: https://github.com/rails/rails/pull/35160_x000D_
_x000D_
Here's a graph of the heap live slots on master versus this branch:_x000D_
_x000D_
<img width=""490"" alt=""erb eval 2019-02-07 15-48-58"" src=""https://user-images.githubusercontent.com/3124/52450461-eb9d0f80-2aef-11e9-9446-263ee5bfb539.png"">_x000D_
","C 0000119",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"I missed these in #35182 😳, this finishes the rename of `config.active_record.database_operations` to `database_resolver_context`._x000D_
_x000D_
I also updated the message from the previous config's introduction in the CHANGELOG, which I hope is okay since a release hasn't been cut with that config yet._x000D_
_x000D_
cc @eileencodes ","C 0000120",0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0
"`relation.create` populates scope attributes to new record by `scoping`,_x000D_
it is necessary to assign the scope attributes to the record and to find_x000D_
STI subclass from the scope attributes._x000D_
_x000D_
But the effect of `scoping` is class global, it was caused undesired_x000D_
behavior that pollute all class level querying methods in initialization_x000D_
block and callbacks (`after_initialize`, `before_validation`,_x000D_
`before_save`, etc), which are user provided code._x000D_
_x000D_
To avoid the leaking scope issue, restore the original current scope_x000D_
before initialization block and callbacks are invoked._x000D_
_x000D_
Fixes #9894._x000D_
Fixes #17577._x000D_
Closes #31526.","C 0000121",0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0
"Some tests are running yarn install during the test._x000D_
_x000D_
The directory used for the isolation test is not subject to yarn workspace, and it occurs because the required package is not installed._x000D_
In order to avoid this, I fixed all necessary packages to be installed before run test and use a symlink to `node_modules`._x000D_
_x000D_
This is a bit complicated, as `yarn install` needs to be run in a specific directory before running the test._x000D_
However, running `yarn install` every time run the test is expensive when testing locally and should be avoided.","C 0000122",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This makes two naming changes to improve the API of the new database selector._x000D_
_x000D_
1. Rename the `resolver` ivar/attribute of `DatabaseSelector::Resolver` to `operations`_x000D_
_x000D_
""Operations"" is what we call that object/class elsewhere (in `DatabaseSelector` and in the config)._x000D_
_x000D_
2. Rename `Session.build` to `Session.call`_x000D_
_x000D_
This better matches `DatabaseSelector::Resolver`, which is built with `.call`, and also means we can configure a proc as the operations._x000D_
_x000D_
For example this could be useful to swap between different operations classes for different types of requests (which I think is a pretty common use case):_x000D_
_x000D_
``` ruby_x000D_
config.active_record.database_operations = ->(request) do_x000D_
  if request.path.start_with?(""/api/"")_x000D_
    MyCustomApiOperations.call(request)_x000D_
  else_x000D_
    ActiveRecord::Middleware::DatabaseSelector::Session.call(request)_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
cc @eileencodes @tenderlove ","C 0000123",0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Allow skipping incineration of processed emails. This would be useful when applications wants to keep the original email around and manage its incineration.","C 0000124",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"…iation is changed_x000D_
_x000D_
This is the regression fix after 19c80718afea8cf8f56ee68fcfbe325d54c02906._x000D_
The `target.empty?` condition was removed  -https://github.com/rails/rails/commit/19c80718afea8cf8f56ee68fcfbe325d54c02906#diff-20f545c453ee24942b6f7ae565e9e369L215_x000D_
which introduced the bug:_x000D_
_x000D_
``` ruby_x000D_
company.client_ids.size # => 3_x000D_
company.clients.build_x000D_
company.clients.size # => 4_x000D_
```_x000D_
_x000D_
I am not sure why it was removed as no existing test fails when I put it back._x000D_
_x000D_
cc @kamipo _x000D_
","C 0000125",1,2,0,0,0,0,0,0,0,0,1,0,1,1,4,0,0,0,0
"### Summary_x000D_
_x000D_
The [Grape API framework](https://github.com/ruby-grape/grape) regularly writes tests like [spec/grape/api_spec.rb](https://github.com/ruby-grape/grape/blob/master/spec/grape/api_spec.rb)._x000D_
_x000D_
When attempting to write a test in a Rails environment similar to the following:_x000D_
```_x000D_
describe Grape::Api, type: :request do_x000D_
  let(:app) {_x000D_
    Class.new(Grape::API) do_x000D_
      get 'test' do_x000D_
        { foo: 'bar' }_x000D_
      end_x000D_
    end_x000D_
  }_x000D_
_x000D_
  it '200s' do_x000D_
    get 'test'_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
The following exception is thrown:_x000D_
_x000D_
```_x000D_
NoMethodError: undefined method `url_helpers' for #<Array:0x00007fb4e4bc4c88>_x000D_
--_x000D_
0: .../lib/action_dispatch/testing/integration.rb:330:in `block in create_session'_x000D_
1: .../lib/action_dispatch/testing/integration.rb:326:in `initialize'_x000D_
2: .../lib/action_dispatch/testing/integration.rb:326:in `new'_x000D_
3: .../lib/action_dispatch/testing/integration.rb:326:in `create_session'_x000D_
4: .../lib/action_dispatch/testing/integration.rb:316:in `integration_session'_x000D_
5: .../lib/action_dispatch/testing/integration.rb:348:in `block (2 levels) in <module:Runner>'_x000D_
```_x000D_
_x000D_
This change explicitly ensures that `app.routes` is an `ActionDispatch::Routing::RouteSet` instance and enables writing tests with a non-ActionDispatch-routed app (like Grape::API) in a Rails environment.","C 0000126",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Document of `CollectionProxy#concat` and `CollectionAssociation#concat` says `Returns +self+ so method calls may be chained.`, but it was returning an array of arguments._x000D_
This PR fixes the former to match the documented behavior (same as `Array#concat`'s behavior), and remove that part of doc from the latter.","C 0000127",0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,2,0,0,0
"### Summary_x000D_
_x000D_
Was reading through the documentation for the `ScreenshotHelper` class. Noticed that the terminal artifact format reference URL (https://buildkite.github.io/terminal/inline-images/) is out of date and leads to a 404 page. Updated it to the new URL https://buildkite.github.io/terminal-to-html/inline-images/_x000D_
","C 0000128",1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0
"This commit speeds up rendering partials by caching the variable name_x000D_
calculation on the template.  The variable name is based on the ""virtual_x000D_
path"" used for looking up the template.  The same virtual path_x000D_
information lives on the template, so we can just ask the cached_x000D_
template object for the variable._x000D_
_x000D_
This benchmark takes a couple files, so I'll cat them below:_x000D_
_x000D_
```_x000D_
[aaron@TC ~/g/r/actionview (speed-up-partials)]$ cat render_benchmark.rb_x000D_
require ""benchmark/ips""_x000D_
require ""action_view""_x000D_
require ""action_pack""_x000D_
require ""action_controller""_x000D_
_x000D_
class TestController < ActionController::Base_x000D_
end_x000D_
_x000D_
TestController.view_paths = [File.expand_path(""test/benchmarks"")]_x000D_
controller_view = TestController.new.view_context_x000D_
_x000D_
result = Benchmark.ips do |x|_x000D_
  x.report(""render"") do_x000D_
    controller_view.render(""many_partials"")_x000D_
  end_x000D_
end_x000D_
[aaron@TC ~/g/r/actionview (speed-up-partials)]$ cat test/benchmarks/test/_many_partials.html.erb_x000D_
Looping:_x000D_
<ul>_x000D_
<% 100.times do |i| %>_x000D_
  <%= render partial: ""list_item"", locals: { i: i } %>_x000D_
<% end %>_x000D_
</ul>_x000D_
[aaron@TC ~/g/r/actionview (speed-up-partials)]$ cat test/benchmarks/test/_list_item.html.erb_x000D_
<li>Number: <%= i %></li>_x000D_
```_x000D_
_x000D_
Benchmark results (master):_x000D_
_x000D_
```_x000D_
[aaron@TC ~/g/r/actionview (master)]$ be ruby render_benchmark.rb_x000D_
Warming up --------------------------------------_x000D_
              render    41.000  i/100ms_x000D_
Calculating -------------------------------------_x000D_
              render    424.269  (± 3.5%) i/s -      2.132k in   5.031455s_x000D_
```_x000D_
_x000D_
Benchmark results (this branch):_x000D_
_x000D_
```_x000D_
[aaron@TC ~/g/r/actionview (speed-up-partials)]$ be ruby render_benchmark.rb_x000D_
Warming up --------------------------------------_x000D_
              render    50.000  i/100ms_x000D_
Calculating -------------------------------------_x000D_
              render    521.862  (± 3.8%) i/s -      2.650k in   5.085885s_x000D_
```_x000D_
_x000D_
Caching is enabled, so this improvement should impact production apps.  Also, the logic in the partial renderer is pretty complex, we may not even need that value to be calculated._x000D_
","C 0000129",0,0,0,0,0,0,0,0,0,1,2,0,0,0,2,0,0,0,0
"### Summary_x000D_
_x000D_
`Dir.tmpdir` require `tmpdir` to be loaded. We do not require it explicitly._x000D_
_x000D_
I've been caught in the situation when it might be not loaded in the app (https://travis-ci.org/palkan/anyway_config/jobs/489168942)._x000D_
_x000D_
That also leads to the exception in the `ensure` block, thus making debugging not so simple 🙂 Fixed that one too._x000D_
_x000D_
","C 0000130",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"`sqlite3` gem was the last one within popular db drivers which version was not fixed in generated Gemfile. This change will prevent issues like #35161 in the future._x000D_
_x000D_
Previous changes  #35154 #35157","C 0000131",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"_x000D_
### Summary_x000D_
_x000D_
- Use `\z` instead of `$`_x000D_
- Use character class instead of alternation_x000D_
- Optimize alternation order_x000D_
_x000D_
### Other Information_x000D_
_x000D_
`\z` is slower than `$`, but it is better meaning._x000D_
_x000D_
Benchmark result is rough, because many other processes run together on my laptop machine._x000D_
It seems `([_.]|\b)` is always faster than `(\b|[_.])` and `(\b|_|\.)`._x000D_
_x000D_
```_x000D_
% cat ~/bench.yml_x000D_
prelude: |_x000D_
  keys = %w[not_match html foo_html bar.html]_x000D_
benchmark:_x000D_
  or_d: |_x000D_
    keys.each do |key|_x000D_
      /(\b|_|\.)html$/.match?(key.to_s)_x000D_
    end_x000D_
  or_z: |_x000D_
    keys.each do |key|_x000D_
      /(\b|_|\.)html\z/.match?(key.to_s)_x000D_
    end_x000D_
  char_class_z: |_x000D_
    keys.each do |key|_x000D_
      /(\b|[_.])html\z/.match?(key.to_s)_x000D_
    end_x000D_
  char_class_d: |_x000D_
    keys.each do |key|_x000D_
      /(\b|[_.])html$/.match?(key.to_s)_x000D_
    end_x000D_
  char_class_2_z: |_x000D_
    keys.each do |key|_x000D_
      /([_.]|\b)html\z/.match?(key.to_s)_x000D_
    end_x000D_
  char_class_2_d: |_x000D_
    keys.each do |key|_x000D_
      /([_.]|\b)html$/.match?(key.to_s)_x000D_
    end_x000D_
% benchmark-driver ~/bench.yml_x000D_
Warming up --------------------------------------_x000D_
                or_d     1.529M i/s -      1.625M times in 1.062262s (653.90ns/i)_x000D_
                or_z     1.539M i/s -      1.602M times in 1.040741s (649.73ns/i)_x000D_
        char_class_z     1.526M i/s -      1.532M times in 1.003995s (655.51ns/i)_x000D_
        char_class_d     1.583M i/s -      1.631M times in 1.030430s (631.63ns/i)_x000D_
      char_class_2_z     1.599M i/s -      1.639M times in 1.025019s (625.33ns/i)_x000D_
      char_class_2_d     1.662M i/s -      1.754M times in 1.055074s (601.55ns/i)_x000D_
Calculating -------------------------------------_x000D_
                or_d     1.612M i/s -      4.588M times in 2.846843s (620.52ns/i)_x000D_
                or_z     1.510M i/s -      4.617M times in 3.058135s (662.32ns/i)_x000D_
        char_class_z     1.551M i/s -      4.577M times in 2.951371s (644.88ns/i)_x000D_
        char_class_d     1.631M i/s -      4.750M times in 2.912536s (613.21ns/i)_x000D_
      char_class_2_z     1.581M i/s -      4.797M times in 3.033929s (632.41ns/i)_x000D_
      char_class_2_d     1.693M i/s -      4.987M times in 2.945495s (590.62ns/i)_x000D_
_x000D_
Comparison:_x000D_
      char_class_2_d:   1693131.7 i/s _x000D_
        char_class_d:   1630754.8 i/s - 1.04x  slower_x000D_
                or_d:   1611560.2 i/s - 1.05x  slower_x000D_
      char_class_2_z:   1581264.1 i/s - 1.07x  slower_x000D_
        char_class_z:   1550673.2 i/s - 1.09x  slower_x000D_
                or_z:   1509845.1 i/s - 1.12x  slower_x000D_
% benchmark-driver ~/bench.yml_x000D_
Warming up --------------------------------------_x000D_
                or_d     1.534M i/s -      1.538M times in 1.002284s (651.69ns/i)_x000D_
                or_z     1.495M i/s -      1.529M times in 1.023011s (668.98ns/i)_x000D_
        char_class_z     1.535M i/s -      1.601M times in 1.043070s (651.49ns/i)_x000D_
        char_class_d     1.577M i/s -      1.620M times in 1.027315s (634.30ns/i)_x000D_
      char_class_2_z     1.569M i/s -      1.581M times in 1.007555s (637.46ns/i)_x000D_
      char_class_2_d     1.645M i/s -      1.738M times in 1.056730s (608.01ns/i)_x000D_
Calculating -------------------------------------_x000D_
                or_d     1.578M i/s -      4.603M times in 2.917980s (633.88ns/i)_x000D_
                or_z     1.549M i/s -      4.484M times in 2.895346s (645.64ns/i)_x000D_
        char_class_z     1.551M i/s -      4.605M times in 2.968680s (644.69ns/i)_x000D_
        char_class_d     1.634M i/s -      4.730M times in 2.894710s (612.03ns/i)_x000D_
      char_class_2_z     1.602M i/s -      4.706M times in 2.937455s (624.17ns/i)_x000D_
      char_class_2_d     1.648M i/s -      4.934M times in 2.993592s (606.71ns/i)_x000D_
_x000D_
Comparison:_x000D_
      char_class_2_d:   1648224.3 i/s _x000D_
        char_class_d:   1633896.7 i/s - 1.01x  slower_x000D_
      char_class_2_z:   1602125.6 i/s - 1.03x  slower_x000D_
                or_d:   1577594.4 i/s - 1.04x  slower_x000D_
        char_class_z:   1551127.1 i/s - 1.06x  slower_x000D_
                or_z:   1548849.8 i/s - 1.06x  slower_x000D_
```_x000D_
","C 0000132",1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"This is a followup to https://github.com/rails/rails/pull/33615_x000D_
_x000D_
The removal of array indexes being done only for i18n situation makes for fairly inconsistent results as you can see in the two tests I modified._x000D_
_x000D_
@Larochelle in your initial patch the `.remove(/\[\d\]/)` was also before the `if`, but then you moved it inside for https://github.com/rails/rails/pull/33615, is there something I'm missing?_x000D_
_x000D_
@rafaelfranca @Edouard-chin @Larochelle _x000D_
","C 0000133",1,1,0,0,0,1,0,0,0,1,1,0,0,1,2,0,0,0,0
"### Summary_x000D_
_x000D_
There is a bug that incorrectly matches routes of mounted applications (e.g. sprockets-rails) with a shorthand path (e.g. `/assets`)._x000D_
_x000D_
The queries to http://localhost:3000/assets/foo.png and to http://localhost:3000/assetsfoo.png are equivalent currently._x000D_
_x000D_
`The ActionDispatch::Journey::Path::Pattern::UnanchoredRegexp` generates regex that allows the route matcher to consider `/assets/foo.png` and `/assetsfoo.png` as same paths._x000D_
_x000D_
This PR fixes the issue by adding a word boundary to the generated regex._x000D_
_x000D_
### Other Information_x000D_
Way to reproduce the bug:_x000D_
1. Run commands_x000D_
```shell_x000D_
$ rails new test-app_x000D_
$ cd test-app_x000D_
$ touch app/assets/images/foo.png_x000D_
$ ./bin/rails server_x000D_
```_x000D_
2. Accessing http://localhost:3000/assetsfoo.png returns 200 with the correct image file","C 0000134",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"My over all goal is to make `ActionView::Template` a read-only data structure, and this PR is one step along the way.  This PR does two things:_x000D_
_x000D_
1. Pass locals to the template constructor.  This way we don't need to call `Template#locals=`_x000D_
2. Uses locals as part of the ""details key"". This way we can eliminate one layer of template caches_x000D_
_x000D_
There's a couple things about this patch that I'd like some feedback on.  This change:_x000D_
_x000D_
  https://github.com/rails/rails/compare/pass-locals-to-template?expand=1#diff-40f2a5bcf9edfd65a8efe42a05c53736R144_x000D_
_x000D_
I had to do a `details[:locals] || locals.sort` because we have tests that directly call `find_all` on the resolver rather than going through the normal template rendering process.  Do we consider the resolver to be public API?  The class isn't really documented, so I would think ""no"".  If we do consider it public, I think we should make it private._x000D_
_x000D_
Second, I changed `Template#initialize` to [require that locals are passed in](https://github.com/rails/rails/blob/43f14f02c04279a44b0de2bb76071e30d435d3bb/actionview/lib/action_view/template.rb#L139).  I found the exception to be very helpful when debugging.  Should we make it required?  Or just default to an empty array?  If we want to make it required, I'll add a deprecation warning, otherwise just default to empty array (I have no opinion about this).","C 0000135",1,1,1,0,2,0,0,0,0,0,0,0,0,2,8,2,0,0,0
"Follow up for  #35154 _x000D_
_x000D_
For version-dependent bug report templates, we still require specific sqlite3 version. 🤷‍♂️ ","C 0000136",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0
"Trying to resolve https://github.com/rails/rails/issues/35155","C 0000137",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"sqlite3 v1.4 has been released just now. Since we don't specify `sqlite3` gem version by default in Gemfile, it'll break adapter loading. _x000D_
_x000D_
Should we backport it into 5.x branches? There [are no significant changes](https://github.com/sparklemotion/sqlite3-ruby/blob/master/CHANGELOG.rdoc#140) since 1.3.13_x000D_
_x000D_
cc @tenderlove ","C 0000138",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"The docs don't include a link to where this method is defined. I tested the link I put in as follows:_x000D_
_x000D_
```_x000D_
2.2.0 :001 > ""production"".inquiry.production?_x000D_
NoMethodError: undefined method `inquiry' for ""production"":String_x000D_
2.2.0 :002 > require 'active_support'; require 'active_support/core_ext/string/inquiry'_x000D_
 => true _x000D_
2.2.0 :003 > ""production"".inquiry.production?_x000D_
 => true _x000D_
2.2.0 :004 > _x000D_
```","C 0000139",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Changes the Getting Started guide explanation for_x000D_
`ActionController::MissingExactTemplate` error, to reflect the current message._x000D_
_x000D_
Follow up for #29286, #35148_x000D_
_x000D_
[ci skip]","C 0000140",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"This commit updates the Missing Template image in the Getting Started_x000D_
Guide._x000D_
_x000D_
The new image displays the current error message. Additionally:_x000D_
- New image is a PNG file, whereas the current image is in fact a misnamed JPEG._x000D_
- New image is smaller._x000D_
_x000D_
Before:_x000D_
![image](https://user-images.githubusercontent.com/6261109/52210548-48de5a00-287f-11e9-9a74-546827ac9c03.png)_x000D_
_x000D_
```_x000D_
$ file --mime -b template_is_missing_articles_new.png_x000D_
image/jpeg; charset=binary_x000D_
$ du -h template_is_missing_articles_new.png_x000D_
464K    template_is_missing_articles_new.png_x000D_
```_x000D_
_x000D_
After:_x000D_
![template_is_missing_articles_new](https://user-images.githubusercontent.com/6261109/52210585-68758280-287f-11e9-85e6-680e45197cdb.png)_x000D_
_x000D_
```_x000D_
$ file --mime -b template_is_missing_articles_new.png_x000D_
image/png; charset=binary_x000D_
$ du -h template_is_missing_articles_new.png_x000D_
28K     template_is_missing_articles_new.png_x000D_
```_x000D_
_x000D_
[ci-skip]","C 0000141",1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0
"Refer to this closed pull request, #33791   I followed @georgeclaghorn 's suggestion and finished the feature._x000D_
","C 0000142",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0
"Make debug exceptions works in an environment where ActiveStorage is not loaded._x000D_
_x000D_
Error occurred before change:_x000D_
_x000D_
```_x000D_
Error:_x000D_
NameError: uninitialized constant ActionView::CompiledTemplates::ActiveStorage_x000D_
```_x000D_
_x000D_
_x000D_
_x000D_
","C 0000143",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Rails supports two ways of defining non-resourceful routes:_x000D_
_x000D_
```_x000D_
get 'post/:id' => 'posts#show' _x000D_
get 'post/:id', to: 'posts#show' _x000D_
```_x000D_
_x000D_
The Rails generators and most of the documentation use Ruby 1.9 hash syntax, but the documentation has some examples which use strings as keys. This results in situations where a single hash contains a mix of two different styles._x000D_
_x000D_
By suggesting the `to:` version in the docs, we can help developers to avoid this inconsistency.","C 0000144",0,0,0,0,1,0,0,0,0,0,0,0,1,0,2,0,0,0,0
"Cookie doesn't expire anymore unless a flag is set:_x000D_
_x000D_
- There is a regression in 6.0 introduced by #32937 where cookie_x000D_
  doesn't expire anymore unless the new `use_cookies_with_metadata`_x000D_
  configuration is set to `true`._x000D_
_x000D_
  This causes issue for app migration from 5.2 to 6.0 because the_x000D_
  `use_cookies_with_metadata` flag can't be set to true until all_x000D_
  servers are running on 6.0._x000D_
_x000D_
  Here is a small reproduction script that you can run in the console_x000D_
_x000D_
  ```ruby_x000D_
  ActionDispatch::Cookies_x000D_
_x000D_
  request = ActionDispatch::Request.empty_x000D_
  request.env[""action_dispatch.key_generator""] = ActiveSupport::KeyGenerator.new('1234567890')_x000D_
  request.env[""action_dispatch.signed_cookie_salt""] = 'signed cookie'_x000D_
  request.env[""action_dispatch.cookies_rotations""] = ActiveSupport::Messages::RotationConfiguration.new_x000D_
  request.env[""action_dispatch.use_authenticated_cookie_encryption""] = true_x000D_
  signed_cookie = request.cookie_jar.signed_x000D_
  signed_cookie[:foobar] = { value: '123', expires: 1.day.ago }_x000D_
  p signed_cookie[:foobar] # nil on 5.2, '123' on 6.0_x000D_
  ```_x000D_
_x000D_
","C 0000145",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"This PR aims to reduce the performance impact of adding/removing subscribers to `ActiveSupport::Notifications`._x000D_
_x000D_
[The docs say:](https://api.rubyonrails.org/classes/ActiveSupport/Notifications.html#module-ActiveSupport::Notifications-label-Temporary+Subscriptions)_x000D_
_x000D_
> WARNING: The instrumentation framework is designed for long-running subscribers, use this feature sparingly because it wipes some internal caches and that has a negative impact on performance._x000D_
_x000D_
Unfortunately not everyone heeds that advice 😅. If nothing else I suspect this is pretty common to do in tests._x000D_
_x000D_
---_x000D_
_x000D_
The first commit hashes any subscribers with a string pattern by their pattern, which allows a fast lookup of all matching string patterns in `listeners_for`. This avoids testing equality against all N patterns. Regex patterns are still stored in a single array and each need to be checked._x000D_
_x000D_
I wrote a benchmark to test having 500 String pattern listeners, and sending an event of each type._x000D_
_x000D_
``` ruby_x000D_
require 'benchmark/ips'_x000D_
require 'active_support/all'_x000D_
_x000D_
notifier = ActiveSupport::Notifications::Fanout.new_x000D_
_x000D_
patterns = 0.upto(500).map { |n| ""pattern#{n}"" }_x000D_
patterns.each do |name|_x000D_
  notifier.subscribe(name) { |*| }_x000D_
end_x000D_
_x000D_
Benchmark.ips do |x|_x000D_
  x.report(""cached"") do |x|_x000D_
    patterns.each do |name|_x000D_
      notifier.publish(name)_x000D_
    end_x000D_
  end_x000D_
_x000D_
  x.report(""uncached"") do |x|_x000D_
    # subscribe and unsubscribe to clear cache_x000D_
    subscriber = notifier.subscribe {}_x000D_
    notifier.unsubscribe(subscriber)_x000D_
_x000D_
    patterns.each do |name|_x000D_
      notifier.publish(name)_x000D_
    end_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
**Before**_x000D_
```_x000D_
              cached      1.527M (±11.1%) i/s -      7.493M in   4.994136s_x000D_
            uncached    267.741  (± 3.7%) i/s -      1.340k in   5.014361s_x000D_
```_x000D_
_x000D_
**After**_x000D_
```_x000D_
              cached      1.539M (±11.6%) i/s -      7.534M in   4.994576s_x000D_
            uncached    259.025k (±11.8%) i/s -      1.260M in   4.997521s_x000D_
```_x000D_
_x000D_
In this case it's in the order of ~1000x faster._x000D_
_x000D_
---_x000D_
_x000D_
The second commit avoids clearing the full cache when adding/removing a subscriber with a String pattern, since we need only clear the one key in the cache that will affect._x000D_
_x000D_
cc @tenderlove @eileencodes ","C 0000146",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"So in GH we could just change our handler names but that's going to be a lot of work and this would reduce churn. Thoughts?_x000D_
_x000D_
---_x000D_
_x000D_
When I wrote the `connected_to` and `connects_to` API's I wrote them_x000D_
with the idea in mind that it didn't really matter what the_x000D_
handlers/roles were called as long as those connecting to the roles knew_x000D_
which one wrote and which one read._x000D_
_x000D_
With the introduction of the middleware Rails begins to assume it's_x000D_
`writing` and `reading` and there's no room for other roles. At GitHub_x000D_
we've been using this method for a long time so we have a ton of legacy_x000D_
code that uses different handler names `default` and `readonly`. We_x000D_
could rename all our code but I think this is better for a few reasons:_x000D_
_x000D_
- Legacy apps that have been using multiple databases for a long time_x000D_
  can have an easier time switching._x000D_
- If we later find this to cause more issues than it's worth we can_x000D_
  easily deprecate._x000D_
- We won't force old apps to rewrite the resolver middleware just to use_x000D_
  a different handler._x000D_
_x000D_
Adding the writing_role/reading_role required that I move the code that_x000D_
creates the first handler for writing to the railtie. If I didn't move_x000D_
this the core class would assign the handler before I was able to assign_x000D_
a new one in my configuration and I'd end up with 3 handlers instead of_x000D_
2._x000D_
_x000D_
cc/ @tenderlove @matthewd @rafaelfranca","C 0000147",0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0
,"C 0000148",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Right now we only have one option that's supported, the delay. However I_x000D_
can see us supporting other options in the future._x000D_
_x000D_
This PR refactors the options to get passed into the resolver so whether_x000D_
you're using middleware or using the config options you can pass options_x000D_
to the resolver. This will also make it easy to add new options in the_x000D_
future._x000D_
_x000D_
cc/ @tenderlove @jhawthorn","C 0000149",0,0,0,1,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"### Summary_x000D_
_x000D_
Now the code iterates multiple times in two ways without need:_x000D_
_x000D_
- First, it goes through the records object multiple times doing_x000D_
partitions. In case we have hundreds of thousands of records (like in_x000D_
the benchmark I've left below) that means that we have to go_x000D_
through all of them multiple times doing it very slowly. That depends on_x000D_
the distribution of course but in PG if you have a huge number of tables_x000D_
the majority of the data are going to be `array_in` or composite_x000D_
elements_x000D_
- Second, once we have processed the records, we iterate over all of them_x000D_
again to register every record._x000D_
_x000D_
It's tested in rails 4.2.10 / ruby 2.2. (our production environment) but the code is the same in Rails 6.0 AFAIK_x000D_
_x000D_
### Other Information_x000D_
_x000D_
Related to #19578_x000D_
_x000D_
Here are the benchmarks where you can see a slight improvement for_x000D_
hundreds of records (the normal case) but if you have a huge number of_x000D_
types you improve a lot the performance_x000D_
_x000D_
```_x000D_
-- Current method benchmark_x000D_
Records count: 207_x000D_
  0.000000   0.010000   0.010000 (  0.002049)_x000D_
  0.000000   0.000000   0.000000 (  0.002214)_x000D_
  0.000000   0.000000   0.000000 (  0.001979)_x000D_
  0.010000   0.000000   0.010000 (  0.002516)_x000D_
  0.000000   0.000000   0.000000 (  0.002142)_x000D_
Records count: 142191_x000D_
  2.050000   0.180000   2.230000 (  2.224884)_x000D_
  2.090000   0.090000   2.180000 (  2.176774)_x000D_
  2.050000   0.080000   2.130000 (  2.124951)_x000D_
  2.140000   0.100000   2.240000 (  2.249662)_x000D_
  2.040000   0.100000   2.140000 (  2.157886)_x000D_
```_x000D_
```_x000D_
-- Suggested method benchmark_x000D_
Records count: 207_x000D_
  0.010000   0.000000   0.010000 (  0.001821)_x000D_
  0.010000   0.000000   0.010000 (  0.001999)_x000D_
  0.000000   0.000000   0.000000 (  0.001983)_x000D_
  0.000000   0.000000   0.000000 (  0.001906)_x000D_
  0.000000   0.000000   0.000000 (  0.001829)_x000D_
Records count: 142191_x000D_
  1.050000   0.000000   1.050000 (  1.056097)_x000D_
  1.040000   0.000000   1.040000 (  1.034397)_x000D_
  1.020000   0.010000   1.030000 (  1.018424)_x000D_
  1.100000   0.000000   1.100000 (  1.103647)_x000D_
  1.030000   0.000000   1.030000 (  1.032034)_x000D_
```_x000D_
_x000D_
I've also checked the object's allocation and they remain practically the same:_x000D_
_x000D_
#### Current method objects allocation_x000D_
_x000D_
```_x000D_
                                                                              sourcefile                                                                                sourceline                             class                             count_x000D_
----------------------------------------------------------------------------------------------------------------------------------------------------------------------  ----------  -----------------------------------------------------------  -----_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          39  String                                                       3270399_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          39  Hash                                                         142191_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          39  Array                                                            1_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/hash_lookup_type_map.rb                                         5  Proc                                                            49_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/hash_lookup_type_map.rb                                         5  RubyVM::Env                                                     49_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          45  Array                                                            3_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          44  Array                                                            3_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          43  Array                                                            3_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          42  Array                                                            3_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          41  Array                                                            3_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          40  Array                                                            3_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    30  Proc                                                            11_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    30  RubyVM::Env                                                     11_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          99  ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Vector        2_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/integer.rb                                                      8  Range                                                            3_x000D_
/ruby/2.2.0/gems/state_machines-0.5.0/lib/state_machines/assertions.rb                                                     15  Array                                                            9_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/value.rb                                                        9  Array                                                           18_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/abstract_adapter.rb                            441  Array                                                            6_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/abstract_adapter.rb                            441  ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Integer       3_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/abstract_adapter.rb                            441  Hash                                                             6_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/hash_lookup_type_map.rb                                        19  Array                                                           22_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    19  Array                                                           40_x000D_
/ruby/2.2.0/gems/thread_safe-0.3.6/lib/thread_safe/non_concurrent_cache_backend.rb                                         16  String                                                          10_x000D_
/ruby/2.2.0/gems/thread_safe-0.3.6/lib/thread_safe/non_concurrent_cache_backend.rb                                          8  Hash                                                            20_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                     9  ThreadSafe::Cache                                               20_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    14  Proc                                                            20_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    14  RubyVM::Env                                                     20_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    14  Array                                                           40_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/hash_lookup_type_map.rb                                         5  Array                                                           20_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          98  Array                                                            2_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb         119  Proc                                                           112_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb         119  RubyVM::Env                                                    112_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          90  Array                                                            8_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/value.rb                                                        8  Hash                                                             2_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    60  ActiveRecord::Type::Value                                        1_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/abstract_adapter.rb                            441  ActiveRecord::Type::String                                       3_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql_adapter.rb                          487  ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime      1_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql_adapter.rb                          487  Hash                                                             1_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          74  ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Enum          1_x000D_
```_x000D_
_x000D_
#### Suggested method objects allocation_x000D_
_x000D_
```_x000D_
                                                                              sourcefile                                                                                sourceline                             class                             count_x000D_
----------------------------------------------------------------------------------------------------------------------------------------------------------------------  ----------  -----------------------------------------------------------  -----_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          19  String                                                       3270399_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          19  Hash                                                         142191_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    30  Proc                                                            11_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    30  RubyVM::Env                                                     11_x000D_
/ruby/2.2.0/gems/state_machines-0.5.0/lib/state_machines/assertions.rb                                                     15  Array                                                           10_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/value.rb                                                        9  Array                                                           20_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql_adapter.rb                          487  ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime      1_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql_adapter.rb                          487  Hash                                                             1_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    19  Array                                                           48_x000D_
/ruby/2.2.0/gems/thread_safe-0.3.6/lib/thread_safe/non_concurrent_cache_backend.rb                                         16  String                                                          12_x000D_
/ruby/2.2.0/gems/thread_safe-0.3.6/lib/thread_safe/non_concurrent_cache_backend.rb                                          8  Hash                                                            24_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                     9  ThreadSafe::Cache                                               24_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    14  Proc                                                            24_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    14  RubyVM::Env                                                     24_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/type_map.rb                                                    14  Array                                                           48_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/hash_lookup_type_map.rb                                         5  Array                                                           24_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/hash_lookup_type_map.rb                                        19  Array                                                           30_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/hash_lookup_type_map.rb                                         5  Proc                                                            49_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/hash_lookup_type_map.rb                                         5  RubyVM::Env                                                     49_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          99  ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Vector        2_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/integer.rb                                                      8  Range                                                            5_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/abstract_adapter.rb                            441  Array                                                           10_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/abstract_adapter.rb                            441  ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Integer       5_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/abstract_adapter.rb                            441  Hash                                                             8_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          98  Array                                                            2_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb         119  Proc                                                           122_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb         119  RubyVM::Env                                                    122_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          90  Array                                                            8_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/abstract_adapter.rb                            441  ActiveRecord::Type::String                                       3_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/type/value.rb                                                        8  Hash                                                             1_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          74  ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Enum          1_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb          79  ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array         2_x000D_
/ruby/2.2.0/gems/activerecord-4.2.10/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb         120  Array                                                            4_x000D_
_x000D_
```","C 0000150",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"Suppose we have a `has_many` association with a counter cache._x000D_
In this case, when counter cache is zero, it is often used to avoid certain SQL queries._x000D_
_x000D_
Example:_x000D_
_x000D_
``` ruby_x000D_
Reward.belogns_to :coupon, counter_cache: true_x000D_
coupon = Coupon.create!_x000D_
coupon.rewards_count # => 0 - required_x000D_
_x000D_
coupon.rewards.size # => 0 no query_x000D_
coupon.rewards.to_a # => [] no query_x000D_
```_x000D_
_x000D_
However, this behavior doesn't happen consistently. If we change the method call order the number of SQL queries is different:_x000D_
_x000D_
``` ruby_x000D_
coupon.rewards.to_a # => [] with query_x000D_
coupon.rewards.size # => [] no query_x000D_
```_x000D_
_x000D_
It happens because `#size` makes use of the counter cache and assumes the association is loaded when it is zero. I think that this behavior should be consistent with direct association loading._x000D_
_x000D_
A lot of additional tests were added to ensure no regression occur._x000D_
_x000D_
cc @kamipo ","C 0000151",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0
,"C 0000152",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0
"Every template that specifies a ""virtual path"" loses the template source_x000D_
when the template gets compiled:_x000D_
_x000D_
  https://github.com/rails/rails/blob/eda0f574f129fcd5ad1fc58b55cb6d1db71ea95c/actionview/lib/action_view/template.rb#L275_x000D_
_x000D_
The ""refresh"" method seems to think that the source code for a template_x000D_
can be recovered if there is a virtual path:_x000D_
_x000D_
  https://github.com/rails/rails/blob/eda0f574f129fcd5ad1fc58b55cb6d1db71ea95c/actionview/lib/action_view/template.rb#L171-L188_x000D_
_x000D_
Every call site that allocates a template object *and* provides a_x000D_
""virtual path"" reads the template contents from the filesystem:_x000D_
_x000D_
  https://github.com/rails/rails/blob/eda0f574f129fcd5ad1fc58b55cb6d1db71ea95c/actionview/lib/action_view/template/resolver.rb#L229-L231_x000D_
_x000D_
Templates that are inline or literals don't provide a ""virtual path"":_x000D_
_x000D_
  https://github.com/rails/rails/blob/eda0f574f129fcd5ad1fc58b55cb6d1db71ea95c/actionview/lib/action_view/renderer/template_renderer.rb#L34_x000D_
_x000D_
This commit introduces a `FileTemplate` type that subclasses `Template`._x000D_
The `FileTemplate` keeps a reference to the filename, and reads the_x000D_
source from the filesystem.  This effectively makes the template source_x000D_
immutable._x000D_
_x000D_
Other classes depended on the source to be mutated while being compiled,_x000D_
so this commit also introduces a temporary way to pass the mutated_x000D_
source to the ERB (or whatever) compiler.  See `LegacyTemplate`._x000D_
_x000D_
I think we should consider it an error to provide a virtual path on a_x000D_
non file type template an non-file templates can't recover their source._x000D_
Here is an example:_x000D_
_x000D_
  https://github.com/rails/rails/blob/eda0f574f129fcd5ad1fc58b55cb6d1db71ea95c/actionview/lib/action_view/testing/resolvers.rb#L53_x000D_
_x000D_
This provides a ""virtual path"" so the source code (a string literal) is_x000D_
thrown away after compilation.  Clearly we can't recover that string, so_x000D_
I think this should be an error.","C 0000153",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Change new Rails applications to use the ActiveJob `:test` queue adapter in the test environment. Right now the test adapter is used for test cases that inherit from ActiveJob::TestCase, but other test cases (models, controllers) currently use the default `:async` adapter._x000D_
_x000D_
The current behavior is surprising to me: if a model or controller test generates a job, that job will be performed immediately and concurrently with test execution in a different thread, with no visibility into success, failure, or side-effects generated by the job (i.e. database writes). With this change, if a test case does want enqueued jobs to execute, it can use `perform_enqueued_jobs` to run them on the main test thread in a deterministic manner._x000D_
_x000D_
Using the `:test` adapter in the test environment (in a documented and overridable way) is consistent with other Rails defaults like the ActiveStorage test service and the ActionMailer test delivery method.","C 0000154",1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"I deprecated two unused attr_writers `visitor` and `indexes` at 8056fe0_x000D_
and f4bc364 conservatively, since those are accidentaly exposed in the_x000D_
docs._x000D_
_x000D_
https://api.rubyonrails.org/v5.2/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html_x000D_
https://api.rubyonrails.org/v5.2/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html_x000D_
_x000D_
But I've found that `view_renderer` attr_writer is removed without_x000D_
deprecation at #35093, that is also exposed in the doc._x000D_
_x000D_
https://api.rubyonrails.org/v5.2/classes/ActionView/Base.html_x000D_
_x000D_
I'd like to also remove the deprecated attr_writers since I think that_x000D_
removing `visitor` and `indexes` attr_writers is as safe as removing_x000D_
`view_renderer` attr_writer.","C 0000155",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"#33729 affected the behavior of the has_many through record creation._x000D_
_x000D_
Since #33729, the intermediate reflection of simple has_many through_x000D_
association has `inverse_of` to the association, it causes extra through_x000D_
record creation, the extra through record required valid before the_x000D_
association record is saved._x000D_
_x000D_
https://github.com/rails/rails/blob/23125378673bcc606b274027666a126573e136f8/activerecord/lib/active_record/associations/has_many_through_association.rb#L95-L102_x000D_
_x000D_
I think that #33729 need to more work to care about has_many through_x000D_
association, that PR should be reverted to not break existing apps.","C 0000156",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
,"C 0000157",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
,"C 0000158",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In case you're creating custom callbacks in your ActiveRecord with conditions app will raise if conditions are not met:_x000D_
_x000D_
```_x000D_
NoMethodError: undefined method `empty?' for nil:NilClass_x000D_
from /.../active_support/callbacks.rb:97:in `run_callbacks'_x000D_
```_x000D_
_x000D_
Example:_x000D_
_x000D_
```_x000D_
class User < ApplicationRecord_x000D_
  define_model_callbacks :custom_test_x000D_
  _x000D_
  after_custom_test :custom_callback, if: -> { false }_x000D_
_x000D_
  def custom_test_x000D_
    run_callbacks :custom_test do_x000D_
      puts 'testing'_x000D_
    end_x000D_
  end_x000D_
end_x000D_
_x000D_
User.new.test # => NoMethodError: undefined method `empty?' for nil:NilClass_x000D_
```_x000D_
","C 0000159",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"While reading the documentation for #35073 found a typo. _x000D_
`inherts` -> `inherits`","C 0000160",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Follow up to #35073_x000D_
_x000D_
We need to update using the timestamp from the end of the request, not the start. For example, if a request spends 5+ seconds writing, we still want to wait another 5 seconds for replication lag._x000D_
_x000D_
Since we now run the update after we yield, we need to use ensure to make sure we update the timestamp even if there is an exception._x000D_
_x000D_
cc @eileencodes @tenderlove ","C 0000161",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We sometimes display simple examples of additional parameters that can be_x000D_
supplied to table-wise methods like these and I found it particularly difficult_x000D_
to figure out which options `t.foreign_key` accepts without drilling very deep_x000D_
into the specific SchemaStatements docs._x000D_
_x000D_
Since it's relatively common to create foreign keys with custom column names or_x000D_
primary keys, it seems like this should help quite a few people._x000D_
_x000D_
I don't love the new description: _x000D_
> Adds a foreign key from the receiver to the supplied table name._x000D_
_x000D_
But I think it's a bit less ambiguous about what the first parameter is supposed to point to (since the first parameter to `add_foreign_key` is implied as `t` (the receiver) here.","C 0000162",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This PR includes:_x000D_
1. numericalty typo fix._x000D_
2. Renamed variable `microsec` to `microsecond` and `microsec_part` to `microsecond_part`._x000D_
3. changed `nonnegative` to `non-negative`","C 0000163",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0
"Previously if the `url` key in a config hash was nil we'd ignore the_x000D_
configuration as invalid. This can happen when you're relying on a_x000D_
`DATABASE_URL` in the env and that is not set in the environment._x000D_
_x000D_
```_x000D_
production:_x000D_
  <<: *default_x000D_
  url: ENV['DATABASE_URL']_x000D_
```_x000D_
_x000D_
This PR fixes that case by checking if there is a `url` key in the_x000D_
config instead of checking if the `url` is not nil in the config._x000D_
_x000D_
In addition to changing the conditional we then need to build a url hash_x000D_
to merge with the original hash in the `UrlConfig` object._x000D_
_x000D_
Fixes #35091_x000D_
_x000D_
cc/ @gmcgibbon @msdundar this should fix the issue you opened.","C 0000164",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0
"- Remove `fragment_cache_key` helper declaration._x000D_
  It was removed in e70d3df7c9b05c129b0fdcca57f66eca316c5cfc_x000D_
_x000D_
- Remove `by_private_lifo`._x000D_
  It is unused since a7becf147afc85c354e5cfa519911a948d25fc4d_x000D_
","C 0000165",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"_x000D_
_x000D_
### Summary_x000D_
_x000D_
This pull request addresses `test_belongs_to_does_not_use_order_by` failure due to checking order by for metadata query._x000D_
_x000D_
```ruby_x000D_
irb(#<BelongsToAssociationsTest:0x000055a210688d48>):006:0> ActiveRecord::SQLCounter.log_all[1]_x000D_
=> ""SELECT a.attname, format_type(a.atttypid, a.atttypmod),\n       pg_get_expr(d.adbin, d.adrelid), a.attnotnull, a.atttypid, a.atttypmod,\n       c.collname, col_description(a.attrelid, a.attnum) AS comment\n  FROM pg_attribute a\n  LEFT JOIN pg_attrdef d ON a.attrelid = d.adrelid AND a.attnum = d.adnum\n  LEFT JOIN pg_type t ON a.atttypid = t.oid\n  LEFT JOIN pg_collation c ON a.attcollation = c.oid AND a.attcollation <> t.typcollation\n WHERE a.attrelid = '\""companies\""'::regclass\n   AND a.attnum > 0 AND NOT a.attisdropped\n ORDER BY a.attnum\n""_x000D_
```_x000D_
_x000D_
Fixes #35098_x000D_
_x000D_
### Steps to reproduce_x000D_
_x000D_
```ruby_x000D_
$ cd activerecord_x000D_
$ ARCONN=postgresql bin/test ""test/cases/inheritance_test.rb"" ""test/cases/arel/insert_manager_test.rb"" ""test/cases/arel/collectors/substitute_bind_collector_test.rb"" ""test/cases/arel/collectors/composite_test.rb"" ""test/cases/arel/collectors/bind_test.rb"" ""test/cases/arel/collectors/sql_string_test.rb"" ""test/cases/arel/attributes/attribute_test.rb"" ""test/cases/arel/attributes/math_test.rb"" ""test/cases/arel/visitors/dispatch_contamination_test.rb"" ""test/cases/arel/visitors/mysql_test.rb"" ""test/cases/arel/visitors/oracle_test.rb"" ""test/cases/arel/visitors/ibm_db_test.rb"" ""test/cases/arel/visitors/postgres_test.rb"" ""test/cases/arel/visitors/informix_test.rb"" ""test/cases/arel/visitors/oracle12_test.rb"" ""test/cases/arel/visitors/to_sql_test.rb"" ""test/cases/arel/visitors/sqlite_test.rb"" ""test/cases/arel/visitors/mssql_test.rb"" ""test/cases/arel/visitors/depth_first_test.rb"" ""test/cases/arel/visitors/dot_test.rb"" ""test/cases/arel/crud_test.rb"" ""test/cases/arel/table_test.rb"" ""test/cases/arel/delete_manager_test.rb"" ""test/cases/arel/nodes/bin_test.rb"" ""test/cases/arel/nodes/false_test.rb"" ""test/cases/arel/nodes/named_function_test.rb"" ""test/cases/arel/nodes/insert_statement_test.rb"" ""test/cases/arel/nodes/update_statement_test.rb"" ""test/cases/arel/nodes/equality_test.rb"" ""test/cases/arel/nodes/not_test.rb"" ""test/cases/arel/nodes/grouping_test.rb"" ""test/cases/arel/nodes/true_test.rb"" ""test/cases/arel/nodes/select_core_test.rb"" ""test/cases/arel/nodes/descending_test.rb"" ""test/cases/arel/nodes/over_test.rb"" ""test/cases/arel/nodes/unary_operation_test.rb"" ""test/cases/arel/nodes/distinct_test.rb"" ""test/cases/arel/nodes/ascending_test.rb"" ""test/cases/arel/nodes/node_test.rb"" ""test/cases/arel/nodes/as_test.rb"" ""test/cases/arel/nodes/delete_statement_test.rb"" ""test/cases/arel/nodes/binary_test.rb"" ""test/cases/arel/nodes/bind_param_test.rb"" ""test/cases/arel/nodes/extract_test.rb"" ""test/cases/arel/nodes/sum_test.rb"" ""test/cases/arel/nodes/or_test.rb"" ""test/cases/arel/nodes/infix_operation_test.rb"" ""test/cases/arel/nodes/count_test.rb"" ""test/cases/arel/nodes/table_alias_test.rb"" ""test/cases/arel/nodes/window_test.rb"" ""test/cases/arel/nodes/sql_literal_test.rb"" ""test/cases/arel/nodes/case_test.rb"" ""test/cases/arel/nodes/casted_test.rb"" ""test/cases/arel/nodes/and_test.rb"" ""test/cases/arel/nodes/select_statement_test.rb"" ""test/cases/arel/select_manager_test.rb"" ""test/cases/arel/attributes_test.rb"" ""test/cases/arel/nodes_test.rb"" ""test/cases/arel/update_manager_test.rb"" ""test/cases/arel/factory_methods_test.rb"" ""test/cases/column_alias_test.rb"" ""test/cases/tasks/postgresql_rake_test.rb"" ""test/cases/tasks/database_tasks_test.rb"" ""test/cases/tasks/mysql_rake_test.rb"" ""test/cases/tasks/sqlite_rake_test.rb"" ""test/cases/autosave_association_test.rb"" ""test/cases/primary_keys_test.rb"" ""test/cases/defaults_test.rb"" ""test/cases/habtm_destroy_order_test.rb"" ""test/cases/touch_later_test.rb"" ""test/cases/connection_adapters/type_lookup_test.rb"" ""test/cases/connection_adapters/connection_handlers_multi_db_test.rb"" ""test/cases/connection_adapters/merge_and_resolve_default_url_config_test.rb"" ""test/cases/connection_adapters/schema_cache_test.rb"" ""test/cases/connection_adapters/connection_handler_test.rb"" ""test/cases/connection_adapters/mysql_type_lookup_test.rb"" ""test/cases/connection_adapters/connection_specification_test.rb"" ""test/cases/connection_adapters/adapter_leasing_test.rb"" ""test/cases/multiple_db_test.rb"" ""test/cases/relation_test.rb"" ""test/cases/unsafe_raw_sql_test.rb"" ""test/cases/view_test.rb"" ""test/cases/reaper_test.rb"" ""test/cases/explain_subscriber_test.rb"" ""test/cases/multiparameter_attributes_test.rb"" ""test/cases/dup_test.rb"" ""test/cases/reserved_word_test.rb"" ""test/cases/i18n_test.rb"" ""test/cases/comment_test.rb"" ""test/cases/fixtures_test.rb"" ""test/cases/fixture_set/file_test.rb"" ""test/cases/connection_pool_test.rb"" ""test/cases/secure_token_test.rb"" ""test/cases/transactions_test.rb"" ""test/cases/core_test.rb"" ""test/cases/legacy_configurations_test.rb"" ""test/cases/schema_loading_test.rb"" ""test/cases/log_subscriber_test.rb"" ""test/cases/pooled_connections_test.rb"" ""test/cases/validations/association_validation_test.rb"" ""test/cases/validations/uniqueness_validation_test.rb"" ""test/cases/validations/i18n_generate_message_validation_test.rb"" ""test/cases/validations/length_validation_test.rb"" ""test/cases/validations/absence_validation_test.rb"" ""test/cases/validations/presence_validation_test.rb"" ""test/cases/validations/i18n_validation_test.rb"" ""test/cases/nested_attributes_test.rb"" ""test/cases/custom_locking_test.rb"" ""test/cases/numeric_data_test.rb"" ""test/cases/attribute_methods_test.rb"" ""test/cases/forbidden_attributes_protection_test.rb"" ""test/cases/migration_test.rb"" ""test/cases/transaction_isolation_test.rb"" ""test/cases/attribute_decorators_test.rb"" ""test/cases/cache_key_test.rb"" ""test/cases/sanitize_test.rb"" ""test/cases/bind_parameter_test.rb"" ""test/cases/null_relation_test.rb"" ""test/cases/unconnected_test.rb"" ""test/cases/column_definition_test.rb"" ""test/cases/modules_test.rb"" ""test/cases/serialization_test.rb"" ""test/cases/reload_models_test.rb"" ""test/cases/finder_test.rb"" ""test/cases/suppressor_test.rb"" ""test/cases/json_attribute_test.rb"" ""test/cases/explain_test.rb"" ""test/cases/mixin_test.rb"" ""test/cases/boolean_test.rb"" ""test/cases/test_fixtures_test.rb"" ""test/cases/relation/delete_all_test.rb"" ""test/cases/relation/update_all_test.rb"" ""test/cases/relation/where_chain_test.rb"" ""test/cases/relation/where_test.rb"" ""test/cases/relation/predicate_builder_test.rb"" ""test/cases/relation/merging_test.rb"" ""test/cases/relation/record_fetch_warning_test.rb"" ""test/cases/relation/delegation_test.rb"" ""test/cases/relation/mutation_test.rb"" ""test/cases/relation/where_clause_test.rb"" ""test/cases/relation/or_test.rb"" ""test/cases/relation/select_test.rb"" ""test/cases/query_cache_test.rb"" ""test/cases/filter_attributes_test.rb"" ""test/cases/schema_dumper_test.rb"" ""test/cases/dirty_test.rb"" ""test/cases/clone_test.rb"" ""test/cases/scoping/relation_scoping_test.rb"" ""test/cases/scoping/named_scoping_test.rb"" ""test/cases/scoping/default_scoping_test.rb"" ""test/cases/callbacks_test.rb"" ""test/cases/connection_management_test.rb"" ""test/cases/coders/json_test.rb"" ""test/cases/coders/yaml_column_test.rb"" ""test/cases/binary_test.rb"" ""test/cases/transaction_callbacks_test.rb"" ""test/cases/hot_compatibility_test.rb"" ""test/cases/time_precision_test.rb"" ""test/cases/type/integer_test.rb"" ""test/cases/type/unsigned_integer_test.rb"" ""test/cases/type/string_test.rb"" ""test/cases/type/date_time_test.rb"" ""test/cases/type/type_map_test.rb"" ""test/cases/type/time_test.rb"" ""test/cases/type/adapter_specific_registry_test.rb"" ""test/cases/persistence_test.rb"" ""test/cases/yaml_serialization_test.rb"" ""test/cases/date_time_test.rb"" ""test/cases/invalid_connection_test.rb"" ""test/cases/nested_attributes_with_callbacks_test.rb"" ""test/cases/locking_test.rb"" ""test/cases/associations_test.rb"" ""test/cases/counter_cache_test.rb"" ""test/cases/connection_specification/resolver_test.rb"" ""test/cases/readonly_test.rb"" ""test/cases/quoting_test.rb"" ""test/cases/reflection_test.rb"" ""test/cases/migrator_test.rb"" ""test/cases/batches_test.rb"" ""test/cases/serialized_attribute_test.rb"" ""test/cases/timestamp_test.rb"" ""test/cases/instrumentation_test.rb"" ""test/cases/result_test.rb"" ""test/cases/disconnected_test.rb"" ""test/cases/attribute_methods/read_test.rb"" ""test/cases/aggregations_test.rb"" ""test/cases/json_serialization_test.rb"" ""test/cases/statement_invalid_test.rb"" ""test/cases/finder_respond_to_test.rb"" ""test/cases/relations_test.rb"" ""test/cases/errors_test.rb"" ""test/cases/store_test.rb"" ""test/cases/base_test.rb"" ""test/cases/integration_test.rb"" ""test/cases/types_test.rb"" ""test/cases/attributes_test.rb"" ""test/cases/date_test.rb"" ""test/cases/type_test.rb"" ""test/cases/date_time_precision_test.rb"" ""test/cases/adapter_test.rb"" ""test/cases/database_statements_test.rb"" ""test/cases/associations/eager_load_includes_full_sti_class_test.rb"" ""test/cases/associations/eager_singularization_test.rb"" ""test/cases/associations/eager_load_nested_include_test.rb"" ""test/cases/associations/has_many_associations_test.rb"" ""test/cases/associations/extension_test.rb"" ""test/cases/associations/has_one_through_associations_test.rb"" ""test/cases/associations/left_outer_join_association_test.rb"" ""test/cases/associations/join_model_test.rb"" ""test/cases/associations/cascaded_eager_loading_test.rb"" ""test/cases/associations/required_test.rb"" ""test/cases/associations/nested_through_associations_test.rb"" ""test/cases/associations/has_many_through_associations_test.rb"" ""test/cases/associations/has_one_associations_test.rb"" ""test/cases/associations/callbacks_test.rb"" ""test/cases/associations/inverse_associations_test.rb"" ""test/cases/associations/eager_test.rb"" ""test/cases/associations/bidirectional_destroy_dependencies_test.rb"" ""test/cases/associations/belongs_to_associations_test.rb"" ""test/cases/associations/inner_join_association_test.rb"" ""test/cases/associations/has_and_belongs_to_many_associations_test.rb"" ""test/cases/calculations_test.rb"" ""test/cases/invertible_migration_test.rb"" ""test/cases/statement_cache_test.rb"" ""test/cases/ar_schema_test.rb"" ""test/cases/enum_test.rb"" ""test/cases/collection_cache_key_test.rb"" ""test/cases/validations_test.rb"" ""test/cases/migration/references_index_test.rb"" ""test/cases/migration/column_positioning_test.rb"" ""test/cases/migration/rename_table_test.rb"" ""test/cases/migration/foreign_key_test.rb"" ""test/cases/migration/change_schema_test.rb"" ""test/cases/migration/create_join_table_test.rb"" ""test/cases/migration/change_table_test.rb"" ""test/cases/migration/references_foreign_key_test.rb"" ""test/cases/migration/pending_migrations_test.rb"" ""test/cases/migration/column_attributes_test.rb"" ""test/cases/migration/logger_test.rb"" ""test/cases/migration/compatibility_test.rb"" ""test/cases/migration/columns_test.rb"" ""test/cases/migration/index_test.rb"" ""test/cases/migration/command_recorder_test.rb"" ""test/cases/migration/references_statements_test.rb"" ""test/cases/adapters/postgresql/money_test.rb"" ""test/cases/adapters/postgresql/foreign_table_test.rb"" ""test/cases/adapters/postgresql/integer_test.rb"" ""test/cases/adapters/postgresql/infinity_test.rb"" ""test/cases/adapters/postgresql/partitions_test.rb"" ""test/cases/adapters/postgresql/schema_authorization_test.rb"" ""test/cases/adapters/postgresql/type_lookup_test.rb"" ""test/cases/adapters/postgresql/numbers_test.rb"" ""test/cases/adapters/postgresql/schema_test.rb"" ""test/cases/adapters/postgresql/rename_table_test.rb"" ""test/cases/adapters/postgresql/citext_test.rb"" ""test/cases/adapters/postgresql/serial_test.rb"" ""test/cases/adapters/postgresql/datatype_test.rb"" ""test/cases/adapters/postgresql/case_insensitive_test.rb"" ""test/cases/adapters/postgresql/domain_test.rb"" ""test/cases/adapters/postgresql/ltree_test.rb"" ""test/cases/adapters/postgresql/active_schema_test.rb"" ""test/cases/adapters/postgresql/change_schema_test.rb"" ""test/cases/adapters/postgresql/connection_test.rb"" ""test/cases/adapters/postgresql/transaction_test.rb"" ""test/cases/adapters/postgresql/collation_test.rb"" ""test/cases/adapters/postgresql/utils_test.rb"" ""test/cases/adapters/postgresql/uuid_test.rb"" ""test/cases/adapters/postgresql/prepared_statements_disabled_test.rb"" ""test/cases/adapters/postgresql/composite_test.rb"" ""test/cases/adapters/postgresql/explain_test.rb"" ""test/cases/adapters/postgresql/hstore_test.rb"" ""test/cases/adapters/postgresql/geometric_test.rb"" ""test/cases/adapters/postgresql/statement_pool_test.rb"" ""test/cases/adapters/postgresql/create_unlogged_tables_test.rb"" ""test/cases/adapters/postgresql/json_test.rb"" ""test/cases/adapters/postgresql/network_test.rb"" ""test/cases/adapters/postgresql/quoting_test.rb"" ""test/cases/adapters/postgresql/xml_test.rb"" ""test/cases/adapters/postgresql/timestamp_test.rb"" ""test/cases/adapters/postgresql/referential_integrity_test.rb"" ""test/cases/adapters/postgresql/range_test.rb"" ""test/cases/adapters/postgresql/array_test.rb"" ""test/cases/adapters/postgresql/full_text_test.rb"" ""test/cases/adapters/postgresql/bit_string_test.rb"" ""test/cases/adapters/postgresql/date_test.rb"" ""test/cases/adapters/postgresql/cidr_test.rb"" ""test/cases/adapters/postgresql/postgresql_adapter_test.rb"" ""test/cases/adapters/postgresql/bytea_test.rb"" ""test/cases/adapters/postgresql/extension_migration_test.rb"" ""test/cases/adapters/postgresql/enum_test.rb"" --seed 31342 -n ""/^(?:ModulesTest#(?:test_find_account_and_include_company|test_module_table_name_prefix_with_global_prefix)|EagerLoadPolyAssocsTest#(?:test_include_query)|BelongsToAssociationsTest#(?:test_belongs_to_does_not_use_order_by))$/""_x000D_
```_x000D_
_x000D_
### Actual behavior_x000D_
```ruby_x000D_
Using postgresql_x000D_
Run options: --seed 31342 -n ""/^(?:ModulesTest#(?:test_find_account_and_include_company|test_module_table_name_prefix_with_global_prefix)|EagerLoadPolyAssocsTest#(?:test_include_query)|BelongsToAssociationsTest#(?:test_belongs_to_does_not_use_order_by))$/""_x000D_
_x000D_
# Running:_x000D_
_x000D_
...F_x000D_
_x000D_
Failure:_x000D_
BelongsToAssociationsTest#test_belongs_to_does_not_use_order_by [/home/yahonda/git/rails/activerecord/test/cases/associations/belongs_to_associations_test.rb:66]:_x000D_
ORDER BY was used in the query_x000D_
_x000D_
_x000D_
bin/test test/cases/associations/belongs_to_associations_test.rb:62_x000D_
_x000D_
_x000D_
_x000D_
Finished in 1.373576s, 2.9121 runs/s, 151.4296 assertions/s._x000D_
4 runs, 208 assertions, 1 failures, 0 errors, 0 skips_x000D_
$_x000D_
```_x000D_
","C 0000166",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Allows extra client configuration options to be specified for the azure storage service in active support._x000D_
_x000D_
### Other Information_x000D_
_x000D_
When developing with azure, we often want to run a local storage emulator - maybe using microsoft's emulator or even the open source 'azurite'.  However, unlike in the S3 service - there is no way to pass extra options in the storage.yml file._x000D_
_x000D_
This change allows any extra options accepted by the azure-storage gem (such as storage_blob_host and use_path_style_uri which are useful for this setup) to also be accepted by active storage and passed on to the underlying azure-storage client_x000D_
_x000D_
See my blog post for more details http://www.garytaylor.blog/index.php/2019/01/30/rails-active-storage-and-azure-beyond-config/_x000D_
","C 0000167",0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0
"### Summary_x000D_
_x000D_
This PR adds `:action_cable_connection` and `:action_cable_channel` load hooks._x000D_
_x000D_
You can use them to extend `ActionCable::Connection::Base` and `ActionCable::Channel::Base` functionality:_x000D_
_x000D_
```ruby_x000D_
ActiveSupport.on_load(:action_cable_channel) do_x000D_
  # do something in the context of ActionCable::Channel::Base_x000D_
end_x000D_
```","C 0000168",0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"The AV::Base constructor was too complicated, and this commit tightens_x000D_
up the parameters it will take.  At runtime, AV::Base is most commonly_x000D_
constructed here:_x000D_
_x000D_
  https://github.com/rails/rails/blob/94d54fa4ab641a0ddeb173409cb41cc5becc02a9/actionview/lib/action_view/rendering.rb#L72-L74_x000D_
_x000D_
This provides an AV::Renderer instance, a hash of assignments, and a_x000D_
controller instance.  Since this is the common case for construction, we_x000D_
should remove logic from the constructor that handles other cases.  This_x000D_
commit introduces special constructors for those other cases._x000D_
Interestingly, most code paths that construct AV::Base ""strangely"" are_x000D_
tests.","C 0000169",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Sneakers 2.11.0 has a more recent Bunny dependency which squashes some_x000D_
Ruby 2.6 warnings tickled by ActiveJob tests.","C 0000170",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0
"This change ensures that all query caches are cleared across connection_x000D_
handlers and pools so that if you write on one connection the read_x000D_
connection will have the update that occurred._x000D_
_x000D_
cc/ @kamipo as followup to your concerns in #35073_x000D_
cc/ @tenderlove ","C 0000171",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"During the development of #33145, I have named a few concepts in the_x000D_
code as `whitelisted`. We decided to stay away from the term and I_x000D_
adjusted most of the code afterward, but here are the cases I forgot to_x000D_
change._x000D_
_x000D_
I also found a case in the API guide that we could have cleaned up as_x000D_
well.","C 0000172",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0
"### Summary_x000D_
_x000D_
Attempt to fix an error in production we receive the following error:_x000D_
_x000D_
```_x000D_
Before process_action callback :verify_authenticity_token has not been defined (ArgumentError)_x000D_
```_x000D_
_x000D_
The issue happens when we attempt to skip entirely the CSRF protection:_x000D_
_x000D_
```_x000D_
class ActiveStorage::BaseController < ActionController::Base_x000D_
_x000D_
  config_accessor :allow_forgery_protection_x000D_
  self.allow_forgery_protection = false_x000D_
_x000D_
end_x000D_
```_x000D_
_x000D_
Please let me know if there is a better way to deal with fully remote AJAX calls._x000D_
_x000D_
### Other informations_x000D_
_x000D_
In fact the issue happens also in development if we set `config.eager_load = true` into `development.rb`_x000D_
","C 0000173",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"1. `enqueing` to `enqueuing`_x000D_
1. `_bllock_with` to `_block_with` ","C 0000174",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The transaction used to restore fixtures is an implementation detail_x000D_
that should be abstracted away. Idealy a test should behave the same_x000D_
wether or not transactional fixtures are enabled._x000D_
_x000D_
However since transactions have been made lazy, the fixture_x000D_
transaction started leaking into tests case. e.g. consider the_x000D_
following (oversimplified) test:_x000D_
_x000D_
```ruby_x000D_
class SQLSubscriber_x000D_
  attr_accessor :sql_x000D_
_x000D_
  def initialize_x000D_
    @sql = []_x000D_
  end_x000D_
_x000D_
  def call(*, event)_x000D_
    sql << event[:sql]_x000D_
  end_x000D_
end_x000D_
_x000D_
subscriber = SQLSubscriber.new_x000D_
ActiveSupport::Notifications.subscribe(""sql.active_record"", subscriber)_x000D_
_x000D_
User.connection.execute('SELECT 1', 'Generic name')_x000D_
assert_equal ['SELECT 1'], subscriber.sql_x000D_
```_x000D_
_x000D_
On Rails 6 it starts to break because the `sql` array will be `['BEGIN', 'SELECT 1']`._x000D_
_x000D_
Several things are wrong here:_x000D_
_x000D_
  - That transaction is not generated by the tested code, so it shouldn't be visible._x000D_
  - The transaction is not even closed yet, which again doesn't reflect the reality._x000D_
","C 0000175",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"@Edouard-chin I wanted to get this in for Rails 6 (sorry for the delay before that) but there were some changes I would like to see and you seemed to be less around lately. _x000D_
_x000D_
Hope you don't mind I took your PR and made a couple of changes:_x000D_
_x000D_
1) Rebased_x000D_
2) Changed s/desired_capabilities/capabilities_x000D_
3) Changed s/driver_options/capabilities_x000D_
4) Updated the docs a little_x000D_
_x000D_
Thank you for all your work on this! I super appreciate you taking the time to improve system tests._x000D_
_x000D_
Update of https://github.com/rails/rails/pull/32442","C 0000176",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`HashWithIndifferentAccess` doesn't override `assoc` which currently results in a somehow unexpected behavior:_x000D_
_x000D_
```ruby_x000D_
hash = { foo: 1 }.with_indifferent_access_x000D_
hash.assoc('foo') #=> [""foo"", 1]_x000D_
hash.assoc(:foo)  #=> nil_x000D_
```_x000D_
_x000D_
This commit implements the method, so the above becomes:_x000D_
_x000D_
```ruby_x000D_
hash = { foo: 1 }.with_indifferent_access_x000D_
hash.assoc('foo') #=> [""foo"", 1]_x000D_
hash.assoc(:foo)  #=> [""foo"", 1]_x000D_
```","C 0000177",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`#ago` method isn't good syntax for human readability so takes some time to remember._x000D_
If use `#before`,  it improves readability like,_x000D_
_x000D_
```ruby_x000D_
time.before 1.day_x000D_
```_x000D_
_x000D_
better than_x000D_
_x000D_
```ruby_x000D_
time.ago 1.day_x000D_
```_x000D_
_x000D_
And it's also good to have a correspondence to `#before?` and `#after?`_x000D_
Related to #32185, #32398_x000D_
_x000D_
After merged, it could be used with `#before`, `#before?` and `#after`, `#after?` methods for calculation and comparison. That is good interface for us.","C 0000178",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"### Summary_x000D_
_x000D_
The code snippet within the usage documentation comment used the wrong object namespace for the ActiveStorage::Analyzer::VideoAnalyzer","C 0000179",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0
"This is a follow-up to #35074.  I'm trying to pull more instance variables in to local variables.  I think we can extract common code between PartialRenderer and TemplateRenderer.  I also think we have a CollectionRenderer that should be extracted.","C 0000180",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0
"I am trying to curb mutations so that we can more easily cache and understand relationships between objects in Action View.  This PR eliminates a `view_paths` setter on the lookup context.  I think this is safe to remove because view_paths should be set on the controller, and we still maintain that API.","C 0000181",0,0,0,0,1,0,0,0,0,0,2,0,0,1,0,0,0,0,0
"The following PR adds behavior to Rails to allow an application to_x000D_
automatically switch it's connection from the primary to the replica._x000D_
_x000D_
A request will be sent to the replica if:_x000D_
_x000D_
* The request is a read request (`GET` or `HEAD`)_x000D_
* AND It's been 5 seconds since the last write to the database (because_x000D_
we don't want to send a user to a replica if the write hasn't made it_x000D_
to the replica yet)_x000D_
_x000D_
A request will be sent to the primary if:_x000D_
_x000D_
* It's not a GET/HEAD request (ie is a POST, PATCH, etc)_x000D_
* Has been less than 5 seconds since the last write to the database_x000D_
_x000D_
The implementation that decides when to switch reads (the 5 seconds) is_x000D_
""safe"" to use in production but not recommended without adequate testing_x000D_
with your infrastructure. At GitHub in addition to the 5 seconds since_x000D_
last write we have a curcuit breaker that checks the replication delay_x000D_
and will send the query to a replica before the 5 seconds has passed._x000D_
This is specific to our application and therefore not something Rails_x000D_
should be doing for you. You'll need to test and implement more robust_x000D_
handling of when to switch based on your infrastructure. The auto_x000D_
switcher in Rails is meant to be a basic implementation / API that acts_x000D_
as a guide for how to implement autoswitching._x000D_
_x000D_
The impementation here is meant to be strict enough that you know how to_x000D_
implement your own resolver and operations classes but flexible enough_x000D_
that we're not telling you how to do it._x000D_
_x000D_
The middleware is not included automatically and can be installed in_x000D_
your application with the classes you want to use for the resolver and_x000D_
operations passed in. If you don't pass any classes into the middleware_x000D_
the Rails default Resolver and Session classes will be used._x000D_
_x000D_
The Resolver decides what parameters define when to_x000D_
switch, Operations sets timestamps for the Resolver to read from. For_x000D_
exmaple you may want to use cookies instead of a session so you'd_x000D_
implement a Resolver::Cookies class and pass that into the middleware_x000D_
like so:_x000D_
_x000D_
```_x000D_
config.middleware.use ActiveRecord::Middleware::DatabaseSelector,_x000D_
Resolver, Resolver::Cookies_x000D_
```_x000D_
_x000D_
Your classes can inherit from the existing classes and reimplement the_x000D_
methods (or implement more methods) that you need to do the switching._x000D_
You only need to implement methods that you want to change. For example_x000D_
if you wanted to set the session token for the last read from a replica_x000D_
you would reimplement the `read_from_replica` method in your resolver_x000D_
class and implement a method that updates a new timestamp in your_x000D_
operations class._x000D_
_x000D_
cc/ @tenderlove @rafaelfranca @matthewd @dhh","C 0000182",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"In MySQL, the text column size is 65,535 bytes by default (1 GiB in_x000D_
PostgreSQL). It is sometimes too short when people want to use a text_x000D_
column, so they sometimes change the text size to mediumtext (16 MiB) or_x000D_
longtext (4 GiB) by giving the `limit` option._x000D_
_x000D_
Unlike MySQL, PostgreSQL doesn't allow the `limit` option for a text_x000D_
column (raises ERROR: type modifier is not allowed for type ""text"")._x000D_
So `limit: 4294967295` (longtext) couldn't be used in Action Text._x000D_
_x000D_
I've allowed changing text and blob size without giving the `limit`_x000D_
option, it prevents that migration failure on PostgreSQL.","C 0000183",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The authenticity token gets logged by default, it's stored in the session so there is a chance an attacker could take advantage of this. I think it is safer to exclude it by default.","C 0000184",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Sometimes we make a query expecting a single result, and if for whatever_x000D_
reason it doesn't it's a sign of data inconsistency or code bug._x000D_
_x000D_
Other data access frameworks, like the famous Hibernate (for Java), have_x000D_
a method that raises an error if the query returns more than one record._x000D_
Here's an example:_x000D_
https://docs.jboss.org/hibernate/orm/3.2/api/org/hibernate/Query.html#uniqueResult()_x000D_
_x000D_
_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
_x000D_
Once the idea is approved, I'll add specs and documentation","C 0000185",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
The Action Text installations appends `require(""trix"")` to the application.js file. The problem is that there isn't a line break in the beginning of the installation output, leading to syntax errors, e.g.:_x000D_
_x000D_
```_x000D_
import './application.scss'require(""trix"")_x000D_
```_x000D_
_x000D_
This commit moves the line break from the end to the beginning of the output, fixing it to:_x000D_
_x000D_
```_x000D_
import './application.scss'_x000D_
require(""trix"")_x000D_
```_x000D_
","C 0000186",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
This PR adds a `before_reset` callback in `CurrentAttributes`. The existing `resets` callback runs after `reset` has been called on the instance, which means we can't use it to do work that depends on the instance values, only to reset global independent collaborators like `Time.zone`. _x000D_
_x000D_
----_x000D_
_x000D_
I think this might need something added to the `CHANGELOG`, I'll add it if you think this `before_reset` is useful and can be added to Rails. ","C 0000187",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"### Summary_x000D_
_x000D_
This improves performance of timestamp conversion and avoids additional string allocations. Compatibility to older pg versions is preserved._x000D_
_x000D_
### Other Information_x000D_
_x000D_
It improves query times by more than [50%](https://gist.github.com/larskanis/7755170c6b880e61931a524603b7d336) if many time columns are involved. _x000D_
_x000D_
I didn't find a reliable trigger to change the timezone handling (local vs. utc). Therefore I added a check before each query, which I think is sub-optimal. Maybe someone has a better idea. Nevertheless the speed improvement outperforms this timezone update check by far._x000D_
","C 0000188",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"I am not sure of this PR. Are these cosmetic changes?","C 0000189",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
,"C 0000190",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0
"Failing test before the `ActionText::RichText` change:_x000D_
_x000D_
```_x000D_
Error:_x000D_
ActionText::ModelTest#test_embed_extraction_only_extracts_file_attachments:_x000D_
ArgumentError: Could not find or build blob: expected attachable, got #<ActionText::Attachables::RemoteImage:0x00007fb0259fef70 @url=""http://example.com/cat.jpg"", @content_type=""image"", @width=nil, @height=nil>_x000D_
```","C 0000191",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"It has been moved to the a fork as part of https://github.com/rails/rails/pull/31671 ._x000D_
That was since to that time a required PR was not yet merged._x000D_
Now the queue_classic master branch is compatible to recent pg versions,_x000D_
so that there's no need to keep using a fork._x000D_
","C 0000192",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"and suggest a workaround_x000D_
_x000D_
### Summary_x000D_
_x000D_
Per #35025, rails provides no guarantee that app initializers will run after gem initializers, which is unfortunate as it makes app initialization non-deterministic and brittle. App init code that depends on a given gem being fully initialized and integrated into rails could suddenly break after inclusion of an unrelated gem (and even it's position in the gem file)_x000D_
_x000D_
So this possibility should be documented and a workaround suggested._x000D_
","C 0000193",0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0
"I would like to add those tests to prevent regression.","C 0000194",0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0
"### Summary_x000D_
This patch just fixes a small typo in the Rails Testing Guide.","C 0000195",1,0,0,0,0,0,0,0,0,0,1,0,0,2,3,0,0,0,0
"fixes #33414_x000D_
cc @SzNagyMisu_x000D_
_x000D_
There are two cases where the debug view does not show the error details properly:_x000D_
_x000D_
 * When the cause is mapped to an HTTP status code the last exception is unexpectedly uwrapped_x000D_
 * When the last error is thrown from a view template the debug view is not using the `lib/action_dispatch/middleware/templates/rescues/template_error.html.erb` to generate the view_x000D_
_x000D_
Both the cases could be fixed by not unwrapping the exception. The only case where the exception should be unwrapped is when the last error is an `ActionView::Template::Error` object. In this case the HTTP status code is determined based on the cause._x000D_
_x000D_
There are actually more wrapper exceptions that are intentionally thrown from within Rails. However, there is a consistent pattern of setting the original message and original backtrace to the wrapper exception implemented:_x000D_
_x000D_
 * [`ActionController::BadRequest`](https://github.com/rails/rails/blob/5f7d5995a65d97f2592213889672e9c4799556ec/actionpack/lib/action_controller/metal/exceptions.rb#L9-L10)_x000D_
 * [`ActionDispatch::Session::SessionRestoreError`](https://github.com/rails/rails/blob/5f7d5995a65d97f2592213889672e9c4799556ec/actionpack/lib/action_dispatch/middleware/session/abstract_store.rb#L13-L16)_x000D_
 * [`ActiveJob::DeserializationError`](https://github.com/rails/rails/blob/5f7d5995a65d97f2592213889672e9c4799556ec/activejob/lib/active_job/arguments.rb#L11-L12)_x000D_
 * [`ActiveRecord`](https://github.com/rails/rails/blob/5f7d5995a65d97f2592213889672e9c4799556ec/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L620-L628)_x000D_
_x000D_
So the debug view will not lose the information about what went wrong eariler._x000D_
_x000D_
(I might have missed a few more, please let me know if there's something missing)_x000D_
_x000D_
## Case 1: When the cause is in `rescue_responses`_x000D_
_x000D_
Given that you have the following in your controller:_x000D_
_x000D_
```ruby_x000D_
def create_x000D_
  @book = Book.new(book_params)_x000D_
  ..._x000D_
rescue ActionController::ParameterMissing_x000D_
  method_that_has_typo_x000D_
end_x000D_
```_x000D_
_x000D_
Then this PR fixes the left to look like the right:_x000D_
_x000D_
<img width=""2163"" alt=""fixed-case-1"" src=""https://user-images.githubusercontent.com/386234/51716387-913d8280-200a-11e9-9748-30dc3bd58997.png"">_x000D_
_x000D_
## Case 1: When an error is thrown from a view_x000D_
_x000D_
Given that you have:_x000D_
_x000D_
```erb_x000D_
<%_x000D_
  raise ActiveRecord::RecordNotFound_x000D_
%>_x000D_
```_x000D_
_x000D_
Then this PR fixes the left to look like the right:_x000D_
_x000D_
<img width=""2169"" alt=""fixed-case-2"" src=""https://user-images.githubusercontent.com/386234/51717637-9a7d1e00-200f-11e9-8002-6b76e4a1bcf4.png"">_x000D_
","C 0000196",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"I found that In this case statement: _x000D_
_x000D_
https://github.com/rails/rails/blob/1e25dfde032172bab2b126e60fac0302025defcc/actionpack/test/dispatch/debug_exceptions_test.rb#L42-L64_x000D_
_x000D_
There are two patterns that start with the same line:_x000D_
_x000D_
```ruby_x000D_
when %r{/not_found}_x000D_
  ..._x000D_
when %r{/not_found_original_exception}_x000D_
  ..._x000D_
```_x000D_
_x000D_
When a request is made to the path `/not_found_original_exception` in a test, Ruby will try to match the pattern from top to bottom, and since `%r{/not_found}` appears first and does not have `$` or `\z`, it is always routed to the unexpected route and is never routed to what it is supposed to be routed to, causing [one of the tests for DebugExceptions](https://github.com/rails/rails/blob/1e25dfde032172bab2b126e60fac0302025defcc/actionpack/test/dispatch/debug_exceptions_test.rb#L316-L322) to happen to be passing._x000D_
_x000D_
After changing the regex expressions back to strings, I noticed that the test setup is not complete (the template object needs to be a proper template object). Once I fixed it all the tests started padding._x000D_
_x000D_
I would like this to be fixed so I can add more test coverage to fix https://github.com/rails/rails/issues/33414.","C 0000197",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"Allows aliasing, predications, ordering, and various other functions on `And` and `Case` nodes. This brings them in line with other nodes like `Binary` and `Unary`._x000D_
_x000D_
This is following up on #35006._x000D_
","C 0000198",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Since https://github.com/rails/rails/pull/30647 was merged, partial renderer does not play well with anything that is passed to `locals` which does not respond to `symbolize_keys`._x000D_
_x000D_
Before the PR, the `locals` option value was passed along untouched, or was substituted with an emtpy hash if it wasn't supplied. The PR added an operation to symbolize keys of the passed object which ends up making an assumption that the option value will always be a Hash._x000D_
_x000D_
There are legitimate cases, however, where a Hash-like object could be supplied instead, like an `ActionController::Parameters` instance, which does not respond to `symbolize_keys`._x000D_
_x000D_
This PR reverts the changes made in the previous PR to restore the use of symbols as the only supported method of passing in values._x000D_
_x000D_
An extra test is included that explicitly checks the case where a Hash-like object is supplied as the `locals` option.","C 0000199",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"### Summary_x000D_
_x000D_
Content Type is provided by many callers of `.upload`, but the S3 service was discarding this information. This change makes it included so that it gets set on the S3 object's metadata._x000D_
_x000D_
### Other Information_x000D_
_x000D_
Our company happens to use ActiveStorage with S3 in a slightly non-standard way, which brought this issue to our attention. We use ActiveStorage to manage all of the attach/detach/upload/download and so on, but instead of generating signed private URLS, we serve up public URLs to a CloudFront distribution backed by the same S3 bucket. For our use-case in particular, it would be good to have Content-Type included with the objects in S3 so that caches and browsers behave properly when they access the content.","C 0000200",2,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0
"While working on another feature for multiple databases (auto-switching)_x000D_
I observed that in development the first request won't autoload the_x000D_
application record connection for the primary database and may not yet_x000D_
know about the replica connection._x000D_
_x000D_
In my test application this caused the application to thrown an error if_x000D_
I tried to send the first request to the replica before the replica was_x000D_
connected. This wouldn't be an issue in production because the_x000D_
application is preloaded._x000D_
_x000D_
In order to fix this I decided to leave the original error message and_x000D_
delete the new error message. I updated the original error message to_x000D_
include the `role` to make it a bit clearer that the connection isn't_x000D_
established for that particular role._x000D_
_x000D_
The error now reads:_x000D_
_x000D_
```_x000D_
No connection pool with 'primary' found for the 'reading' role._x000D_
```_x000D_
_x000D_
cc/ @tenderlove @rafaelfranca @matthewd ","C 0000201",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000202",0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Use `+` instead of backquote._x000D_
_x000D_
There are some backquotes in Action Text document._x000D_
This PR replace them to `+` to amend docs._x000D_
","C 0000203",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
"This is part one for https://github.com/rails/rails/issues/35032_x000D_
_x000D_
This PR moves methods generated from ERB to a subclass of `AV::Base`.  I was able to verify that the `AV::Base` subclass is thrown away every time `DetailsKey` gets cleared, so I also removed the finalizer from the Template object as we don't need to remove methods anymore._x000D_
_x000D_
The good news is that the number of available methods seen from an ERB file is now constant:_x000D_
_x000D_
<img width=""398"" alt=""untitled 2019-01-23 16-00-57"" src=""https://user-images.githubusercontent.com/3124/51645226-18fe9080-1f28-11e9-808f-cd00080cac84.png"">_x000D_
_x000D_
The bad news is that we are still leaking memory:_x000D_
_x000D_
<img width=""421"" alt=""untitled 2019-01-23 16-01-41"" src=""https://user-images.githubusercontent.com/3124/51645241-329fd800-1f28-11e9-943f-9905bf3b6405.png"">_x000D_
_x000D_
This patch doesn't fix the unbounded growth of [this cache](https://github.com/rails/rails/blob/52af51c08a48ea7c6e0df09e2470a66a3141087d/actionview/lib/action_view/template/resolver.rb#L73), so it isn't surprising that we still leak.  The good news is that the leak is slower, before this patch we leak about 137 objects per request, after we leak about 111 objects per request._x000D_
_x000D_
I think the next step is to move [this cache](https://github.com/rails/rails/blob/52af51c08a48ea7c6e0df09e2470a66a3141087d/actionview/lib/action_view/template/resolver.rb#L73) on to the `DetailsKey` cache, so they both get cleared at the same time._x000D_
_x000D_
After that, we need to give `DetailsKey` a better name.","C 0000204",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"Unfortunately, the current state of docs about Worker Pool size is confusing. This configuration option is essential for any production usage, it's slightly covered in the Action Cable Overview but it's impossible to understand its importance and real usage without digging into the code. _x000D_
_x000D_
The proposed changes are trying to eliminate the confusion.","C 0000205",3,1,0,0,0,0,0,1,0,0,0,0,0,0,2,1,2,0,0
"### Summary_x000D_
_x000D_
Deeply nested commands currently don't get printed properly. See https://github.com/rails/rails/pull/34832#issuecomment-456070659. This should fix that by allowing `Rails::Command::Base#command_root_namespace` to include nested namespace segments, and not just the first one._x000D_
_x000D_
I tried making it so `command_root_namespace` excluded the `command_name` as well, but that didn't play nicely with method-based command definition (eg. `SecretsCommand`). The regex I use in `namespaced_commands` is probably not the best approach, any feedback here would be appreciated.","C 0000206",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"If we pass the view instance around it's easier to understand the flow_x000D_
control._x000D_
","C 0000207",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
,"C 0000208",1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,1,0,0,0
"### Problem_x000D_
_x000D_
When building the statement for the statement cache (e.g. for `find` or `find_by`) Active Record is passing `ActiveRecord::StatementCache::Substitute` objects into the attribute type's `cast` method.  The return value for these cast calls isn't very important, but it is relying on it not raising an exception when this happens.  For instance, ActiveModel::Type::Float#cast_value will raise an exception when it tries to call `to_f` on this `ActiveRecord::StatementCache::Substitute` object.  This can also be a problem for custom attribute types._x000D_
_x000D_
The included regression test shows the problem without the corresponding fix in this PR, because `NumericData.find_by(temperature: 1.5)` causes the following exception to be raised_x000D_
_x000D_
```_x000D_
ActiveRecord::StatementCacheTest#test_statement_cache_with_strictly_cast_attribute:_x000D_
NoMethodError: undefined method `to_f' for #<ActiveRecord::StatementCache::Substitute:0x00007fcc8a2bc948>_x000D_
Did you mean?  to_s_x000D_
    /Users/dylansmith/src/rails/activemodel/lib/active_model/type/float.rb:31:in `cast_value'_x000D_
    /Users/dylansmith/src/rails/activemodel/lib/active_model/type/value.rb:38:in `cast'_x000D_
    /Users/dylansmith/src/rails/activemodel/lib/active_model/type/helpers/numeric.rb:15:in `cast'_x000D_
    /Users/dylansmith/src/rails/activemodel/lib/active_model/attribute.rb:55:in `value_for_database'_x000D_
    /Users/dylansmith/src/rails/activerecord/lib/active_record/relation/query_attribute.rb:13:in `value_for_database'_x000D_
    /Users/dylansmith/src/rails/activerecord/lib/active_record/relation/query_attribute.rb:35:in `unboundable?'_x000D_
    /Users/dylansmith/src/rails/activerecord/lib/arel/nodes/bind_param.rb:32:in `unboundable?'_x000D_
    /Users/dylansmith/src/rails/activerecord/lib/arel/visitors/to_sql.rb:820:in `unboundable?'_x000D_
    /Users/dylansmith/src/rails/activerecord/lib/arel/visitors/to_sql.rb:632:in `visit_Arel_Nodes_Equality'_x000D_
```_x000D_
..._x000D_
_x000D_
### Solution_x000D_
_x000D_
The Active Model attribute type shouldn't have to deal with these `ActiveRecord::StatementCache::Substitute` objects, so I changed ActiveRecord::Relation::QueryAttribute#value_for_database to not call `super` if it gets one of these objects.  This class was already special casing these objects, since it already had a type check for them in its `nil?` method.","C 0000209",0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"It causes a buzzy warning during ActionCable test running","C 0000210",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"ActionCable was spelled AcionCable in the link to TestCase towards the bottom of the doc.  Pretty straightforward.","C 0000211",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
,"C 0000212",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"### Summary_x000D_
_x000D_
That main purpose of this PR is to make the following example _testable_:_x000D_
_x000D_
```ruby_x000D_
class ChatRelayJob < ApplicationJob_x000D_
  def perform_later(room, msg)_x000D_
    ChatChannel.broadcast_to room, message: msg_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
To test this functionality we need to know the underlying stream name_x000D_
(to use `assert_broadcasts`), which relies on `channel_name`._x000D_
_x000D_
We had to use the following code:_x000D_
_x000D_
```ruby_x000D_
assert_broadcasts(ChatChannel.broadcasting_for([ChatChannel.channel_name, room]), 1) do_x000D_
  ChatRelayJob.perform_now_x000D_
end_x000D_
```_x000D_
_x000D_
The problem with this approach is that we use _internal_ API: we shouldn't care about `channel_name` prefix in our code (and how should developers know that it's even used?)._x000D_
_x000D_
With this commit we could re-write the test as following:_x000D_
_x000D_
```ruby_x000D_
 assert_broadcasts(ChatChannel.broadcasting_for(room), 1) do_x000D_
   ChatRelayJob.perform_now_x000D_
 end_x000D_
```_x000D_
_x000D_
IMO, this refactoring also makes the `broadcasting_for` method much easier to use _internally_, since we should't think about adding a `channel_name` every time we use it (like we did in `channel/streams`)._x000D_
_x000D_
This PR also adds `Channel#broadcast_to` (we had `#steam_for` but hadn't a shorter syntax for broadcasting for some reason)._x000D_
_x000D_
**NOTE:** in [`action-cable-testing`](https://github.com/palkan/action-cable-testing) we handled this differently: by adding `channel: ...` option to assertions; but that was a temporary hack since we couldn't change the Rails API._x000D_
","C 0000213",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"1. Replaced unused variables by `_`._x000D_
2. Typo fixes._x000D_
","C 0000214",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Reverts https://github.com/rails/rails/pull/34412_x000D_
_x000D_
Related to https://github.com/rails/rails/issues/35019","C 0000215",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
This pull request addresses this failure with MySQL 8.0.14._x000D_
_x000D_
```ruby_x000D_
$ ARCONN=mysql2 bundle exec ruby -w -Itest test/cases/adapters/mysql2/mysql2_adapter_test.rb -n test_errors_for_bigint_fks_on_integer_pk_table_x000D_
Using mysql2_x000D_
Run options: -n test_errors_for_bigint_fks_on_integer_pk_table --seed 54672_x000D_
_x000D_
# Running:_x000D_
_x000D_
F_x000D_
_x000D_
Failure:_x000D_
Mysql2AdapterTest#test_errors_for_bigint_fks_on_integer_pk_table [test/cases/adapters/mysql2/mysql2_adapter_test.rb:62]:_x000D_
[ActiveRecord::MismatchedForeignKey] exception expected, not_x000D_
Class: <ActiveRecord::StatementInvalid>_x000D_
Message: <""Mysql2::Error: Referencing column 'old_car_id' and referenced column 'id' in foreign key constraint 'fk_rails_9f49f34f36' are incompatible."">_x000D_
---Backtrace---_x000D_
/home/yahonda/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/mysql2-0.5.2/lib/mysql2/client.rb:131:in `_query'_x000D_
/home/yahonda/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/mysql2-0.5.2/lib/mysql2/client.rb:131:in `block in query'_x000D_
/home/yahonda/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/mysql2-0.5.2/lib/mysql2/client.rb:130:in `handle_interrupt'_x000D_
/home/yahonda/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/mysql2-0.5.2/lib/mysql2/client.rb:130:in `query'_x000D_
/home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:181:in `block (2 levels) in execute'_x000D_
/home/yahonda/git/rails/activesupport/lib/active_support/dependencies/interlock.rb:48:in `block in permit_concurrent_loads'_x000D_
/home/yahonda/git/rails/activesupport/lib/active_support/concurrency/share_lock.rb:187:in `yield_shares'_x000D_
/home/yahonda/git/rails/activesupport/lib/active_support/dependencies/interlock.rb:47:in `permit_concurrent_loads'_x000D_
/home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:180:in `block in execute'_x000D_
/home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:641:in `block (2 levels) in log'_x000D_
/home/yahonda/.rbenv/versions/2.6.0/lib/ruby/2.6.0/monitor.rb:230:in `mon_synchronize'_x000D_
/home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:640:in `block in log'_x000D_
/home/yahonda/git/rails/activesupport/lib/active_support/notifications/instrumenter.rb:23:in `instrument'_x000D_
/home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:631:in `log'_x000D_
/home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:179:in `execute'_x000D_
/home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/mysql/database_statements.rb:39:in `execute'_x000D_
/home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb:977:in `add_foreign_key'_x000D_
test/cases/adapters/mysql2/mysql2_adapter_test.rb:64:in `block in test_errors_for_bigint_fks_on_integer_pk_table'_x000D_
---------------_x000D_
_x000D_
_x000D_
rails test test/cases/adapters/mysql2/mysql2_adapter_test.rb:59_x000D_
_x000D_
_x000D_
_x000D_
Finished in 0.028579s, 34.9906 runs/s, 34.9906 assertions/s._x000D_
1 runs, 1 assertions, 1 failures, 0 errors, 0 skips_x000D_
$_x000D_
```_x000D_
_x000D_
### Other Information_x000D_
_x000D_
https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-14.html_x000D_
> Error messages relating to creating and dropping foreign keys_x000D_
> were improved to be more specific and informative. (Bug #28526309, Bug #92087)_x000D_
_x000D_
https://dev.mysql.com/doc/refman/8.0/en/server-error-reference.html_x000D_
_x000D_
> Error number: 3780; Symbol: ER_FK_INCOMPATIBLE_COLUMNS; SQLSTATE: HY000_x000D_
> Message: Referencing column '%s' and referenced column '%s' in foreign key constraint '%s' are incompatible._x000D_
> ER_FK_INCOMPATIBLE_COLUMNS was added in 8.0.14._x000D_
","C 0000216",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I've been working recently on some projects where the release cycles are based on [Feature flags](https://en.wikipedia.org/wiki/Feature_toggle) and I was looking for a way to skip some migrations on certain environments but from what I see there is nothing in the documentation (I didn't find how to do it 😅 )._x000D_
_x000D_
The idea is to allow the users to skip migrations for specific environments or conditions (like feature flags)_x000D_
_x000D_
```ruby_x000D_
class AddRolesToUsers < ActiveRecord::Migration[6.0]_x000D_
  skip! if Rails.env.production? || Rails.env.integration?_x000D_
_x000D_
  def change_x000D_
    ..._x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
```ruby_x000D_
class AddRolesToUsers < ActiveRecord::Migration[6.0]_x000D_
  skip! unless $feature_enabled?(:role_system)_x000D_
_x000D_
  def change_x000D_
    ..._x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
","C 0000217",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Fix NumericalityValidator on object responding to `to_f`:_x000D_
_x000D_
- If you had a PORO that acted like a Numeric, the validator would_x000D_
  work correctly because it was previously using `Kernel.Float`_x000D_
  which is implicitely calling `to_f` on the passed argument._x000D_
_x000D_
  Since d126c0d , we are now using `BigDecimal` which does_x000D_
  not implicitely call `to_f` on the argument, making the validator_x000D_
  fail with an underlying `TypeError` exception._x000D_
_x000D_
  This patch replate the `is_decimal?` check with `Kernel.Float`._x000D_
  Using `Kernel.Float` as argument for the BigDecimal call has two_x000D_
  advantages:_x000D_
_x000D_
  1. It calls `to_f` implicetely for us._x000D_
  2. It's also smart enough to detect that `Kernel.Float(""a"")` isn't a_x000D_
     Numeric and will raise an error._x000D_
     We don't need the `is_decimal?` check thanks to that._x000D_
_x000D_
_x000D_
Passing `Float::DIG` as second argument to `BigDecimal` is mandatory_x000D_
  because the precision can't be omitted when passing a Float._x000D_
  `Float::DIG` is what is used internally by ruby when calling_x000D_
  `123.to_d`_x000D_
_x000D_
  https://github.com/ruby/ruby/blob/trunk/ext/bigdecimal/lib/bigdecimal/util.rb#L47_x000D_
_x000D_
- Another small issue introduced in #34693_x000D_
  would now raise a TypeError because `Regexp#===` will just return_x000D_
  false if the passed argument isn't a string or symbol, whereas_x000D_
  `Regexp#match?` will._x000D_
_x000D_
_x000D_
cc @paracycle","C 0000218",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"When `Arel` was merged into `ActiveRecord` we lost the ability to alias case nodes. This adds it back.","C 0000219",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Rails generates `test/channels`(#34933) and_x000D_
even allows `rails test:channels` (#34947)._x000D_
`rails stats` has been providing info about `app/channels`,_x000D_
it makes sense to add `test/channels` as well._x000D_
_x000D_
(I've changed the test to address the failure https://travis-ci.org/rails/rails/jobs/482332741#L4925 since Rails generates `test/channels` with some code)_x000D_
","C 0000220",0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0
"We added ""Action Mailbox Basics"", ""Action Text Overview"" guides(#34812, #34878)_x000D_
I think it makes to mention about it in the changelog file. (Similar to 7200ec92f8)_x000D_
Note that entries retain original author since_x000D_
I just moved content from readme files to the guides._x000D_
","C 0000221",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Improved behavior of DateTime.change function._x000D_
_x000D_
Before this patch:_x000D_
```_x000D_
date = DateTime.new(2018, 12, 11, 10, 9, 8)_x000D_
# => Tue, 11 Dec 2018 10:09:08 +0000_x000D_
date.change(year: 2018)_x000D_
# => Tue, 11 Dec 2018 10:09:08 +0000_x000D_
date.change(year: 2018, month: 10)_x000D_
# => Thu, 11 Oct 2018 10:09:08 +0000_x000D_
date.change(year: 2018, month: 10, hour: 5)_x000D_
# => Thu, 11 Oct 2018 05:00:00 +0000_x000D_
date.change(year: 2018, month: 10, hour: 5, minute: 4)_x000D_
# => Thu, 11 Oct 2018 05:00:00 +0000_x000D_
date.change(year: 2018, month: 10, hour: 5, minute: 4, second: 2)_x000D_
# => Thu, 11 Oct 2018 05:00:00 +0000_x000D_
```_x000D_
_x000D_
Have you noticed an unexpected behavior in this method for 'minute' and 'second'? It does not work, and does not show an error message about invalid parameters. _x000D_
_x000D_
The only way to use this method is to write  'min' instead of 'minute' and 'sec' instead of 'second':_x000D_
```_x000D_
date.change(year: 2018, month: 10, hour: 5, min: 4, sec: 2)_x000D_
# => Thu, 11 Oct 2018 05:04:02 +0000_x000D_
```_x000D_
_x000D_
I think this behavior should be changed to one of following:_x000D_
1. Allow to pass both variants (min or minute)_x000D_
2. Raise an error if user tries to use 'minute' or 'second' as arguments._x000D_
_x000D_
I have included #1 variant in this pull request. So, it will be possible to use date.change like you expect it to. Without breaking any backward compatibility._x000D_
_x000D_
```_x000D_
date = DateTime.new(2018, 12, 11, 10, 9, 8)_x000D_
date.change(minute: 2, second: 3)_x000D_
# => Tue, 11 Dec 2018 10:02:03 +0000_x000D_
date.change(min: 2, sec: 3)_x000D_
# => Tue, 11 Dec 2018 10:02:03 +0000_x000D_
```_x000D_
_x000D_
### Other Information_x000D_
_x000D_
Tests added too.","C 0000222",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Mistake in getting started page - `params` itself is the Parameters object - to inspect it, you must not index into it_x000D_
","C 0000223",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
,"C 0000224",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Avoid duplicated ruby version specification by reading it directly from the `.ruby-version` file, already present in the project.","C 0000225",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"…lopment._x000D_
_x000D_
The message currently suggests to do this unconditionally, which would lead to suprises once the app is deployed in production, because the host whitelist wouldn't be empty anymore and thus be active.","C 0000226",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"We should whitelist subdomains of `localhost` by default, because these are safe against DNS rebinding as well. This allows developers to use domains like `api.localhost` or `project1.localhost` without modifying the Rails configuration.","C 0000227",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
,"C 0000228",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"When assigning a hash to a time attribute that's missing a year component (e.g. a `time_select` with `:ignore_date` set to `true`) then the year defaults to 1970 instead of the expected 2000. This results in the attribute changing as a result of the save._x000D_
_x000D_
Before:_x000D_
_x000D_
``` ruby_x000D_
event = Event.new(start_time: { 4 => 20, 5 => 30 })_x000D_
event.start_time # => 1970-01-01 20:00:00 UTC_x000D_
event.save_x000D_
event.reload_x000D_
event.start_time # => 2000-01-01 20:00:00 UTC_x000D_
```_x000D_
_x000D_
After:_x000D_
``` ruby_x000D_
event = Event.new(start_time: { 4 => 20, 5 => 30 })_x000D_
event.start_time # => 2000-01-01 20:00:00 UTC_x000D_
event.save_x000D_
event.reload_x000D_
event.start_time # => 2000-01-01 20:00:00 UTC_x000D_
```","C 0000229",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Since we use [workspaces](https://yarnpkg.com/lang/en/docs/workspaces/) `yarn install` from the root should install all the javascript dependencies._x000D_
","C 0000230",0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0
,"C 0000231",0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Fixed the following._x000D_
_x000D_
1. Visit `/rails/conductor/action_mailbox/inbound_emails/new`_x000D_
2. Fill `Body` and `Attachments`_x000D_
3. New incoming email does not contain `Body`_x000D_
","C 0000232",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"### Summary_x000D_
_x000D_
Fixed errors after #34412._x000D_
","C 0000233",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"### Summary_x000D_
_x000D_
RuboCop 0.63.0 has been released._x000D_
https://github.com/rubocop-hq/rubocop/releases/tag/v0.63.0_x000D_
_x000D_
And rubocop-0-63 channel is available in Code Climate._x000D_
https://github.com/codeclimate/codeclimate/releases/tag/v0.83.0_x000D_
_x000D_
Currently, RuboCop version specified for Gemfile.lock (0.61) and Code Climate (0.60) are different._x000D_
_x000D_
- https://github.com/rails/rails/blob/v6.0.0.beta1/Gemfile.lock#L407_x000D_
- https://github.com/rails/rails/blob/v6.0.0.beta1/.codeclimate.yml#L26_x000D_
_x000D_
This PR matches these versions to 0.63._x000D_
_x000D_
","C 0000234",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"In the case of generator, `RAILS_ENV` is interpreted as an argument as it　is. Avoid this because it will result unintended by the user._x000D_
_x000D_
Fixes #34979._x000D_
_x000D_
---_x000D_
_x000D_
By the way, I think that this is a problem that does not occur if env is specified before the command. _x000D_
I did not understand why env was last specified(it seems that was due to the first commit d57b19380eaad8bda63743107f085e72935343b9), so this time I leave it as it is._x000D_
","C 0000235",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"### Summary_x000D_
Updates the DOM ID sanitizer for form input values so as to not cause potential duplicate values when using float values on a collection._x000D_
_x000D_
For example:_x000D_
```ruby_x000D_
collection_check_boxes :user, :name, [1.0, 10], :to_s, :to_s_x000D_
```_x000D_
_x000D_
Returns:_x000D_
```html_x000D_
<input type=""hidden"" name=""user[name][]"" value="""" />_x000D_
<input type=""checkbox"" value=""1.0"" name=""user[name][]"" id=""user_name_10"" />_x000D_
<label for=""user_name_10"">1.0</label>_x000D_
<input type=""checkbox"" value=""10"" name=""user[name][]"" id=""user_name_10"" />_x000D_
<label for=""user_name_10"">10</label>_x000D_
```_x000D_
_x000D_
With this change:_x000D_
```html_x000D_
<input type=""hidden"" name=""user[name][]"" value="""" />_x000D_
<input type=""checkbox"" value=""1.0"" name=""user[name][]"" id=""user_name_1_0"" />_x000D_
<label for=""user_name_1_0"">1.0</label>_x000D_
<input type=""checkbox"" value=""10"" name=""user[name][]"" id=""user_name_10"" />_x000D_
<label for=""user_name_10"">10</label>_x000D_
```_x000D_
_x000D_
Fixes #34974_x000D_
_x000D_
","C 0000236",1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0
"### Problem_x000D_
_x000D_
Using a where condition on a composed_of attribute with a `nil` value doesn't work as expected._x000D_
_x000D_
If the composed_of attribute has a single mapping, then a condition like `where(gps_location: nil)` will end up with `WHERE 1=0` in the SQL query, so it never matches any row.  This is because the value gets turned into an array using `Array.wrap(value)` where `Array.wrap(nil)` returns `[]`, making the example query effectively `where(gps_location: [])`._x000D_
_x000D_
If the composed_of attribute has multiple mappings, then it results in a `Arel::Visitors::UnsupportedVisitError: Unsupported argument type: NilClass. Construct an Arel node instead.` being raised because of the same mis-use of `Array.wrap`.  It builds separate conditions for an empty array of values , then tries to `OR` an empty array of them (`[].reduce(&:or)`), which results in `nil`, which isn't a valid Arel node._x000D_
_x000D_
### Solution_x000D_
_x000D_
Replace `Array.wrap(value)` with `value.nil? ? [nil] : Array.wrap(value)` and use `try!` to avoid calling the aggregate attribute method on `nil`._x000D_
_x000D_
This issue also shows that empty values were being handled in the multiple mappings path, so I re-used the single values path to handle that by changing the condition to `if mapping.length == 1 || values.empty?`.  If that is too implicit, I could add a separate `if values.empty?` branch that just does `build(table.arel_attribute(column_name), values)`, which would have the same effect.","C 0000237",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Currently `advance` duplicates `options` and deletes values from `options`._x000D_
This patch removes duplicating of `options` and stops removing values from `options`._x000D_
_x000D_
The patch uses less memory and has better performance._x000D_
_x000D_
```_x000D_
Memory comparison:_x000D_
_x000D_
Options: {:years=>1, :months=>1, :weeks=>1, :days=>1}_x000D_
Calculating -------------------------------------_x000D_
              master   576.000  memsize (     0.000  retained)_x000D_
                         5.000  objects (     0.000  retained)_x000D_
                         0.000  strings (     0.000  retained)_x000D_
      advance_no_dup   288.000  memsize (     0.000  retained)_x000D_
                         4.000  objects (     0.000  retained)_x000D_
                         0.000  strings (     0.000  retained)_x000D_
_x000D_
Comparison:_x000D_
      advance_no_dup:        288 allocated_x000D_
              master:        576 allocated - 2.00x more_x000D_
_x000D_
Options: {:years=>1}_x000D_
Calculating -------------------------------------_x000D_
              master   264.000  memsize (     0.000  retained)_x000D_
                         2.000  objects (     0.000  retained)_x000D_
                         0.000  strings (     0.000  retained)_x000D_
      advance_no_dup    72.000  memsize (     0.000  retained)_x000D_
                         1.000  objects (     0.000  retained)_x000D_
                         0.000  strings (     0.000  retained)_x000D_
_x000D_
Comparison:_x000D_
      advance_no_dup:         72 allocated_x000D_
              master:        264 allocated - 3.67x more_x000D_
_x000D_
Options: {:weeks=>1}_x000D_
Calculating -------------------------------------_x000D_
              master   264.000  memsize (     0.000  retained)_x000D_
                         2.000  objects (     0.000  retained)_x000D_
                         0.000  strings (     0.000  retained)_x000D_
      advance_no_dup    72.000  memsize (     0.000  retained)_x000D_
                         1.000  objects (     0.000  retained)_x000D_
                         0.000  strings (     0.000  retained)_x000D_
_x000D_
Comparison:_x000D_
      advance_no_dup:         72 allocated_x000D_
              master:        264 allocated - 3.67x more_x000D_
_x000D_
Peformance comparison:_x000D_
_x000D_
Options: {:years=>1, :months=>1, :weeks=>1, :days=>1}_x000D_
Warming up --------------------------------------_x000D_
              master    27.740k i/100ms_x000D_
      advance_no_dup    37.705k i/100ms_x000D_
Calculating -------------------------------------_x000D_
              master    338.511k (± 5.9%) i/s -      1.692M in   5.020333s_x000D_
      advance_no_dup    572.980k (± 3.7%) i/s -      2.866M in   5.008680s_x000D_
_x000D_
Comparison:_x000D_
      advance_no_dup:   572979.7 i/s_x000D_
              master:   338510.9 i/s - 1.69x  slower_x000D_
_x000D_
Options: {:years=>1}_x000D_
Warming up --------------------------------------_x000D_
              master    53.313k i/100ms_x000D_
      advance_no_dup   115.016k i/100ms_x000D_
Calculating -------------------------------------_x000D_
              master    639.715k (± 1.7%) i/s -      3.199M in   5.001851s_x000D_
      advance_no_dup      1.579M (± 6.4%) i/s -      7.936M in   5.053876s_x000D_
_x000D_
Comparison:_x000D_
      advance_no_dup:  1579251.7 i/s_x000D_
              master:   639714.8 i/s - 2.47x  slower_x000D_
_x000D_
Options: {:weeks=>1}_x000D_
Warming up --------------------------------------_x000D_
              master    57.353k i/100ms_x000D_
      advance_no_dup   129.141k i/100ms_x000D_
Calculating -------------------------------------_x000D_
              master    674.113k (± 3.4%) i/s -      3.384M in   5.025973s_x000D_
      advance_no_dup      1.911M (± 2.5%) i/s -      9.556M in   5.004496s_x000D_
_x000D_
Comparison:_x000D_
      advance_no_dup:  1910739.3 i/s_x000D_
              master:   674112.6 i/s - 2.83x  slower_x000D_
```","C 0000238",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"This PR includes the following improvement. _x000D_
_x000D_
* Excludes unnecessary install tasks in engine test. Since `action_text:install` contains the execution of yarn, it slows._x000D_
* Added that the preload of the newly added component was insufficient. _x000D_
","C 0000239",0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"I'm not sure it is what we want make it in Rails 6.0._x000D_
But I've just implemented to ease to discuss that on this PR._x000D_
_x000D_
Context: https://github.com/rails/rails/pull/34956#discussion_r248691413","C 0000240",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"When we added support for multiple databases through a 3-tiered config_x000D_
and configuration objects this error message got a bit convoluted._x000D_
_x000D_
Previously if you had an application with a missing configuation and_x000D_
multiple databases the error message would look like this:_x000D_
_x000D_
```_x000D_
'doesnexist' database is not configured. Available: development,_x000D_
development, test, test, production, production_x000D_
(ActiveRecord::AdapterNotSpecified)_x000D_
```_x000D_
_x000D_
That's not very descriptive since it duplicates the environments_x000D_
(because there are multiple databases per environment for this_x000D_
application)._x000D_
_x000D_
To fix this I've constructed a bit more readable error message which now_x000D_
reads like this if you have a multi db app:_x000D_
_x000D_
```_x000D_
The `doesntexist` database is not configured for the `production`_x000D_
environment. (ActiveRecord::AdapterNotSpecified)_x000D_
_x000D_
Available databases configurations are:_x000D_
_x000D_
development: primary, primary_readonly_x000D_
test: primary, primary_readonly_x000D_
production: primary, primary_readonly_x000D_
```_x000D_
_x000D_
And like this if you have a single db app:_x000D_
_x000D_
```_x000D_
The `doesntexist` database is not configured for the `production`_x000D_
environment. (ActiveRecord::AdapterNotSpecified)_x000D_
_x000D_
Available databases configurations are:_x000D_
_x000D_
development_x000D_
test_x000D_
```_x000D_
_x000D_
This makes the error message more readable and presents the user all_x000D_
available options for the database connections._x000D_
_x000D_
cc/ @tenderlove @matthewd @rafaelfranca ","C 0000241",0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Test suite's schema.rb is currently stale. This will fix that._x000D_
_x000D_
Also, updates the conductor inbounds controller to use `create_and_extract_message_id!` for creating an `InboundEmail`. This makes sure the new `InboundEmail` always has `message_id` and `message_checksum` columns set.","C 0000242",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0
"Clarify changelog entry_x000D_
Related to #34891_x000D_
","C 0000243",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"## Problem_x000D_
_x000D_
When using an aggregate with one mapping, e.g._x000D_
_x000D_
```ruby_x000D_
class Customer < ActiveRecord::Base_x000D_
  composed_of :balance, class_name: ""Money"", mapping: %w(balance amount)_x000D_
end_x000D_
```_x000D_
_x000D_
The SQL query from `Customer.where(balance: (1..50).map { |amount| Money.new(amount) })` would be something like_x000D_
_x000D_
```sql_x000D_
SELECT ""customers"".* FROM ""customers"" WHERE (((((((((((((((((((((((((((((((((((((((((((((((((""customers"".""balance"" = 1 OR ""customers"".""balance"" = 2) OR ""customers"".""balance"" = 3) OR ""customers"".""balance"" = 4) OR ""customers"".""balance"" = 5) OR ""customers"".""balance"" = 6) OR ""customers"".""balance"" = 7) OR ""customers"".""balance"" = 8) OR ""customers"".""balance"" = 9) OR ""customers"".""balance"" = 10) OR ""customers"".""balance"" = 11) OR ""customers"".""balance"" = 12) OR ""customers"".""balance"" = 13) OR ""customers"".""balance"" = 14) OR ""customers"".""balance"" = 15) OR ""customers"".""balance"" = 16) OR ""customers"".""balance"" = 17) OR ""customers"".""balance"" = 18) OR ""customers"".""balance"" = 19) OR ""customers"".""balance"" = 20) OR ""customers"".""balance"" = 21) OR ""customers"".""balance"" = 22) OR ""customers"".""balance"" = 23) OR ""customers"".""balance"" = 24) OR ""customers"".""balance"" = 25) OR ""customers"".""balance"" = 26) OR ""customers"".""balance"" = 27) OR ""customers"".""balance"" = 28) OR ""customers"".""balance"" = 29) OR ""customers"".""balance"" = 30) OR ""customers"".""balance"" = 31) OR ""customers"".""balance"" = 32) OR ""customers"".""balance"" = 33) OR ""customers"".""balance"" = 34) OR ""customers"".""balance"" = 35) OR ""customers"".""balance"" = 36) OR ""customers"".""balance"" = 37) OR ""customers"".""balance"" = 38) OR ""customers"".""balance"" = 39) OR ""customers"".""balance"" = 40) OR ""customers"".""balance"" = 41) OR ""customers"".""balance"" = 42) OR ""customers"".""balance"" = 43) OR ""customers"".""balance"" = 44) OR ""customers"".""balance"" = 45) OR ""customers"".""balance"" = 46) OR ""customers"".""balance"" = 47) OR ""customers"".""balance"" = 48) OR ""customers"".""balance"" = 49) OR ""customers"".""balance"" = 50)_x000D_
```_x000D_
_x000D_
instead of the simpler query that we would get from not using `composed_of` (i.e. querying using `Customer.where(balance: (1..50))`)_x000D_
_x000D_
```sql_x000D_
SELECT ""customers"".* FROM ""customers"" WHERE ""customers"".""balance"" IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50)_x000D_
```_x000D_
_x000D_
https://stackoverflow.com/questions/782915/mysql-or-vs-in-performance shows this could have a performance impact, at least in older versions of mysql.  Mostly I just want to avoid a database regression by using `composed_of` to introduce an abstraction._x000D_
_x000D_
## Solution_x000D_
_x000D_
The code already had a special case for a single mapping, so I just separated this code path more to avoid building multiple conditions joined with OR.","C 0000244",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"### Summary_x000D_
_x000D_
This also adds a new column, message_checksum, to the action_mailbox_inbound_emails table_x000D_
for storing SHA1 digest of the email source. Additionally, it makes generating the missing_x000D_
message id deterministic and adds a unique index on message_checksum and message_id to_x000D_
detect duplicate emails.","C 0000245",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"### Summary_x000D_
1. Replaced unused variables with `_`._x000D_
2. Used `%w(..)` instead of `[...]`._x000D_
3. Typo fixes_x000D_
","C 0000246",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0
"1. Change [`trix`](https://www.npmjs.com/package/trix) from a dependency to a [peer dependency](https://nodejs.org/en/blog/npm/peer-dependencies/) since Trix isn't used directly by [`@rails/actiontext`](https://www.npmjs.com/package/@rails/actiontext)_x000D_
1. Tidy up the `action_text:install` task to install both `@rails/actiontext` and `trix` using the versions specified in `package.json`","C 0000247",0,1,0,0,2,0,0,0,0,1,0,1,0,4,3,0,0,0,0
"Active Record still support MySQL 5.5 which doesn't support datetime_x000D_
with precision._x000D_
_x000D_
https://github.com/rails/rails/blob/9e34df00039d63b5672315419e76f06f80ef3dc4/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L99-L101_x000D_
_x000D_
So we should check `supports_datetime_with_precision?` on the_x000D_
connection.","C 0000248",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"@kaspth I need review on the commits with the title ""Remove deprecated `config.secret_token`"" and ""_x000D_
Remove secret_token rack env and cookie upgrade code""","C 0000249",0,0,0,0,0,0,0,0,0,0,2,0,0,2,1,0,0,0,0
"### Summary_x000D_
_x000D_
Closes https://github.com/rails/rails/issues/34939._x000D_
_x000D_
It appears that `ActiveStorage` enqueues `ActiveStorage::AnalyzeJob`s when attaching a file. This prompts `ActiveJob` to enqueue jobs (via the async queue adapter by default in development) and can cause problems for one-off scripts such as database seeding._x000D_
_x000D_
This may also be a symptom of a bigger problem with `ActiveStorage`'s queueing assumptions, or maybe the async job adapter. For now, I think temporarily setting the queue adapter to inline for all seeding in all environments is reasonable._x000D_
","C 0000250",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Someone at work wants to add a new way to do templating, so I've been poking at the way we do template compilation.  I just want to try out some stuff here and see if it passes CI.  Maybe we can merge some of it.","C 0000251",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"As requested by @dhh _x000D_
_x000D_
```diff_x000D_
- import Rails from ""@rails/ujs""_x000D_
- Rails.start()_x000D_
+ require(""@rails/ujs"").start()_x000D_
_x000D_
- import * as ActiveStorage from ""@rails/activestorage""_x000D_
- ActiveStorage.start()_x000D_
+ require(""@rails/activestorage"").start()_x000D_
_x000D_
- import Turbolinks from ""turbolinks""_x000D_
- Turbolinks.start()_x000D_
+ require(""turbolinks"").start()_x000D_
```","C 0000252",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Use `+` instead of backquote._x000D_
_x000D_
There are some backquotes in document._x000D_
This PR replace them to `+` to amend docs._x000D_
","C 0000253",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"- Remove `frozen_string_literal` from Action Cable's template files_x000D_
  Related to 837f602fa1b3281113dac965a8ef96de3cac8b02._x000D_
  Follow up #34933_x000D_
  Fix the testing guide._x000D_
_x000D_
 - Add `rails test:channels`._x000D_
   Add this rake task to test channels only._x000D_
   We've added `rails test:mailboxes` recently in the same way #34828._x000D_
_x000D_
_x000D_
","C 0000254",1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0
"Currently, Engines guide in the [Overriding Models and Controllers section](https://guides.rubyonrails.org/engines.html#overriding-models-and-controllers) references the Decorator pattern, which isn't appropriate to me, since Decorator pattern is not about reopening existing classes, is about adding functionality to existing object instances; something that in Ruby is commonly implemented using Delegators._x000D_
_x000D_
Moreover, the suggested naming convention for overrides, `app/decorators/**/*_decorator*.rb`, conflicts with a naming convention commonly used for View Model / Presentation Model decorators, adopted by popular gems such as `draper`, as well as by custom implementations._x000D_
","C 0000255",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
I had to dig around the code to discover this, since I had a use case for the behavior.","C 0000256",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0
"### Summary_x000D_
`created_at` and `updated_at` columns in Action Mailbox table aren't intended nullable.","C 0000257",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Before this change, it was not possible to use ActionCable in a web worker because it would throw an error when trying to access `window` or `document`, which are not available in the [`WorkerGlobalScope`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope)._x000D_
_x000D_
It may be desirable to offload WebSocket interaction to a worker to free up the main thread for other activity. But even in applications where the main thread can handle WebSocket interaction and other tasks just fine, there's still a benefit to running ActionCable in a worker: If it is common for your users to have multiple tabs of your application open at once, you can take advantage of the [`SharedWorker`](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker) API to reduce load on your servers. With a `SharedWorker`, multiple tabs can share a single WebSocket connection, meaning you can drastically reduce the number of active connections (if users commonly have 2 tabs open, this can cut the number of connections in half - if they have more than 2, it's even more significant)._x000D_
_x000D_
Fortunately, it's not too difficult to address the issues that prevent the current version of ActionCable from running in a worker. To support the worker context in addition to the window context, it's recommended to use [`self`](https://developer.mozilla.org/en-US/docs/Web/API/Window/self) instead of `window` . So that's what the first change in this PR does. To avoid the `document` `ReferenceError`, I've removed the explicit `document` receiver from the `addEventListener` and `removeEventListener` calls. The `visibilitychange` event won't ever get triggered in a worker, so adding the listener is effectively a no-op there. But this listener is not critical for ActionCable to function properly; it's more of a ""nice to have"", so ActionCable is still fully functional even without that event handler getting invoked. With those two changes, ActionCable can run in a worker._x000D_
_x000D_
### Other Information_x000D_
_x000D_
To provide a working example, I've created the [`cable-in-web-worker` branch](https://github.com/rmacklin/anycable_demo/tree/cable-in-web-worker) in my fork of @palkan's anycable_demo repository. In that branch I extracted the ActionCable interaction to a shared worker using the changes from this PR.","C 0000258",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
@palkan pointed out that it'd be helpful to call out the changes to the ActionCable javascript API not only in the ActionCable [changelog](https://github.com/rails/rails/commit/aa1ba9cb244b1e03d36aaa941ae4e91c6713b77e#diff-b8f5c211bba9b53d2faec429bda265e5), but also in the rails guides._x000D_
_x000D_
In this PR I've documented the relevant changes in both the Upgrading Ruby on Rails guide and the _x000D_
6.0 Release Notes.","C 0000259",1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
In #34177 we converted the ActionCable JS package from CoffeeScript to ES2015. The conversion was largely automated by [decaffeinate](https://github.com/decaffeinate/decaffeinate), and then looked over manually to make it more idiomatic. Looking again after some time away, I found a few more non-idiomatic artifacts from the CoffeeScript conversion that could be simplified, and I've addressed them in this PR:_x000D_
_x000D_
- Simplify `ActionCable.createConsumer` by using default argument_x000D_
_x000D_
- Simplify `ActionCable.getConfig`, `Connection#getProtocol`, and `Connection#close` by relying on the implicit `undefined` return value (instead of explicitly `return`ing `undefined`)_x000D_
_x000D_
- Simplify `this.isActive() && this.webSocket` into `this.isActive()` in `Connection#close`. We can do this because `isActive()` can only return `true` if `this.webSocket` is truthy. (We can't have an active connection without having instantiated a WebSocket. This is confirmed in the code: `Connection#isActive` calls `Connection#isState` which calls `Connection#getState`, which checks if `this.webSocket` is truthy and returns `null` otherwise.)","C 0000260",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
This is the last PR in the cable testing series (at least for now 😉):_x000D_
- Added `channel_test` generator_x000D_
- Added `connection_test` to app generator (unless `--skip-action-cable`)_x000D_
- Added ""Action Cable Testing"" guides to ""Testing"" guides_x000D_
- Added ""Action Cable Testing"" as a highlight to 6.0 release notes_x000D_
- (finally) Added changelog entry._x000D_
_x000D_
/cc @kaspth ","C 0000261",0,0,0,0,0,1,0,0,0,0,0,0,0,0,4,0,0,1,0
"Fix path to channel files._x000D_
_x000D_
`rails generate channel Chat` generates `app/javascript/channels/chat_channel.js`._x000D_
See also,_x000D_
railties/lib/rails/generators/rails/app/templates/app/javascript/packs/application.js.tt,_x000D_
actioncable/lib/rails/generators/channel/templates/javascript/index.js.tt_x000D_
by default `application.js` imports ""channels"", where_x000D_
`app/javascript/channels/index.js` loads all the channels within_x000D_
this directory and all subdirectories._x000D_
_x000D_
Follow up #34709_x000D_
Related to #33079_x000D_
","C 0000262",0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0
"Action Mailbox and Action Text belong to rails/rails since #34786 and #34873._x000D_
/cc @georgeclaghorn ","C 0000263",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"In #34709 we updated the guide, but `actioncable/README.md` is still_x000D_
outdated. Instead of fixing content in the file. I suggest_x000D_
not duplicate the info that is already in the guide and instead remove_x000D_
the info from the file and just add a message:_x000D_
""You can read more about Action Cable in the [Action Cable Overview](https://edgeguides.rubyonrails.org/action_cable_overview.html) guide.""_x000D_
_x000D_
The same approach is being used for Action Mailbox and Action Text,_x000D_
see #34812 and #34878._x000D_
","C 0000264",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,"C 0000265",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
Move arrays with quarters months out of `beginning_of_quarter` and `end_of_quarter` methods to constants so no new array will be created.","C 0000266",0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
A bunch of downstream builds are breaking in rails/webpacker because Rails 4.2 unnecessarily restricts the bundler version._x000D_
_x000D_
https://travis-ci.org/rails/webpacker/builds/476824252?utm_source=github_status&utm_medium=notification_x000D_
https://travis-ci.org/rails/webpacker/builds/477670329?utm_source=github_status&utm_medium=notification_x000D_
_x000D_
AFAIC there's no reason Rails 4.2 shouldn't be able to run with Bundler 2.x._x000D_
","C 0000267",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0
"### Summary_x000D_
This patch changes the boolean values used in the specs for strings to help users to understand how options work._x000D_
_x000D_
The `:checked`, `:disabled` and `:readonly` options for `collection_radio_buttons` are meant to list the elements that should be affected by them. However when used with a single boolean value like `disabled: true` it can be understood as if it was meant to disable the whole `collection_radio_buttons` helper as it happened here #34915.","C 0000268",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
In comments in templates for `config/database.yml`, there is a_x000D_
reference to `secrets.yml` which is now deprecated._x000D_
They should be replaced with `credentials.yml` so that everyone_x000D_
using latest Rails can understand better.","C 0000269",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"### Summary_x000D_
This patch simply fixes a little typo in `collection_radio_buttons`'s spec._x000D_
_x000D_
Thanks for your review.","C 0000270",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"`Hash#deep_reverse_merge` combines the logic from `Hash#deep_merge` and `Hash#reverse_merge`. This is useful when configuring libraries that use nested hashes._x000D_
","C 0000271",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Also, add mention to `new_framework_defaults_6_0.rb` that_x000D_
`ActionMailer::Parameterized::DeliveryJob` is default for parameterized mail and will be removed._x000D_
_x000D_
Related to #34692_x000D_
","C 0000272",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"[ci skip]_x000D_
_x000D_
### Summary_x000D_
Some explanation why `I18n.locale = :es` is not a good practice._x000D_
_x000D_
### Other Information_x000D_
_x000D_
If someone set locale based on parametar_x000D_
```_x000D_
if params[:locale].present?_x000D_
  I18n.locale = params[:locale].to_sym_x000D_
end_x000D_
```_x000D_
Than it could be that localization is set only in thread that serve this request, and it is not cleared at the end, so future requests can be in default locale or in newly locale (depending on which thread is serving it) _x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000273",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
,"C 0000274",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"### Summary_x000D_
_x000D_
Given the change to using `bigint` for auto-generated primary keys (as per https://github.com/rails/rails/pull/26266), I propose updating the Active Record Basics guide to explicitly state the type being used so as to avoid confusion (especially as the type can vary depending on the database used)._x000D_
_x000D_
### Other Information_x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000275",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Requiring _just_ the `Aws::SNS::MessageVerifier` does not work as this class references other classes in the AWS SDK._x000D_
_x000D_
eg MessageVerifier uses the AWS `Json` class [here](https://github.com/aws/aws-sdk-ruby/blob/master/gems/aws-sdk-sns/lib/aws-sdk-sns/message_verifier.rb#L61) which is [in the sdk core](https://github.com/aws/aws-sdk-ruby/blob/master/gems/aws-sdk-core/lib/aws-sdk-core/json.rb)_x000D_
_x000D_
I tried to require in _just_ the classes required but gave up at up when I got to 10 requires lines and think the most elegant solution is to bring in the entire SNS SDK in one line.   Since we aren't initializing any code from it except the MessageVerifier I don't think there are any negatives to this approach (happy to be corrected!)_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
_x000D_
","C 0000276",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0
"### Summary_x000D_
_x000D_
This PR adds [Postmark](https://postmarkapp.com/) ingress support to ActionMailbox.","C 0000277",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0
"### Summary_x000D_
_x000D_
This commit adds support for endless ranges, e.g. `(1..)`, that were added in Ruby 2.6. They're functionally equivalent to explicitly specifying `Float::INFINITY` as the end of the range._x000D_
_x000D_
Specifically:_x000D_
_x000D_
```ruby_x000D_
relation.where(column: 1..Float::INFINITY)_x000D_
```_x000D_
_x000D_
is equivalent to_x000D_
_x000D_
```ruby_x000D_
relation.where(column: (1..))_x000D_
```_x000D_
_x000D_
### Other Information_x000D_
_x000D_
Only the end of a range can be omitted. Trying `(..1)` results in a syntax error so there's no need to add support for implicit `-Float::INFINITY`._x000D_
_x000D_
### Alternative Implementation_x000D_
_x000D_
We could modify `other` at the beginning of `between` and replace `nil` with `Float::INFINITY` (or even support `-Float::INFINITY`) so that there'd be no changes to conditions in `if` statements below + we would be able to support `nil..1` (equivalent to `-Float::INFINITY..1`)._x000D_
_x000D_
Please let me know if you find this preferable and I'll update the PR.","C 0000278",0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0
"Fixes #33083_x000D_
_x000D_
```_x000D_
actioncable   → @rails/actioncable_x000D_
actiontext    → @rails/actiontext_x000D_
activestorage → @rails/activestorage_x000D_
rails-ujs     → @rails/ujs_x000D_
```_x000D_
_x000D_
TODO:_x000D_
- [x] Perform the “move” by publishing all packages manually*_x000D_
  - [x] https://www.npmjs.com/package/@rails/actiontext_x000D_
  - [x] https://www.npmjs.com/package/@rails/actioncable_x000D_
  - [x] https://www.npmjs.com/package/@rails/activestorage_x000D_
  - [x] https://www.npmjs.com/package/@rails/ujs_x000D_
- [x] Ensure core team members are owners of new npm packages_x000D_
  - [x] `npm owner ls @rails/actiontext`_x000D_
  - [x] `npm owner ls @rails/actioncable`_x000D_
  - [x] `npm owner ls @rails/activestorage`_x000D_
  - [x] `npm owner ls @rails/ujs`_x000D_
_x000D_
<em>*npm doesn’t have a built-in system for moving or renaming packages</em>_x000D_
","C 0000279",2,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"Since we've addressed the warning ""assigned but unused variable""_x000D_
frequently._x000D_
_x000D_
370537de05092aeea552146b42042833212a1acc_x000D_
3040446cece8e7a6d9e29219e636e13f180a1e03_x000D_
5ed618e192e9788094bd92c51255dda1c4fd0eae_x000D_
76ebafe594fc23abc3764acc7a3758ca473799e5_x000D_
_x000D_
And also, I've found the unused args in c1b14ad which raises no warnings_x000D_
by the cop, it shows the value of the cop.","C 0000280",0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,0,0,0
,"C 0000281",0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"Ref: https://guides.rubyonrails.org/routing.html#adding-member-routes","C 0000282",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Fixes https://github.com/rails/rails/issues/34738._x000D_
_x000D_
### Summary_x000D_
_x000D_
Calls `.reset_column_information` on `::Topic` in ActiveRecord's serialized attribute test so that attribute methods are safely undefined for all topics._x000D_
_x000D_
Seeing how `Topic.reset_column_information` [calls `undefine_attribute_methods`](https://github.com/rails/rails/blob/b03d493cf61f37abe7dc0539aee1985b6a9eea63/activerecord/lib/active_record/model_schema.rb#L451) on itself and all subclasses, I assume this is another hiccup I caused in  https://github.com/rails/rails/pull/34560 by duping `Topic`. ","C 0000283",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"This speeds up Range.new(x, y).step(Duration).each { ... }_x000D_
_x000D_
Fixes #34888_x000D_
_x000D_
A few things about this PR:_x000D_
_x000D_
1. I'm not sure if it's completely the right fix.  It seems like `coerce` should *always* return a scalar object, but I'm not super familiar with this code._x000D_
2. It's still not as fast as Ruby 2.5._x000D_
_x000D_
Here is a benchmark:_x000D_
_x000D_
```ruby_x000D_
require 'active_support/all'_x000D_
require 'benchmark/ips'_x000D_
_x000D_
hr = ActiveSupport::Duration.hours(1)_x000D_
_x000D_
Benchmark.ips do |x|_x000D_
  x.report(""step enum"")    { (1...72000).step(hr).each { |_| } }_x000D_
  x.report(""step no enum"") { (1...72000).step(hr) { |_| } }_x000D_
end_x000D_
```_x000D_
_x000D_
On Ruby 2.5:_x000D_
_x000D_
```_x000D_
$ ruby -v -Iactivesupport/lib test.rb_x000D_
ruby 2.5.3p105 (2018-10-18 revision 65156) [x86_64-darwin18]_x000D_
Warming up --------------------------------------_x000D_
           step enum    45.600k i/100ms_x000D_
        step no enum    71.395k i/100ms_x000D_
Calculating -------------------------------------_x000D_
           step enum    593.116k (±13.8%) i/s -      2.918M in   5.039765s_x000D_
        step no enum    845.040k (± 7.1%) i/s -      4.212M in   5.016175s_x000D_
```_x000D_
_x000D_
On Ruby 2.6 (before this PR):_x000D_
_x000D_
```_x000D_
$ be ruby -Iactivesupport/lib ../test.rb _x000D_
Warming up --------------------------------------_x000D_
           step enum     1.000  i/100ms_x000D_
        step no enum    72.725k i/100ms_x000D_
Calculating -------------------------------------_x000D_
           step enum      0.193  (± 0.0%) i/s -      1.000  in   5.170499s_x000D_
        step no enum    931.121k (±10.0%) i/s -      4.654M in   5.068382s_x000D_
```_x000D_
_x000D_
On Ruby 2.6 (after this PR):_x000D_
_x000D_
```_x000D_
$ be ruby -Iactivesupport/lib ../test.rb _x000D_
Warming up --------------------------------------_x000D_
           step enum     2.609k i/100ms_x000D_
        step no enum    76.393k i/100ms_x000D_
Calculating -------------------------------------_x000D_
           step enum     26.740k (± 7.9%) i/s -    135.668k in   5.113837s_x000D_
        step no enum    934.370k (± 5.2%) i/s -      4.660M in   5.004186s_x000D_
```_x000D_
_x000D_
As can be seen from the benchmarks, this patch makes the benchmark on Ruby 2.6 many times faster.  However, it's still slower than Ruby 2.5.  The new enumerator type returned by `each` in Ruby 2.6 seems to do more work than Ruby 2.5.  I'll investigate, but we may just have to live with this speed regression.","C 0000284",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0
"The Frameworks collection declared in the `release.rb` is missing actiontext and actionmailbox, this means they are skipped when running any tasks that iterated through this collection_x000D_
_x000D_
changes include_x000D_
_x000D_
Breaking up frameworks declaration into multiple lines and put them in order. This should make adding to the list easier and if you need to scan it, they will be in order you would expect_x000D_
_x000D_
Add `package` task to both actiontext and actionmailbox_x000D_
_x000D_
","C 0000285",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
Add `\s*` for regex of type_map mysql enum._x000D_
_x000D_
```_x000D_
-            limit = sql_type[/^enum\((.+)\)/i, 1]_x000D_
+            limit = sql_type[/^enum\s*\((.+)\)/i, 1]_x000D_
```_x000D_
_x000D_
And set keyword._x000D_
reference: https://github.com/rails/rails/pull/34896#issuecomment-452177230_x000D_
_x000D_
```_x000D_
-            limit = sql_type[/^set\((.+)\)/i, 1]_x000D_
+            limit = sql_type[/^set\s*\((.+)\)/i, 1]_x000D_
```_x000D_
_x000D_
### Other Information_x000D_
#### Environment_x000D_
_x000D_
| tools | version |_x000D_
| --- | --- |_x000D_
| rails | 5.2.2 |_x000D_
| ruby | 2.5.0 |_x000D_
| macOS | maxOS Mojave 10.14.1 |_x000D_
| mysql | 5.7.22 |_x000D_
_x000D_
#### Why_x000D_
I made rails project and add new column of enum type._x000D_
But I have this error when `bundle exec rake db:migrate RAILS_ENV=development` ._x000D_
_x000D_
<details><summary> Error </summary> _x000D_
_x000D_
```shell_x000D_
Caused by:_x000D_
NoMethodError: undefined method `split' for nil:NilClass_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:591:in `block in initialize_type_map'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/type/type_map.rb:55:in `perform_fetch'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/type/type_map.rb:21:in `block in fetch'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/concurrent-ruby-1.1.4/lib/concurrent/map.rb:193:in `block in fetch_or_store'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/concurrent-ruby-1.1.4/lib/concurrent/map.rb:172:in `fetch'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/concurrent-ruby-1.1.4/lib/concurrent/map.rb:192:in `fetch_or_store'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/type/type_map.rb:20:in `fetch'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/type/type_map.rb:16:in `lookup'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/quoting.rb:151:in `lookup_cast_type'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/quoting.rb:92:in `quote_default_expression'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/schema_creation.rb:19:in `quote_default_expression'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/schema_creation.rb:106:in `add_column_options!'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/mysql/schema_creation.rb:53:in `add_column_options!'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/schema_creation.rb:36:in `visit_ColumnDefinition'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/schema_creation.rb:16:in `accept'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/schema_creation.rb:47:in `block in visit_TableDefinition'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/schema_creation.rb:47:in `map'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/schema_creation.rb:47:in `visit_TableDefinition'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/schema_creation.rb:16:in `accept'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/schema_statements.rb:311:in `create_table'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:871:in `block in method_missing'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:840:in `block in say_with_time'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:840:in `say_with_time'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:860:in `method_missing'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/db/migrate/20190108014230_create_items.rb:3:in `change'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:814:in `exec_migration'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:798:in `block (2 levels) in migrate'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:797:in `block in migrate'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/connection_adapters/abstract/connection_pool.rb:416:in `with_connection'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:796:in `migrate'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:977:in `migrate'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1292:in `block in execute_migration_in_transaction'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1345:in `ddl_transaction'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1291:in `execute_migration_in_transaction'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1263:in `block in migrate_without_lock'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1262:in `each'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1262:in `migrate_without_lock'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1210:in `block in migrate'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1363:in `with_advisory_lock'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1210:in `migrate'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1036:in `up'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/migration.rb:1011:in `migrate'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/tasks/database_tasks.rb:172:in `migrate'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/activerecord-5.2.2/lib/active_record/railties/databases.rake:60:in `block (2 levels) in <main>'_x000D_
$HOME/develop/library/rails-test-project/rails-test-project/vendor/bundle/ruby/2.5.0/gems/rake-12.3.2/exe/rake:27:in `<top (required)>'_x000D_
$HOME/.rbenv/versions/2.5.0/bin/bundle:23:in `load'_x000D_
$HOME/.rbenv/versions/2.5.0/bin/bundle:23:in `<main>'_x000D_
```_x000D_
</details>_x000D_
_x000D_
I confirm my migrate file. It have a space between `ENUM` and `(...)`._x000D_
_x000D_
<details><summary>migration script file</summary>_x000D_
_x000D_
_x000D_
```ruby_x000D_
class CreateItems < ActiveRecord::Migration[5.2]_x000D_
  def change_x000D_
    create_table :items do |t|_x000D_
      t.column   ""my_type"", ""enum ('hoge', 'fuga')"", null: false, default: 'hoge'_x000D_
      t.timestamps_x000D_
    end_x000D_
  end_x000D_
end_x000D_
```_x000D_
</details>_x000D_
_x000D_
But mysql allow a space between `ENUM` and `(...)`._x000D_
So, I tried raw mysql query for CREATE TABLE. And it is created `my_type` enum column._x000D_
_x000D_
<details><summary> Raw query </summary>_x000D_
_x000D_
```mysql_x000D_
CREATE TABLE `test_enum_table` (_x000D_
  `id` bigint(20) NOT NULL AUTO_INCREMENT,_x000D_
  `my_type` enum ('hoge','fuga') NOT NULL DEFAULT 'hoge',_x000D_
  PRIMARY KEY (`id`)_x000D_
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;_x000D_
```_x000D_
</details>_x000D_
_x000D_
From the above, I decided to make this PR.","C 0000286",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34811._x000D_
_x000D_
Refactored `ActionController::ParamsWrapper#process_actions` to capture parsing errors._x000D_
_x000D_
cc/ @gmcgibbon ","C 0000287",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"### Summary_x000D_
_x000D_
There was an issues when using `safe_constantize` on a string that has the wrong case._x000D_
_x000D_
File `em.rb` defines `EM`._x000D_
`""Em"".safe_constantize` causes a little confusion with the autoloader._x000D_
The autoloader finds file ""em.rb"", expecting it to define `Em`, but `Em` is not defined._x000D_
The autoloader raises a `LoadError`, which is good, but `safe_constantize` is defined to return `nil` when a class is not found._x000D_
_x000D_
### Before_x000D_
_x000D_
```ruby_x000D_
""Em"".safe_constantize_x000D_
LoadError: Unable to autoload constant Em, expected rails/activesupport/test/autoloading_fixtures/em.rb to define it_x000D_
```_x000D_
_x000D_
### After_x000D_
_x000D_
```ruby_x000D_
""Em"".safe_constantize_x000D_
# => nil_x000D_
```_x000D_
","C 0000288",0,0,0,0,1,0,1,0,0,0,0,0,0,0,5,0,0,0,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34752._x000D_
_x000D_
Allows `ActionController::Params` as argument of `ActiveRecord::Base#exists?`. This works already for `#create` and `#where`, so I think this change makes sense._x000D_
","C 0000289",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"### Summary_x000D_
_x000D_
`ActiveJob` exception tests were being run multiple times, one per adapter, but using always the test adapter. This made a bug that happened only for `resque` to go undetected. This PR tackles both issues._x000D_
_x000D_
### More details_x000D_
_x000D_
[`ExceptionsTest` for `ActiveJob` currently extends `ActiveJob::TestCase`](https://github.com/rails/rails/blob/9cfcc067e626f0f1e220cc00a9f96622a936350d/activejob/test/cases/exceptions_test.rb#L7) instead of `ActiveSupport::TestCase` as the other tests. This has the consequence that the test adapter provided for tests was being used always, in all executions where supposedly different adapters were being used. This pull request rewrites the tests so that they can be run without extending `ActiveJob::TestCase`._x000D_
_x000D_
These tests cover the new individual execution counters for exceptions (#34352). We found an issue with these in our app that uses `resque`: the individual counters are stored as `Hash.new(0)`, which after being serialized, stored in Redis, and deserialized, becomes a regular hash without a default value. The tests were passing because they weren't being executed with `resque` at all. This pull request fixes that small bug as well. ","C 0000290",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Adds attachments to the form to create new inbound email to make test incoming emails in development._x000D_
_x000D_
This can be useful if the Mailbox is meant to save the attachments from the incoming emails.","C 0000291",1,3,0,0,1,0,0,1,0,0,0,0,1,1,2,0,0,0,0
"Since #30367, if `no-cache` includes Cache-Control headers, special keys like `public`, `must-revalidate` are ignored._x000D_
But in my understanding, `public` still need in case of want to cache authenticated pages._x000D_
The authenticated pages to be cacheable, but still authenticated for every user, need to specify the `Cache-Control: public, no-cache`._x000D_
_x000D_
For keys other than `public`, I did not know the case where it was necessary to use it in combination with `no-cache`, so I fixed that can be used only for `public`._x000D_
_x000D_
Ref: https://www.mnot.net/cache_docs/#CACHE-CONTROL_x000D_
_x000D_
Fixes #34780.","C 0000292",1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"Closes #34811 _x000D_
### Summary_x000D_
_x000D_
Refactored the `ensure return super` part of ActionController::ParamsWrapper#process_action by using an explicit rescue for parameter parsing errors._x000D_
_x000D_
r? @rafaelfranca @gmcgibbon ","C 0000293",0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0
"This reverts commit 129f8ac6ffcafb2e6e13c9ef13dda4cc47f5af0d._x000D_
_x000D_
See https://github.com/rails/rails/commit/02d2958b6cd84d687d89112eb7e2306a6a89c082#commitcomment-31849196_x000D_
_x000D_
/cc @georgeclaghorn ","C 0000294",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Since PR#34816 was merged in c6ef670aee186a2880b7be59c4c6892b5c983e58,_x000D_
we should add this option for flexibility, and consistency._x000D_
/cc @georgeclaghorn ","C 0000295",0,0,0,0,1,1,0,0,0,0,0,2,0,0,1,0,0,0,0
"- Move some actiontext/README.md content to Action Text Overview guide_x000D_
- I added WIP label to that guide since we definitely want to complement it._x000D_
- Add Action Text to Major Features of Rails 6.0_x000D_
_x000D_
Similar approach was used in #34812_x000D_
/cc @georgeclaghorn ","C 0000296",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"See actiontext/lib/action_text/content.rb:132_x000D_
/cc @georgeclaghorn ","C 0000297",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This comment was autogenerated, see_x000D_
`railties/lib/rails/generators/rails/plugin/templates/%name%.gemspec.tt`_x000D_
Since actiontext is well described in this file, I think we shouldn't_x000D_
keep this comment. Note that this commit is more like cosmetic change,_x000D_
so it is OK if we don't merge this._x000D_
","C 0000298",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"- config.load_defaults 6.0 in the dummy app and_x000D_
  fix the test since by default rails 6.0 configured_x000D_
  does not generate ""utf8"" hidden input, see #32125_x000D_
- Use `ActiveRecord::Migration[6.0]` in the dummy app_x000D_
  since actiontext will be since Rails 6.0_x000D_
- Fix `CreateActiveStorageTables` migration in the dummy app(and for actionmailbox's dummy app)._x000D_
  Add `t.foreign_key :active_storage_blobs, column: :blob_id`_x000D_
  It was added in 2ae3a29508e._x000D_
<strike>- `rails/actiontext$ yarn install`</strike>_x000D_
\cc @georgeclaghorn ","C 0000299",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This text should appear on the page_x000D_
https://api.rubyonrails.org/v6.0/classes/ActionText/RichText.html_x000D_
_x000D_
Related to 86517942e469193e8624d5078d718785552c1270_x000D_
/cc @georgeclaghorn ","C 0000300",0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0
,"C 0000301",0,1,0,0,2,0,0,0,0,0,0,0,0,3,9,1,0,0,0
"Since #34864 removed explicit receiver to clarify the_x000D_
purpose of `delegate_missing_to`, I think it will be_x000D_
better to do the same a few lines above to easier figure_x000D_
out that `delegate_missing_to` defines `method_missing`,_x000D_
`respond_to_missing?` when comparing these examples._x000D_
","C 0000302",0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"`Rails.application.config.active_job.return_false_on_aborted_enqueue`_x000D_
should be commented as well._x000D_
","C 0000303",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Related to https://github.com/rails/rails/commit/0d40c62213cf0be58a470637bd364e92c5666402_x000D_
r? @georgeclaghorn ","C 0000304",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Related to https://github.com/rails/rails/pull/34817#issuecomment-451508668_x000D_
r? @rafaelfranca ","C 0000305",1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"When no environment variables are set the expectation is that we are in development._x000D_
_x000D_
Related to #32699.","C 0000306",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Removing the explicit receiver clarifies the purpose of `delegate_missing_to`.","C 0000307",1,3,0,0,2,0,0,0,0,0,1,0,0,0,3,0,0,0,0
"Match Action Mailbox, which sets a default queue for each of its two jobs.","C 0000308",0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0
"Since #34356 logging `locale` value is more correct_x000D_
","C 0000309",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"### Summary_x000D_
_x000D_
[Ruby on Rails Guides](https://guides.rubyonrails.org/) is not SNS-friendly currently. This PR adds [OG meta tags](http://ogp.me/#metadata) to the guides._x000D_
_x000D_
![image](https://user-images.githubusercontent.com/803398/50677858-74331680-103f-11e9-94a8-4e13052f90a1.png)_x000D_
_x000D_
☝️ Twitter Card Preview is unavailable_x000D_
_x000D_
### Other Information_x000D_
_x000D_
After this PR is merged, the Twitter Card looks like:_x000D_
_x000D_
<img width=""592"" alt=""card_validator___twitter_developers"" src=""https://user-images.githubusercontent.com/803398/50678135-9e390880-1040-11e9-840d-27220ed2525c.png"">_x000D_
_x000D_
#### Related PR_x000D_
_x000D_
- https://github.com/rails/weblog/pull/88_x000D_
- https://github.com/rails/weblog/pull/89","C 0000310",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Since Ruby 2.6.0 `NilClass#to_d` is returning `BigDecimal` 0.0. This breaks `average` compatibility with prior Ruby versions. This patch makes `average` return `nil` in all Ruby versions when there are no rows._x000D_
_x000D_
### Other Information_x000D_
_x000D_
Reverts #34601_x000D_
Fixes #34850_x000D_
_x000D_
r? @rafaelfranca ","C 0000311",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"### Summary_x000D_
I generated a scaffold controller in a plugin:_x000D_
```_x000D_
$ rails plugin new my-plugin --full_x000D_
$ rails generate scaffold_controller blog --model-name=Post_x000D_
```_x000D_
And I got this buggy result:_x000D_
```_x000D_
# app/controllers/blogs_controller.rb_x000D_
27     redirect_to [, @post], notice: 'Post was successfully created.'_x000D_
36     redirect_to [, @post], notice: 'Post was successfully updated.'_x000D_
```_x000D_
```_x000D_
# test/controllers/blogs_controller_test.rb_x000D_
equire 'test_helper'_x000D_
_x000D_
class BlogsControllerTest < ActionDispatch::IntegrationTest_x000D_
  setup do_x000D_
    @post = posts(:one)_x000D_
  end _x000D_
_x000D_
  test ""should get index"" do_x000D_
    get _posts_url_x000D_
    assert_response :success_x000D_
  end _x000D_
_x000D_
  test ""should get new"" do_x000D_
    get new__post_url_x000D_
    assert_response :success_x000D_
  end _x000D_
_x000D_
  test ""should create post"" do_x000D_
    assert_difference('Post.count') do_x000D_
      post _posts_url, params: { post: {  } } _x000D_
    end _x000D_
_x000D_
    assert_redirected_to post_url(Post.last)_x000D_
  end _x000D_
_x000D_
  test ""should show post"" do_x000D_
    get _post_url(@post)_x000D_
    assert_response :success_x000D_
  end _x000D_
_x000D_
  test ""should get edit"" do_x000D_
    get edit__post_url(@post)_x000D_
    assert_response :success_x000D_
  end _x000D_
_x000D_
  test ""should update post"" do_x000D_
    patch _post_url(@post), params: { post: {  } }_x000D_
    assert_redirected_to post_url(@post)_x000D_
  end_x000D_
_x000D_
  test ""should destroy post"" do_x000D_
    assert_difference('Post.count', -1) do_x000D_
      delete _post_url(@post)_x000D_
    end_x000D_
_x000D_
    assert_redirected_to _posts_url_x000D_
  end_x000D_
end_x000D_
```_x000D_
I mean to fix this bug with my changes in this pull request._x000D_
Now I get these results:_x000D_
```_x000D_
# app/controllers/blogs_controller.rb_x000D_
27     redirect_to [@post], notice: 'Post was successfully created.'_x000D_
36     redirect_to [@post], notice: 'Post was successfully updated.'_x000D_
```_x000D_
```_x000D_
# test/controllers/blogs_controller_test.rb_x000D_
equire 'test_helper'_x000D_
_x000D_
class BlogsControllerTest < ActionDispatch::IntegrationTest_x000D_
  setup do_x000D_
    @post = posts(:one)_x000D_
  end _x000D_
_x000D_
  test ""should get index"" do_x000D_
    get posts_url_x000D_
    assert_response :success_x000D_
  end _x000D_
_x000D_
  test ""should get new"" do_x000D_
    get new_post_url_x000D_
    assert_response :success_x000D_
  end _x000D_
_x000D_
  test ""should create post"" do_x000D_
    assert_difference('Post.count') do_x000D_
      post posts_url, params: { post: {  } } _x000D_
    end _x000D_
_x000D_
    assert_redirected_to post_url(Post.last)_x000D_
  end _x000D_
_x000D_
  test ""should show post"" do_x000D_
    get post_url(@post)_x000D_
    assert_response :success_x000D_
  end _x000D_
_x000D_
  test ""should get edit"" do_x000D_
    get edit_post_url(@post)_x000D_
    assert_response :success_x000D_
  end _x000D_
_x000D_
  test ""should update post"" do_x000D_
    patch post_url(@post), params: { post: {  } } _x000D_
    assert_redirected_to post_url(@post)_x000D_
  end_x000D_
_x000D_
  test ""should destroy post"" do_x000D_
       assert_difference('Post.count', -1) do_x000D_
       delete post_url(@post)_x000D_
    end_x000D_
_x000D_
    assert_redirected_to posts_url_x000D_
  end_x000D_
end_x000D_
```","C 0000312",0,1,0,0,0,1,0,1,0,0,0,0,0,0,2,0,0,0,0
"Add section ""Results of `load_defaults`"" to the guide._x000D_
_x000D_
<strike>_x000D_
We should talk about the default values of configurations in_x000D_
the context of a newly generated rails app on the specific version._x000D_
New rails apps are generated with config.load_defaults 6.0 in config/application.rb,_x000D_
so `config.active_job.return_false_on_aborted_enqueue` is set to `true`._x000D_
Related to https://github.com/rails/rails/commit/884310fdd031ed8121944f9ea07c8b7723c4e6b6#r31819118, https://github.com/rails/rails/pull/33172#discussion_r196960655_x000D_
_x000D_
Similar case https://github.com/rails/rails/commit/c8a22bb9eef2654c87a0fdb9139d868caf482ec0_x000D_
_x000D_
Also, I think it isn't a good idea to talk about previous Rails versions_x000D_
in the current guide since we use versions for guides and if users want to_x000D_
know how something works on a previous version of Rails, they should read_x000D_
the guides of the specific version._x000D_
</strike>","C 0000313",0,0,0,0,2,0,0,0,0,0,1,0,0,1,3,0,1,1,0
"Use Bundler 2.0 on localhost as well._x000D_
_x000D_
Related to #34849, https://bundler.io/blog/2019/01/03/announcing-bundler-2.html._x000D_
_x000D_
/cc @y-yagi","C 0000314",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"`bundler` 2.0 only supports Ruby >= 2.3.0. So fall back to the old_x000D_
version when failed to install._x000D_
_x000D_
Ref: https://travis-ci.org/rails/rails/jobs/474466077#L1149-L1151","C 0000315",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Don't need to specify the version because Bundler 2.0 released._x000D_
Ref: https://bundler.io/blog/2019/01/03/announcing-bundler-2.html_x000D_
","C 0000316",0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0
"### Summary_x000D_
_x000D_
Reaper calls `reap` first, and `flush` only after._x000D_
_x000D_
This makes the test depend on the threads switching (which produce random failures, e.g. https://travis-ci.org/rails/rails/jobs/474561814)","C 0000317",0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0
"### Summary_x000D_
_x000D_
Follow-up for https://github.com/rails/rails/pull/33659._x000D_
_x000D_
That's the final part of [`action-cable-testing`](https://github.com/palkan/action-cable-testing) merging._x000D_
_x000D_
Connection tests are written as follows:_x000D_
1. First, one uses the `connect` method to simulate connection establishment (= `connect` callback invocation)._x000D_
2. Then, one asserts whether the current state is as expected. ""State"" here means connection identifiers or whether connection has been authorized  or not._x000D_
_x000D_
For example:_x000D_
_x000D_
```ruby_x000D_
class ApplicationCable::Connection < ActionCable::Connection::Base_x000D_
  identified_by :user_id_x000D_
_x000D_
  def connect_x000D_
    self.user_id = request.params[:user_id] || cookies.signed[:user_id]_x000D_
    reject_unauthorized_connection if user_id.nil?_x000D_
  end_x000D_
_x000D_
  def disconnect_x000D_
    ActionCable.server.broadcast ""users_presence"", { id: user_id, event: ""left"" }_x000D_
  end_x000D_
end_x000D_
_x000D_
class ApplicationCable::ConnectionTest < ActionCable::Connection::TestCase_x000D_
  def test_connects_with_params_x000D_
    # Simulate a connection opening_x000D_
    connect params: { user_id: 42 }_x000D_
_x000D_
    assert_equal connection.user_id, ""42""_x000D_
  end_x000D_
_x000D_
  def test_connects_with_cookies_x000D_
    # the same API as for integrations tests_x000D_
    cookies.signed[:user_id] = 42_x000D_
_x000D_
    # just call connect without any arguments_x000D_
    connect_x000D_
_x000D_
    assert_equal connection.user_id, ""42""_x000D_
  end_x000D_
_x000D_
  def test_reject_connection_x000D_
    assert_reject_connection { connect }_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
You can also specify cookies, headers, Rack–all the options available for integration tests–plus session_x000D_
_x000D_
### Other Information_x000D_
_x000D_
This PR doesn't contain a changelog entry intentionally (as the previous two): I'll add a change log in another PR, in which I'd like to update a testing guide as well._x000D_
","C 0000318",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"We've switched from `Test::Unit::TestCase` to `ActiveSupport::TestCase`_x000D_
since Rails 2.3._x000D_
See https://edgeguides.rubyonrails.org/2_3_release_notes.html#other-railties-changes","C 0000319",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Replace `config.active_storage.queue` with `config.active_storage.queues.analysis` and `config.active_storage.queues.purge`. Prefer `config.active_storage.queue` when it’s set, emitting a deprecation warning._x000D_
_x000D_
Match Action Mailbox, which similarly allows configuring each of its two jobs to use different queues.","C 0000320",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"That ability was introduced at #11898 as `Relation#update` without_x000D_
giving ids, so the ability on the class level is not documented and not_x000D_
tested._x000D_
_x000D_
c83e30d which fixes #33470 has lost two undocumented abilities._x000D_
_x000D_
One has fixed at 5c65688, but I missed the ability on the class level._x000D_
_x000D_
Removing any feature should not be suddenly happened in a stable version_x000D_
even if that is not documented._x000D_
_x000D_
I've restored the ability and added test case to avoid any regression in_x000D_
the future._x000D_
_x000D_
Fixes #34743.","C 0000321",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
In https://github.com/rails/rails/pull/34707, I noticed that the example subscribers in `ActiveSupport::LogSubscriber` don't actually log their output strings. This fixes that._x000D_
","C 0000322",0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0
"### Summary_x000D_
_x000D_
When https://github.com/rails/rails/pull/34824 was merged, we didn't add `image/tiff` to the `config.active_storage.variable_content_types` array mentioned in the guides._x000D_
","C 0000323",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
,"C 0000324",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Part two of https://github.com/rails/rails/issues/34710._x000D_
_x000D_
After studying up commands and generators, I decided to make a command that delegates to a generator (similar to rails new / app generator). This seems to give us the most flexibility with how the command interacts with files, and if the user wants to accept the config overwrites or not. _x000D_
_x000D_
TODO:_x000D_
_x000D_
- [x] Fix three level nested generator lookup_x000D_
- [x] Add tests for generator with file assertions_x000D_
- [x] Add chagelog entry","C 0000325",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"### Summary_x000D_
_x000D_
This PR bump license year to 2019.","C 0000326",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Found a bug in the ActiveStorage documentation, using resize_to_fit: with the default minimagick gem as specified in the doco returns a mogrify error as ImageMagicks resize method has the following syntax _x000D_
image.resize ""100x100"" _x000D_
_x000D_
which uses the ImageMagick syntax for geometric resizing. _x000D_
widthxheight | Maximum values of height and width given, aspect ratio preserved._x000D_
_x000D_
The documentation should contain the following for a successful resize_x000D_
variant(resize: ""100x100"")_x000D_
_x000D_
Mogrify error_x000D_
`mogrify -resize-to-fit [100, 100] /var/folders/mini_magick.png` failed with error: mogrify: unrecognized option `-resize-to-fit' @ error/mogrify.c/MogrifyImageCommand/5932._x000D_
_x000D_
Relevant Guides below_x000D_
https://www.rubydoc.info/github/minimagick/minimagick -> Under the usages section_x000D_
https://www.imagemagick.org/script/command-line-processing.php#geometry_x000D_
","C 0000327",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
,"C 0000328",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000329",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"- Use 6.0 version of `ActiveRecord::Migration` for Action Mailbox_x000D_
  Since Action Mailbox will be introduced in Rails 6.0,_x000D_
  it makes more sense to generate migration of that version._x000D_
  Also, I changed its test dummy app to use default 6.0 configs._x000D_
_x000D_
- Use 6.0 default configs in Active Storage test dummy app_x000D_
_x000D_
/cc @georgeclaghorn ","C 0000330",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"### Summary_x000D_
Allow a new image extension(`tiff`) to call the `variant` method and generate custom images_x000D_
_x000D_
### Other Information_x000D_
Fixes #34698 _x000D_
`TIFF` images are supported by IE and Safari browsers, but not by Chrome or Firefox_x000D_
","C 0000331",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Related to https://github.com/rails/rails/pull/34816#issuecomment-450378366_x000D_
Follow up https://github.com/rails/rails/commit/ddaf06779aa51d5d1ca462c21c53f2ed169a0d2f_x000D_
","C 0000332",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"### Summary_x000D_
Former installation instructions referenced a path that has been archived. This patch adapts installation instructions to make them look like other Rails components.","C 0000333",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
When used with case-insensitive filesystems ActiveStorage blobs might cause non-portable Disk storage directories to be created, and the UNIQUE index that gets configured on the `active_storage_blobs` table is database-dependent in terms of case-sensitivity. If the database index is case-sensitive, but the underlying filesystem is not, blobs might be overwritten and the available key space for uploaded blobs shrinks drastically. This does happen on macOS filesystems already._x000D_
_x000D_
This patch changes the ActiveStorage key generation from mixed-case base-58 to lowercase base-36, and increases the key size from 24 bytes to 28. When using base58 there are `58**24` possible key values, and to have the same or more possible keys with base36 we need to have `36**28`, increasing the storage requirement for the key by 4 bytes. Since the database migrations for the blobs table are not CHAR()-size-restricted (and the fix worked for me both on SQLite and MySQL) I believe this is a reasonable compromise._x000D_
_x000D_
Note that this will not alter the storage keys that have already been generated, their treatment wills tay unchanged. Neither will it correct the storage directory structures that were created using mixed-case keys on macOS since you need to ""rekey"" the stored objects if you want the storage directory to be portable to a case-sensitive filesystem._x000D_
_x000D_
Closes #34804 , addresses the underlying issue in #33864 for freshly-generated uploaded blobs. Unfortunately it cannot be excluded that for some people some blobs already did get overwritten if SQLite was used in combination with a case-insensitive filesystem and the Disk storage service. Neither does this change existing blob keys._x000D_
_x000D_
This change does have an implication that for existing S3 buckets and for other services that potentially use ""naive partitioning"" (first N  bytes of the given object store key) partition usage is going to become less ""fair"". However, AWS recently dropped the recommendation on manual key distribution for the key prefix (https://www.infoq.com/news/2018/10/amazon-s3-performance-increase) as it seems they have adopted hashing for the keys the user provides, so this would not be a problem for buckets that get created._x000D_
_x000D_
The advantages of using a lowercase-only key:_x000D_
_x000D_
* Less potential issues with collation-sensitive database indices_x000D_
* Removes issues with potentially case-insensitive blob stores_x000D_
* Makes it easier to download blobs from a remote store to a case-insensitive filesystem for debugging","C 0000334",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`#added?` without options shouldn't try to match by options_x000D_
_x000D_
See https://github.com/rails/rails/issues/34813#issuecomment-450375840_x000D_
_x000D_
I know that we are working on https://github.com/rails/rails/pull/32313 that should introduce model for an error object(instead of using Hash), but there is two reasons why we should merge this to master: Improved test that describes `added?` method behavior better and also we should backport it to `5-2-stable` since we made regression in 5.2.2 ad739f59aa0fd81850010cedf992b81b24da9ff1._x000D_
_x000D_
Closes #34813_x000D_
","C 0000335",1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Currently, we do not generate Action Mailbox files, but It would be great to have `skip-action-mailbox` option for flexibility, and consistency._x000D_
Related to https://github.com/rails/rails/commit/ddaf06779aa51d5d1ca462c21c53f2ed169a0d2f_x000D_
/cc @georgeclaghorn ","C 0000336",0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
"Since e3f832a7433a291a51c5df397dc3dd654c1858cb `ActionMailer::Base.receive` is deprecated._x000D_
I removed mention about receiving emails from the Action Mailer Basics guide in separate PR https://github.com/rails/rails/pull/34812._x000D_
/cc @georgeclaghorn _x000D_
","C 0000337",0,0,0,1,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"- Move some `actionmailbox/README.md` content to Action Mailbox Basics guide_x000D_
   I added WIP label to that guide since we definitely want to complement it._x000D_
- Fix Action Mailer Basics_x000D_
  Now Action Mailbox is responsible for receiving emails._x000D_
- Add Action Mailbox to Major Features of Rails 6.0_x000D_
_x000D_
Related to https://github.com/rails/rails/pull/34786_x000D_
Closes #34819_x000D_
r? @georgeclaghorn ","C 0000338",0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
If there is not a `csrf-token` meta tag in the document, the blob record XHR includes an `X-CSRF-Token` header set to the string `""undefined""`. Instead, it should not be included in the absence of a meta tag._x000D_
_x000D_
### Other Information_x000D_
_x000D_
This came up in a library using ActiveStorage in a React context: https://github.com/cbothner/react-activestorage-provider/pull/10#issuecomment-432447633. Since it's not possible to remove a header from an XHR (and the only way to change it is by appending) it's not possible for an API only application to provide a CSRF token that was acquired in a different way. If we omit the header when there's no meta tag on the page, users can set the header in a callback to `direct-upload:before-blob-request`._x000D_
_x000D_
r? @georgeclaghorn _x000D_
","C 0000339",0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0
"### Summary_x000D_
_x000D_
This adds `Date.use_beginning_of_week` for setting `Date.beginning_of_week` locally inside the supplied block. `Date.beginning_of_week` is reset back to the original value when complete. This is very much like `Time.use_zone` - it can be used in a controller `around_action` to easily set the beginning of the week for code executing within a controller action. Similar to `Time.use_zone`, this is helpful when rendering a calendar or performing date calculations when the beginning of the week may depend on some user setting or other customization._x000D_
_x000D_
### Other Information_x000D_
_x000D_
I also went ahead and adjusted the tests that were using `with_bw_default` to set and reset `Date.beginning_of_week` to utilize this new method._x000D_
","C 0000340",0,0,0,1,0,0,0,0,0,0,0,1,0,0,3,1,0,0,0
"Use an easier form to calculate the expected size.","C 0000341",0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0
"After the failed attempt to reuse code https://github.com/rails/rails/pull/34538 the regression was added https://github.com/rails/rails/commit/ba4e68f577efc76f351d30a2914e29942b97830e_x000D_
_x000D_
This patch incorporates the regression by extending a more low level methods inside `AssociationScope` which is the only place the `limit(1)` can be shared across all usages._x000D_
_x000D_
cc @eileencodes _x000D_
_x000D_
r? @kamipo _x000D_
_x000D_
","C 0000342",0,0,0,1,0,0,0,0,1,0,1,1,1,1,5,0,1,0,0
"### Summary_x000D_
_x000D_
This pull request upgrades Ubuntu version used at Travis CI from Trusty (14.04) to Xenial (16.04)._x000D_
https://docs.travis-ci.com/user/reference/xenial/_x000D_
_x000D_
Since MySQL 5.7 is available by default_x000D_
https://docs.travis-ci.com/user/reference/xenial/#databases-and-services_x000D_
_x000D_
Added [WIP] label since CI will not run from forked Rails, this pull request commit may fail.","C 0000343",1,0,0,1,0,0,0,0,0,0,5,0,0,2,0,0,0,0,0
"This PR adds a few builds on CI with Ruby `2.6.0` and `head` versions.","C 0000344",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"- Improve actionmailbox's .gitignore and remove redundant files_x000D_
- <strike>Remove comment `# rubocop:disable Layout/TrailingWhitespace`</strike>_x000D_
- Fix Ruby warnings in actionmailbox_x000D_
    ```_x000D_
    rails/actionmailbox$ bundle exec rake tests_x000D_
    (snip)_x000D_
    ..._x000D_
    rails/activerecord/lib/active_record/persistence.rb:48: warning: in `create!':_x000D_
    the last argument was passed as a single Hash_x000D_
    rails/actionmailbox/app/models/action_mailbox/inbound_email/message_id.rb:21:_x000D_
    warning: although a splat keyword arguments here_x000D_
    ..._x000D_
    (snip)_x000D_
    ```_x000D_
_x000D_
 Follow up #34786_x000D_
_x000D_
r? @georgeclaghorn ","C 0000345",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0
"The `#csrf_meta_tags` and `#token_tag` Action View helper methods are_x000D_
expecting the class in which are included to explicitly define the_x000D_
method `#protect_against_forgery?` or else they will fail with_x000D_
`NoMethodError`._x000D_
_x000D_
This is a problem if you want to use Action View outside of Rails_x000D_
applications. For example, in #34788 I used the `#button_to` helper_x000D_
inside of the error pages templates that have a custom_x000D_
`ActionView::Base` subclass, which did not defined_x000D_
`#protect_against_forgery?` and trying to call the button failed._x000D_
_x000D_
I had to dig inside of Action View to find out what was going on. I_x000D_
think we should either set a default method implementation in the_x000D_
helpers or check for the method definition, but don't explicitly require_x000D_
the presence of `#protect_against_forgery?` in every `ActionViews::Base`_x000D_
subclass as the errors are hard to figure out.","C 0000346",1,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,0
,"C 0000347",0,0,0,0,0,1,0,0,0,0,0,0,1,0,2,0,0,0,0
"Because method arguments are different in the methods provided by form helpers and form builders, I think these are necessary to prevent confusion._x000D_
_x000D_
Fixes #34787_x000D_
","C 0000348",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"### Summary_x000D_
_x000D_
While evaluating [multi-environment credentials](https://github.com/rails/rails/pull/33521#issuecomment-449735483), I came across a problem trying to create a new environment for my app._x000D_
_x000D_
Once you have created your first environment (e.g. `development`) you might start adding configuration in initialisers that tries to access encrypted credentials like so:_x000D_
_x000D_
```ruby_x000D_
# config/initializers/sidekiq.rb_x000D_
Sidekiq::Web.set :session_secret, Rails.application.credentials.secret_key_base!_x000D_
```_x000D_
_x000D_
That works fine when running `rails credentials:edit --environment development` _x000D_
_x000D_
If you now decide to create a `staging` environment,  doing `rails credentials:edit --environment staging` will fail with something similar to `...ordered_options.rb:49:in 'method_missing': :secret_key_base is blank (KeyError)`_x000D_
_x000D_
A great many gems that access 3rd party APIs use an initialiser for configuring credentials so the above situation is quite likely to occur._x000D_
_x000D_
I worked around the issue by creating a new empty Rails app, running `rails credentials:edit --environment staging` in it, and copying across the generated credential files. _x000D_
_x000D_
This PR attempts to fix the issue by not loading the application environment for `rails credentials:*` commands._x000D_
_x000D_
I've added a test but I am not sure that it is correct (or sufficient) as I struggled to fully understand the railties test harness. Happy to try another way to test this.","C 0000349",0,1,0,0,0,0,0,0,0,0,0,4,2,0,2,0,1,0,0
,"C 0000350",0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0
"### Summary_x000D_
_x000D_
The existing method `#attribute_changed` now supports to send arrays to `from:` and `to:` optional params._x000D_
It will allow checking if a specific attribute has changed `from` a list of values or `to` a list of values._x000D_
Now, we'll be able to do something like this:_x000D_
_x000D_
    person.name = ""Bob""_x000D_
    person.name_changed?(from: nil, to: [""Bob"", ""Bill""]) # => true_x000D_
    person.name_changed?(from: [""Pete"", ""Bill""], to: ""Bob""]) # => false_x000D_
_x000D_
","C 0000351",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`rubygems-update` only supports Ruby >= 2.3.0. So it cannot install in_x000D_
Ruby 2.2, fall back to the old version failed to install._x000D_
_x000D_
Ref: https://travis-ci.org/rails/rails/jobs/471729316#L749-L754_x000D_
","C 0000352",0,1,2,0,2,0,0,1,0,0,0,1,0,0,3,0,0,0,0
"If [Basecamp is a Facebook-free business](https://m.signalvnoise.com/become-a-facebook-free-business-5bfefc20c09d), then Rails should be Facebook-free framework.","C 0000353",1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Rails 6 requires Ruby 2.5, which introduces `FrozenError` https://docs.ruby-lang.org/en/2.5.0/NEWS.html_x000D_
_x000D_
Related to #31520_x000D_
","C 0000354",1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0
"### Summary_x000D_
_x000D_
Replacing the `#inject` call in `#inject_join` with a `for` loop removes 5 out of 7 stack frames associated with the call to `#visit_Arel_Nodes_And`. This increases the complexity of queries that Arel is able to construct by delaying a `SystemStackError`._x000D_
_x000D_
Before these changes the stack looked like this:_x000D_
_x000D_
1. `Arel::Visitors::ToSql#visit_Arel_Nodes_And`_x000D_
2. `Arel::Visitors::ToSql#inject_join`_x000D_
3. `Arel::Visitors::ToSql#inject`_x000D_
4. `Arel::Visitors::ToSql#each`_x000D_
5. `Arel::Visitors::ToSql#each_with_index`_x000D_
6. `Arel::Visitors::ToSql#each`_x000D_
7. (block in `Arel::Visitors::ToSql#inject_join`)_x000D_
8. (call `#visit` for each child and `#join_str` for all children but the last)_x000D_
_x000D_
After these changes, it looks like this (*EDIT: this was speculative, see comments below*):_x000D_
_x000D_
1. `Arel::Visitors::ToSql#visit_Arel_Nodes_And`_x000D_
2. `Arel::Visitors::ToSql#inject_join`_x000D_
3. (call `#visit` for each child and `#join_str` for all children but the last)_x000D_
_x000D_
All the existing tests pass when I run `rake test:sqlite3`.","C 0000355",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"It should make the test more readable since `flunk` emphasizes better_x000D_
than `yield` that the block shouldn't be called._x000D_
_x000D_
Also, it improves error message:_x000D_
```_x000D_
(snip)_x000D_
should not call this block_x000D_
(snip)_x000D_
```_x000D_
_x000D_
```_x000D_
(snip)_x000D_
[ArgumentError] exception expected, not Class: <LocalJumpError>_x000D_
Message: <""no block given (yield)"">_x000D_
---Backtrace---_x000D_
(snip)_x000D_
```_x000D_
_x000D_
Related to #34753","C 0000356",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0
"I have a test app that was on Ruby 2.4. When I pulled Rails master the_x000D_
app no longer would boot because of this change and I saw the following_x000D_
error:_x000D_
_x000D_
```_x000D_
SyntaxError:_x000D_
/Users/eileencodes/open_source/real_rails/railties/lib/rails/all.rb:18:_x000D_
syntax error, unexpected keyword_rescue, expecting keyword_end_x000D_
rescue LoadError_x000D_
      ^_x000D_
```_x000D_
_x000D_
Ruby 2.4 doesn't support removing redundant begins so the real issue is_x000D_
that this app is on Ruby 2.4 and not on Ruby 2.5. But it's super_x000D_
confusing for a user to understand the reason the app is failing to boot_x000D_
is because we need Ruby 2.5._x000D_
_x000D_
I added this redundant begin back because we need to give a clearer_x000D_
error message._x000D_
_x000D_
Followup to https://github.com/rails/rails/pull/34764, cc/ @kamipo ","C 0000357",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"This PR ""fixes"" the fixtures so that when there are 2 connections (primary & replica) to a database the tests can see data inserted during the test run on the primary connections. We can't actually use replica connections in tests because Rails keeps a transaction open in order to rollback. I've explained in detail below._x000D_
_x000D_
This is kind of hacky but I'm not sure there's a better way to make sure the replica connections can see data inserted on the primary connections._x000D_
_x000D_
cc/ @matthewd @tenderlove @rafaelfranca _x000D_
_x000D_
---_x000D_
_x000D_
In an application that has a primary and replica database the data_x000D_
inserted on the primary connection will not be able to be read by the_x000D_
replica connection._x000D_
_x000D_
In a test like this:_x000D_
_x000D_
```_x000D_
test ""creating a home and then reading it"" do_x000D_
  home = Home.create!(owner: ""eileencodes"")_x000D_
_x000D_
  ActiveRecord::Base.connected_to(role: :default) do_x000D_
    assert_equal 3, Home.count_x000D_
  end_x000D_
_x000D_
  ActiveRecord::Base.connected_to(role: :readonly) do_x000D_
    assert_equal 3, Home.count_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
The home inserted in the beginning of the test can't be read by the_x000D_
replica database because when the test is started a transasction is_x000D_
opened byy `setup_fixtures`. That transaction remains open for the_x000D_
remainder of the test until we are done and run `teardown_fixtures`._x000D_
_x000D_
Because the data isn't actually committed to the database the replica_x000D_
database cannot see the data insertion._x000D_
_x000D_
I considered a couple ways to fix this. I could have written a database_x000D_
cleaner like class that would allow the data to be committed and then_x000D_
clean up that data afterwards. But database cleaners can make the_x000D_
database slow and the point of the fixtures is to be fast._x000D_
_x000D_
In GitHub we solve this by sharing the connection pool for the replicas_x000D_
with the primary (writing) connection. This is a bit hacky but it works._x000D_
Additionally since we define `replica? || preventing_writes?` as the_x000D_
code that blocks writes to the database this will still prevent writing_x000D_
on the replica / readonly connection. So we get all the behavior of_x000D_
multiple connections for the same database without slowing down the_x000D_
database._x000D_
_x000D_
In this PR the code loops through the handlers. If the handler doesn't_x000D_
match the default handler then it retrieves the connection pool from the_x000D_
default / writing handler and assigns the reading handler's connections_x000D_
to that pool._x000D_
_x000D_
Then in enlist_fixture_connections it maps all the connections for the_x000D_
default handler because all the connections are now available on that_x000D_
handler so we don't need to loop through them again._x000D_
_x000D_
The test uses a temporary connection pool so we can test this with_x000D_
sqlite3_mem. This adapter doesn't behave the same as the others and_x000D_
after looking over how the query cache test works I think this is the_x000D_
most correct. The issues comes when calling `connects_to` because that_x000D_
establishes new connections and confuses the sqlite3_mem adapter. I'm_x000D_
not entirely sure why but I wanted to make sure we tested all adapters_x000D_
for this change and I checked that it wasn't the shared connection code_x000D_
that was causing issues - it was the `connects_to` code.","C 0000358",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"See https://travis-ci.org/rails/rails/jobs/470890129#L2361","C 0000359",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Update the rdoc comment for `Module.delegate` to clarify that the `:to` parameter must be the _name_ of the target object, not the object itself.","C 0000360",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"`String#to_d` does not raise an exception if an invalid value is specified._x000D_
So can remove exception handling._x000D_
_x000D_
```_x000D_
$ bundle exec ruby -v -rbigdecimal -rbigdecimal/util -e 'p ""123,003"".to_d'_x000D_
ruby 2.6.0dev (2018-12-21 trunk 66474) [x86_64-linux]_x000D_
0.123e3_x000D_
```","C 0000361",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This is a regression test for #34751.","C 0000362",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"Currently we sometimes find a redundant begin block in code review_x000D_
(e.g. https://github.com/rails/rails/pull/33604#discussion_r209784205)._x000D_
_x000D_
I'd like to enable `Style/RedundantBegin` cop to avoid that, since_x000D_
rescue/else/ensure are allowed inside do/end blocks in Ruby 2.5_x000D_
(https://bugs.ruby-lang.org/issues/12906), so we'd probably meets with_x000D_
that situation than before.","C 0000363",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"When I generate a scaffold controller ( for example with the model name ""post"") I always get the same on the lines 32 and 41:_x000D_
```_x000D_
32 redirect_to [, @post], notice: 'Post was successfully created.'_x000D_
41 redirect_to [, @post], notice: 'Post was successfully updated.'_x000D_
```_x000D_
This correction may solve this mistake or not. Check if I am doing right, please._x000D_
","C 0000364",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"- Fix a few deprecation warnings_x000D_
- Remove testing of `Hash#slice`_x000D_
- Improve test of `Hash#slice!`_x000D_
- Remove mention about `Hash#slice` from the guide_x000D_
","C 0000365",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Since Rails 6 requires Ruby 2.5._x000D_
_x000D_
https://github.com/ruby/ruby/blob/ruby_2_5/NEWS_x000D_
_x000D_
Follow up #34754.","C 0000366",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000367",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"fixes https://github.com/mikel/mail/issues/1304","C 0000368",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"### Summary_x000D_
_x000D_
When generating a new rails application (`rails new`) using a custom template that _x000D_
includes gems from an authenticated source, the user has to provide credentials to _x000D_
`bundler`._x000D_
_x000D_
One way to do this is by [exporting environment variables](https://bundler.io/v1.16/bundle_config.html#CREDENTIALS-FOR-GEM-SOURCES), for example:_x000D_
_x000D_
`export BUNDLE_GITHUB__COM=user:pass`: provides credentials for bundler to fetch_x000D_
gems from `github.com`._x000D_
_x000D_
The problem this PR addresses is that we are currently scrubs all `/BUNDLE_.*/`_x000D_
environment variables by wrapping our system calls in [`Bundler.with_clean_env`](https://github.com/rails/rails/blob/5b5319413a611c949cb796351ff42fa0c0299252/railties/lib/rails/generators/app_base.rb#L381-L388)._x000D_
_x000D_
We do this because we don't want our commands executed against the generated project_x000D_
to use the generator's `bundler` environment (e.g. our gems): the generated project should_x000D_
use it's own configuration._x000D_
_x000D_
The problem with `Bundler.with_clean_env` is that, on top of restoring environment_x000D_
variables to their original state, it also scrubs any `/BUNDLE_.*/` variables, which is harmful for authenticated gem sources._x000D_
_x000D_
This PR replaces `Bundler.with_clean_env` with `Bundler.with_original_env`, which only_x000D_
restores environment variables to their initial state, without additional scrubbing._x000D_
","C 0000369",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Generally followed the pattern for https://github.com/rails/rails/pull/32034_x000D_
_x000D_
* Removes needless CI configs for 2.4_x000D_
* Targets 2.5 in rubocop_x000D_
* Updates existing CHANGELOG entries for fewer merge conflicts_x000D_
* Removes Hash#slice extension as that's inlined on Ruby 2.5._x000D_
* Removes the need for send on define_method in MethodCallAssertions._x000D_
_x000D_
cc @jeremy @matthewd @dhh","C 0000370",0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0
"If you try to call `connected_to` with a role that doesn't have an_x000D_
established connection you used to get an error that said:_x000D_
_x000D_
```_x000D_
>> ActiveRecord::Base.connected_to(role: :i_dont_exist) { Home.first }_x000D_
_x000D_
ActiveRecord::ConnectionNotEstablished Exception: No connection pool_x000D_
with 'primary' found._x000D_
```_x000D_
_x000D_
This is confusing because the connection could be established but we_x000D_
spelled the role wrong._x000D_
_x000D_
I've changed this to raise if the `role` used in `connected_to` doesn't_x000D_
have an associated handler. Users who encounter this should either check_x000D_
that the role is spelled correctly (writin -> writing), establish a_x000D_
connection to that role in the model with connects_to, or use the_x000D_
`database` keyword for the `role`._x000D_
_x000D_
I think this will provide a less confusing error message for those_x000D_
starting out with multiple databases._x000D_
_x000D_
cc/ @tenderlove @matthewd @rafaelfranca ","C 0000371",0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Since production applications typically run with log level info and email adresses should be considered as sensitive data (or personal data under GDPR) we want to prevent them from ending up in the logs. In development mode (with log level debug) they are still logged as part of the Mail::Message object._x000D_
_x000D_
While we could add another config option for this (#19293) I propose we fix the privacy issue by doing the right thing by default, and custom log subscribers could be written to restore the old functionality._x000D_
_x000D_
(As a bonus, the wording in the logs is now consistent with the event name ;))","C 0000372",0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000373",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Since MySQL 5.7.9, the `innodb_default_row_format` option defines the_x000D_
default row format for InnoDB tables. The default setting is `DYNAMIC`._x000D_
_x000D_
The row format is required for indexing on `varchar(255)` with `utf8mb4`_x000D_
columns._x000D_
_x000D_
As long as using MySQL 5.6, CI won't be passed even if MySQL server_x000D_
setting is properly configured the same as MySQL 5.7_x000D_
(`innodb_file_per_table = 1`, `innodb_file_format = 'Barracuda'`, and_x000D_
`innodb_large_prefix = 1`) since InnoDB table is created as the row_x000D_
format `COMPACT` by default on MySQL 5.6, therefore indexing on string_x000D_
with `utf8mb4` columns aren't succeeded._x000D_
_x000D_
Making `ROW_FORMAT=DYNAMIC` create table option by default for legacy_x000D_
MySQL version would mitigate the indexing issue on the user side, and it_x000D_
makes CI would be passed on MySQL 5.6 which is configured properly._x000D_
","C 0000374",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"A big thanks to @palkan for his hard work on ActionCable testing. Here is a small enhancement with some additional assert methods to check started streams in a more convenient way. _x000D_
_x000D_
Working with raw subscription identifiers is good enough while you deal with streams created by `stream_from` method. If you try to use `stream_for` it requires you to build up an identifier on your own directly in the test. The provided methods try to simplify this process.","C 0000375",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Double nesting of configuration is **not supported** (without using an intermediate object), even though the **docs suggest it is**. This corrects the docs._x000D_
_x000D_
Personally, I think it would be great if it **was** supported, but that's a whole other can of worms/PR 😅 ","C 0000376",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"## Summary_x000D_
_x000D_
The following controller test code works fine on Rails 5.0.7:_x000D_
_x000D_
```rb_x000D_
get :index, params: nil_x000D_
```_x000D_
_x000D_
but on Rails 5.1 or the later versions, NoMethodError is raised with the following error message:_x000D_
_x000D_
```_x000D_
NoMethodError: undefined method `symbolize_keys' for nil:NilClass_x000D_
```_x000D_
_x000D_
I think this behavior was changed at https://github.com/rails/rails/commit/98b8309569a326910a723f521911e54994b112fb._x000D_
_x000D_
## Other Information_x000D_
_x000D_
Here is an example code to reproduce this error:_x000D_
_x000D_
```rb_x000D_
# controller_params_test.rb_x000D_
require 'bundler/inline'_x000D_
_x000D_
gemfile do_x000D_
  source 'https://rubygems.org'_x000D_
_x000D_
  # gem 'rails', '5.0.7'_x000D_
  gem 'rails', '5.1.6'_x000D_
end_x000D_
_x000D_
require 'action_controller/railtie'_x000D_
require 'minitest/autorun'_x000D_
require 'rails/test_help'_x000D_
_x000D_
class TestApp < Rails::Application_x000D_
  secrets.secret_key_base = 'secret_key_base'_x000D_
_x000D_
  ::Rails.logger = ::Logger.new(nil)_x000D_
_x000D_
  routes.draw do_x000D_
    get '/' => 'test#index'_x000D_
  end_x000D_
end_x000D_
_x000D_
class TestController < ActionController::Base_x000D_
  include ::Rails.application.routes.url_helpers_x000D_
_x000D_
  def index_x000D_
    head(200)_x000D_
  end_x000D_
end_x000D_
_x000D_
class ControllerParamsTest < ActionController::TestCase_x000D_
  def setup_x000D_
    super_x000D_
    @controller = ::TestController.new_x000D_
  end_x000D_
_x000D_
  def test_params_with_empty_hash_x000D_
    get :index, params: {}_x000D_
    assert_equal 200, response.status_x000D_
  end_x000D_
_x000D_
  def test_params_with_nil_x000D_
    get :index, params: nil_x000D_
    assert_equal 200, response.status_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
### Expected_x000D_
_x000D_
```_x000D_
$ ruby controller_params_test.rb_x000D_
Run options: --seed 8188_x000D_
_x000D_
# Running:_x000D_
_x000D_
.._x000D_
_x000D_
Finished in 0.069279s, 28.8688 runs/s, 28.8688 assertions/s._x000D_
2 runs, 2 assertions, 0 failures, 0 errors, 0 skips_x000D_
```_x000D_
_x000D_
### Actual_x000D_
_x000D_
```_x000D_
$ ruby controller_params_test.rb_x000D_
Run options: --seed 46396_x000D_
_x000D_
# Running:_x000D_
_x000D_
.E_x000D_
_x000D_
Error:_x000D_
ControllerParamsTest#test_params_with_nil:_x000D_
NoMethodError: undefined method `symbolize_keys' for nil:NilClass_x000D_
_x000D_
_x000D_
_x000D_
bin/rails test controller_params_test.rb:43_x000D_
_x000D_
_x000D_
_x000D_
Finished in 0.065820s, 30.3859 runs/s, 15.1930 assertions/s._x000D_
2 runs, 1 assertions, 0 failures, 1 errors, 0 skips_x000D_
```_x000D_
_x000D_
### FYI_x000D_
_x000D_
ActionDispatch::IntegrationTest can take nil params like this:_x000D_
_x000D_
```rb_x000D_
class RequestParamsTest < ActionDispatch::IntegrationTest_x000D_
  def test_params_with_nil_x000D_
    get '/', params: nil_x000D_
    assert_equal 200, response.status_x000D_
  end_x000D_
end_x000D_
```_x000D_
","C 0000377",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0
"Also, use the physical core count of the machine as_x000D_
the default number of workers, and generate the `test_helper.rb` file_x000D_
with `parallelize(workers: :number_of_processors)`_x000D_
_x000D_
Closes #34734","C 0000378",0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
"Fixes the rdoc formatting for this block._x000D_
_x000D_
Before:_x000D_
_x000D_
![ruby on rails api 2018-12-17 15-58-27](https://user-images.githubusercontent.com/308724/50115769-60517d00-0216-11e9-9983-0c1d791c6b31.png)_x000D_
_x000D_
After:_x000D_
_x000D_
![actionview rendering 2018-12-17 16-09-29](https://user-images.githubusercontent.com/308724/50115776-65aec780-0216-11e9-9a39-166111f3a4e5.png)_x000D_
","C 0000379",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
https://github.com/rails/rails/pull/34352 introduced individual execution counters for `retry_on` declarations. I run into an issue with in-flight jobs when trying to upgrade a production app to Rails edge. Jobs enqueued before this change won't have the individual counters as part of their data, which means they'd error if they happen to be retried, with_x000D_
```_x000D_
NoMethodError: undefined method `+' for nil:NilClass_x000D_
  from active_job/exceptions.rb:47:in `block in retry_on'_x000D_
```_x000D_
_x000D_
Since I was there, I tried to make the behaviour of these individual counters a bit clearer, as I was confused in the beginning about how many times each exception would be retried with a declaration like this, and figured that others might be confused as well:_x000D_
```_x000D_
retry_on CustomException, OtherException, attempts: 3_x000D_
```_x000D_
_x000D_
With the current implementation, the job would be retried  at most 3 times in total, for both_x000D_
`CustomException` and `OtherException`. To have the job retry 3 times at most for each exception individually, the following `retry_on` declarations are necessary:_x000D_
_x000D_
```_x000D_
retry_on CustomException, attempts: 3_x000D_
retry_on OtherException, attempts: 3_x000D_
```","C 0000380",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"### Summary_x000D_
_x000D_
Fixes #34718 _x000D_
_x000D_
From the description given in the issue, matching regexes for Integers or classes will always return nil in Ruby 2.6.0._x000D_
_x000D_
Therefore, this pull request calls to_s before matching regexes to make sure they are actually being validated._x000D_
","C 0000381",0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0
"Adding general info to those interested.","C 0000382",0,1,0,2,0,0,0,0,0,1,1,0,1,0,2,0,0,0,0
,"C 0000383",0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0
"1) Extend documentation of `ActiveSupport::Notifications.subscribe`_x000D_
  Add mention that a block with only one argument passed to the method_x000D_
  will yield an event object._x000D_
_x000D_
2) Emphasize that `SubscribeEventObjects` is a test class by adding suffix `Test`_x000D_
_x000D_
 Related to #33451","C 0000384",0,3,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"### Summary_x000D_
_x000D_
[Ruby 2.6.0-rc2 Released](https://www.ruby-lang.org/en/news/2018/12/15/ruby-2-6-0-rc2-released/) and Ruby 2.6 will be released on this December 25. I expect Rails 5.2 should run with Ruby 2.6 without errors/warnings._x000D_
_x000D_
This pull request backports changes to 5-2-stable branch to suppress errors and warnings which have been already addressed in the master branch. I'm wondering if these kinds of backporting should be done by Rails committers and/or release manager. Let me open a pull request first._x000D_
_x000D_
### Other Information_x000D_
_x000D_
There are some errors remained. One can be ""fixed"" but it needs to backport pull requests with CHANGELOG. Another one, I do not know why it fails with 5-2-stable._x000D_
_x000D_
* It has been addressed by #32938 to master branch. It has changelog entry then I did not backport it to this pull request._x000D_
_x000D_
```ruby_x000D_
$ cd activesupport_x000D_
$ bundle exec ruby -w -Itest test/core_ext/range_ext_test.rb -n /test_should_compare/_x000D_
Run options: -n /test_should_compare/ --seed 24989_x000D_
_x000D_
# Running:_x000D_
_x000D_
F_x000D_
_x000D_
Failure:_x000D_
RangeTest#test_should_compare_other_with_exclusive_end [test/core_ext/range_ext_test.rb:72]:_x000D_
Expected false to be truthy._x000D_
_x000D_
_x000D_
bin/rails test test/core_ext/range_ext_test.rb:71_x000D_
_x000D_
F_x000D_
_x000D_
Failure:_x000D_
RangeTest#test_should_compare_identical_exclusive [test/core_ext/range_ext_test.rb:68]:_x000D_
Expected false to be truthy._x000D_
_x000D_
_x000D_
bin/rails test test/core_ext/range_ext_test.rb:67_x000D_
_x000D_
F_x000D_
_x000D_
Failure:_x000D_
RangeTest#test_should_compare_identical_inclusive [test/core_ext/range_ext_test.rb:64]:_x000D_
Expected false to be truthy._x000D_
_x000D_
_x000D_
bin/rails test test/core_ext/range_ext_test.rb:63_x000D_
_x000D_
_x000D_
_x000D_
Finished in 0.001701s, 1763.5357 runs/s, 1763.5357 assertions/s._x000D_
3 runs, 3 assertions, 3 failures, 0 errors, 0 skips_x000D_
```_x000D_
_x000D_
* `test_restart_rails_server_with_custom_pid_file_path` fails _x000D_
It passes with the master branch. _x000D_
_x000D_
```ruby_x000D_
$ cd railties_x000D_
$ bundle exec ruby -w -Itest test/application/server_test.rb -n test_restart_rails_server_with_custom_pid_file_path_x000D_
Run options: -n test_restart_rails_server_with_custom_pid_file_path --seed 41272_x000D_
_x000D_
# Running:_x000D_
_x000D_
F_x000D_
_x000D_
Failure:_x000D_
ApplicationTests::ServerTest#test_restart_rails_server_with_custom_pid_file_path [test/application/server_test.rb:53]:_x000D_
""Inherited"" expected, but got:_x000D_
_x000D_
..._x000D_
Traceback (most recent call last):_x000D_
	2: from bin/rails:4:in `<main>'_x000D_
	1: from /home/yahonda/.rbenv/versions/2.6.0-rc2/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'_x000D_
/home/yahonda/.rbenv/versions/2.6.0-rc2/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require': cannot load such file -- rails/commands (LoadError)_x000D_
._x000D_
Expected ""...\r\n\e[1mTraceback\e[m (most recent call last):\r\n\t2: from bin/rails:4:in `<main>'\r\n\t1: from /home/yahonda/.rbenv/versions/2.6.0-rc2/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'\r\n/home/yahonda/.rbenv/versions/2.6.0-rc2/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require': \e[1mcannot load such file -- rails/commands (\e[1;4mLoadError\e[m\e[1m)\e[m\r\n"" to include ""Inherited""._x000D_
_x000D_
_x000D_
bin/rails test test/application/server_test.rb:35_x000D_
_x000D_
_x000D_
_x000D_
Finished in 14.595938s, 0.0685 runs/s, 0.4111 assertions/s._x000D_
1 runs, 6 assertions, 1 failures, 0 errors, 0 skips_x000D_
```","C 0000385",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Allow using `parsed_body` in `ActionController::TestCase` by switching the initialzation of an appropriate response parser_x000D_
in `ActionDispatch::TestResponse` from eagerly to lazily._x000D_
_x000D_
By doing so, the response parser can be correctly set for_x000D_
`ActionController::TestCase`, which doesn't include_x000D_
the content type header in the constructor but only sets it at_x000D_
a later time._x000D_
_x000D_
Fixes #34676.","C 0000386",0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0
"### Context_x000D_
_x000D_
When trying to create a separate _cable_ instance (e.g. within an engine), we faced a problem of `ActionCable::Server::Base` relying on the _global_ configuration (i.e. `ActionCable::Server::Base.config`). _x000D_
_x000D_
We want our engine to have a separate, isolated, Cable server instance with its own configuration._x000D_
_x000D_
See the example app using this patch: https://github.com/palkan/engine-cable-app_x000D_
_x000D_
### Summary_x000D_
_x000D_
- Add ability to pass a config as a `Server.new` argument._x000D_
_x000D_
### Other Information_x000D_
_x000D_
This problem has been already discussed here: https://github.com/rails/rails/pull/27425#discussion_r96065280 (we've adjusted the test from that PR as well)._x000D_
_x000D_
The related issue not included into this patch (separate PR?): currently, only the Redis adapter supports channels prefixes.  With the ability to have _engined_ cables we'll need to isolate streams for all _distributed_ adapters (e.g. `postgresql`, `async`/`inline` adapters do not share anything)._x000D_
_x000D_
One potential caveat of using multiples cables within the app is the lack of isolation for channel classes, i.e. it is possible to subscribe (or at least try to) to any channel from any connection (see https://github.com/rails/rails/blob/v5.2.2/actioncable/lib/action_cable/connection/subscriptions.rb#L35)._x000D_
_x000D_
One possible solution is to add `config.base_channel_class` parameter and use it instead of a `ActionCable::Channel::Base` (i.e. `config.base_channel_class >= subscription_klass`)._x000D_
_x000D_
Another way is to get away from using Ruby class names as identifiers, and build a per-connection registry/map of identifiers->class (like it's done in https://github.com/palkan/litecable)._x000D_
_x000D_
P.S. Thanks to @composerinteralia for pairing with me on this feature.","C 0000387",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Hello, I am requesting the inclusion of result_set with payload, to use in ActiveSupport::Notifications pub/sub. Currently, I am required to use class_eval to extend ActiveRecord, but would prefer a cleaner solution.","C 0000388",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
I noticed in the guide we're still using sprockets and coffeescript to demo action cable. Since Webpacker is going to be default in Rails 6, and ActionCable has been converted to ES6, I think this makes sense to change._x000D_
_x000D_
I've never actually used ActionCable in a non-trivial app before, so I'd like some feedback on the snippets.","C 0000389",1,0,0,0,0,0,0,0,0,0,2,0,0,2,1,0,0,0,0
"…s and ActiveSupport::LogSubscriber documentation files_x000D_
_x000D_
### Summary_x000D_
_x000D_
This PR adds some missing code samples describing error handling in `ActiveSupport::Notifications` and `ActiveSupport::LogSubscriber` documentation files. It also includes some minor formatting updates to `ActiveSupport::LogSubscriber` docs.","C 0000390",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
Add missing keys type_casted_binds & statement_name_x000D_
_x000D_
See https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L625.","C 0000391",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
Dalli uses `ENV[""MEMCACHE_SERVERS""]` to default memchached server address when not any address passed in client.new ._x000D_
_x000D_
But ActiveSupport uses `localhost:11211` in `ActiveSupport::Cache::MemCacheStoreTest.build_mem_cache` called_x000D_
without arguments._x000D_
Its behavior can't overwrite by environment variable ""MEMCACHE_SERVERS""._x000D_
_x000D_
If address passed, use this._x000D_
Else, check ""MEMCACHE_SERVERS"" then it has value, use this._x000D_
If neither, use nil to initialize `Dalli::Client` ._x000D_
_x000D_
### Other Information_x000D_
I found this problem when run ActiveSupport test by memcached that running other host. _x000D_
_x000D_
In my opinion, ActiveSupport has to respects to Dalli behavior to use MEMCACHE_SERVER environment variable. :wink: _x000D_
","C 0000392",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0
"`ActiveSupport::Deprecation.deprecate_methods` without alternate method name is not tested.","C 0000393",1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34694._x000D_
_x000D_
Preserves order of keys passed to `#fetch_multi`._x000D_
_x000D_
If for some reason the current functionality is intended, I'll refactor this PR to document the behaviour._x000D_
","C 0000394",0,0,0,1,1,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"### Summary_x000D_
_x000D_
New migration generator action 'add_indexed'. _x000D_
_x000D_
This will generate migration file only with add_index :table_name, :attribute section_x000D_
_x000D_
Usage: `rails generate migration add_indexed_email_to_users` _x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
","C 0000395",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Add multiple sources docu to Collection caching guide_x000D_
","C 0000396",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Looking at the past commits, it seems to follow Ruby's version upgrade._x000D_
So I thought it better to raise the version._x000D_
_x000D_
#### past commits_x000D_
https://github.com/rails/rails/commit/6b3acf151829ee16a946c0d77529d236f115234c_x000D_
https://github.com/rails/rails/commit/c2c9839a3d9b2c8c3bc5b717f23928d856c7e922","C 0000397",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
no need to set backreferences, in these cases using match? is more appropriate_x000D_
_x000D_
### Other Information_x000D_
```_x000D_
INTEGER_REGEX_x000D_
             ===    656.097k (± 5.1%) i/s -      3.311M in   5.060584s_x000D_
            match?   2.673M (± 4.0%) i/s -     13.432M in   5.034181s_x000D_
```_x000D_
","C 0000398",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0
"### Summary_x000D_
_x000D_
Followup on https://github.com/rails/rails/pull/34591. This moves the setting of using `ActionMailer::MailDeliveryJob` as the default delivery job to defaults only applied to new 6.0 apps. Upgraded apps need to upgrade this manually to avoid having issues on deployment discussed [here](https://github.com/rails/rails/pull/34591#issuecomment-444157404)._x000D_
_x000D_
cc @rafaelfranca, @Edouard-chin, @eileencodes _x000D_
","C 0000399",0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,3,0,0
"### Summary_x000D_
_x000D_
Remove redundant suffixes on generated helpers._x000D_
","C 0000400",0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Remove redundant suffixes on generated integration tests._x000D_
","C 0000401",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"### Summary_x000D_
https://github.com/kr/beanstalkd has moved to_x000D_
https://github.com/beanstalkd/beanstalkd as permanently._x000D_
_x000D_
### Other Information_x000D_
```shell_x000D_
$ curl --head https://github.com/kr/beanstalkd_x000D_
HTTP/1.1 301 Moved Permanently_x000D_
Date: Wed, 12 Dec 2018 15:18:59 GMT_x000D_
Content-Type: text/html; charset=utf-8_x000D_
Server: GitHub.com_x000D_
Status: 301 Moved Permanently_x000D_
Cache-Control: no-cache_x000D_
Vary: X-PJAX_x000D_
Location: https://github.com/beanstalkd/beanstalkd_x000D_
..._x000D_
```","C 0000402",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"The second attempt  :)_x000D_
The previous one: https://github.com/rails/rails/pull/25369 by @timthez.","C 0000403",1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"### Summary_x000D_
Issue: https://github.com/rails/rails/issues/34676","C 0000404",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Removes redundant `_test` suffix on generated system tests._x000D_
","C 0000405",1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34677._x000D_
_x000D_
Fixes boolean interaction in scaffold generated system tests.","C 0000406",1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"This can be used to check the currently connected role. It's meant to mirror `ActiveRecord::Base.connected_to` introduced in #34052 _x000D_
_x000D_
Usage:_x000D_
_x000D_
``` ruby_x000D_
ActiveRecord::Base.connected_to(role: :writing) do_x000D_
  ActiveRecord::Base.connected_to?(role: :writing) #=> true_x000D_
  ActiveRecord::Base.connected_to?(role: :reading) #=> false_x000D_
end_x000D_
```_x000D_
_x000D_
cc @eileencodes ","C 0000407",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/30967 for 5-2-stable","C 0000408",0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Fixes #30967","C 0000409",0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,1,0,0,0
"### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/30967_x000D_
","C 0000410",1,1,0,1,0,0,0,0,0,0,3,0,0,0,1,1,0,0,0
"### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
This updates the ActiveStorage overview documentation to prepend a module onto `IntegrationTest`, rather than straight overriding the `after_teardown` method, as per [this discussion with @rafaelfranca in #34619](https://github.com/rails/rails/pull/34619#discussion_r238882327)","C 0000411",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
This pull request attempts to fix #34664 by increasing ramfs size before installing for CI against 5-2-stable._x000D_
_x000D_
For master branch, https://github.com/rails/rails/pull/33861 has been merged, which depends on https://github.com/rails/rails/pull/33608. #33608 has not and should not be backported to 5-2-stable. Increasing ramfs should be a better way to address #34664 for 5-2-stable._x000D_
_x000D_
cc @y-yagi ","C 0000412",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"Just fix typos in test descriptions","C 0000413",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
This simple pull request upgrades Rubocop to 0.61.1 and fixes the remaining issues._x000D_
_x000D_
All of them were related to indentation after private / protect, which, as described in the [Contributing to Rails Guide] should be of 2 spaces._x000D_
_x000D_
[Contributing to Rails Guide]: https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html_x000D_
_x000D_
","C 0000414",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"In the text in the h1 tag, which is called out in the explanation text does not match. I've changed the explanation (below the html.erb examples, #L1123, #L1130) to match the h1 tags. But, this change could easily go the other way._x000D_
_x000D_
### Summary_x000D_
There was a simple error in the guide text, which referenced the wrong text (possible due to the example html.erb files changing). The text was close, but not correct. I have changed the text to match the html.erb h1 tag titles._x000D_
","C 0000415",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Problem occurs in the following scenario for **jruby**-_x000D_
When 2 threads are trying to access the same ActiveRecord object, one of the thread is updating an attribute while the other one is trying to read an attribute._x000D_
_x000D_
Fixes #34615_x000D_
_x000D_
### Script to reproduce_x000D_
```ruby_x000D_
# frozen_string_literal: true_x000D_
_x000D_
require ""bundler/inline""_x000D_
_x000D_
gemfile(true) do_x000D_
  source ""https://rubygems.org""_x000D_
  ruby ""2.5.0"", engine: 'jruby', engine_version: '9.2.3.0'_x000D_
_x000D_
  gem ""rails""_x000D_
  gem ""activerecord-jdbcsqlite3-adapter""_x000D_
  gem ""parallel""_x000D_
end_x000D_
_x000D_
require ""active_record""_x000D_
require ""minitest/autorun""_x000D_
require ""logger""_x000D_
require 'parallel'_x000D_
_x000D_
# This connection will do for database-independent bug reports._x000D_
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: ""bug_test"", pool: 5000)_x000D_
ActiveRecord::Base.logger = Logger.new(STDOUT)_x000D_
_x000D_
ActiveRecord::Schema.define do_x000D_
  create_table :posts, force: true do |t|_x000D_
    t.string :name_x000D_
  end_x000D_
end_x000D_
_x000D_
class Post < ActiveRecord::Base_x000D_
end_x000D_
_x000D_
class BugTest < Minitest::Test_x000D_
  def test_concurrency_issue_x000D_
    post = Post.create!_x000D_
_x000D_
    tasks = []_x000D_
_x000D_
    10000.times.each do_x000D_
      tasks << Proc.new do_x000D_
        j = post.name_x000D_
      end_x000D_
    end_x000D_
    10000.times.each do_x000D_
      tasks << Proc.new do_x000D_
        post.update!(name: 'random')_x000D_
      end_x000D_
    end_x000D_
_x000D_
    Parallel.each(tasks.shuffle, in_threads: 6) do |task|_x000D_
      task.call_x000D_
    end; nil_x000D_
  end_x000D_
end_x000D_
_x000D_
```_x000D_
#### System configuration_x000D_
**Ruby version**: 2.5.0_x000D_
**engine**: jruby_x000D_
**jruby-version**: 9.2.3.0_x000D_
_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->","C 0000416",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"### Summary_x000D_
_x000D_
All native DS support `blank?` and `present?` except `OpenStruct`. I have added an implementation for `OpenStruct`. Any reason this was left out?_x000D_
_x000D_
My argument for this would be, since it is a `Hash` like DS, it should have the presence methods as well, just like a `Hash` does","C 0000417",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Very small correction to documentation on per-form CSRF tokens where the term ""specified"" is changed to ""specific""._x000D_
_x000D_
### Other Information","C 0000418",0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0
"This PR:_x000D_
- Adds more tests for `#create_or_find_by/!` methods_x000D_
- Fixes docs of `create_or_find_by`. This method uses `find_by!` internally instead of `find_by`_x000D_
_x000D_
Related to #31989","C 0000419",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"This only updates the pull request https://github.com/rails/rails/pull/32852 to the current master. This would close the issue https://github.com/rails/rails/issues/26085_x000D_
_x000D_
Besides the conflicts is there anything missing from @gmcgibbon that prevents the PR from being merged? afaict it solves the bug_x000D_
_x000D_
","C 0000420",0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
"Before #33325, `deprecate` works for non-exist methods._x000D_
This is necessary, for example, if want to deprecate dynamically defined_x000D_
methods like attributes methods._x000D_
_x000D_
Fixes #34646","C 0000421",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"For method which is not yet defined when evaluating `deprecate`,_x000D_
`alias_method` raises NameError._x000D_
Postponed defining deprecated version of method until original one is added._x000D_
_x000D_
Fixes #34646_x000D_
","C 0000422",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
`ActionDispatch::Journey::Nodes::Symbol#type` was generated dynamically with the help of an `each` block. While this is OK for classes like `ActionDispatch::Journey::Nodes::Slash` or `ActionDispatch::Journey::Nodes::Dot` which don't have further implementation, all other classes containing more logic have this method defined within their class' body._x000D_
_x000D_
This patch puts the definition of `ActionDispatch::Journey::Nodes::Symbol` in one place instead of having two separate places defining logic for this class.","C 0000423",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"Rails 4 -> Rails 5 introduced a #to_hash call in HashWithIndifferentAccess#initialize to guarantee access to the #default and #default_proc methods.  This can be an expensive operation for very large HashWithIndifferentAccess objects._x000D_
_x000D_
This commit bypasses this #to_hash call if it is already a Hash, giving a performance boost to the copy constructor of huge HWIAs.","C 0000424",0,0,0,1,0,0,0,1,0,0,1,0,0,0,2,0,0,0,0
"Before [ruby/ruby@a0e438c#diff-6b866d482baf2bdfd8433893fb1f6d36R144](bigdecimal-1.4.0.pre-20181130a) `BigDecimal(""123_non_numeric"")` returns `0.123e3`. After that commit, it raises. This causes `Decimal.type_cast(""123_non_numeric"")` to `rescue` and return `0.0`._x000D_
_x000D_
This patch conserves current behavior._x000D_
_x000D_
See test failure in CI: https://travis-ci.org/rails/rails/jobs/462532922#L4501","C 0000425",0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"### Description_x000D_
_x000D_
This PR aims to fix a corner case concerning UJS behavior._x000D_
Reproduction steps are laid out in #33889._x000D_
The issue occurs because the a[data-disable(-with)] within a form will cause both the_x000D_
_x000D_
` delegate document, Rails.formSubmitSelector, 'ajax:send', disableElement`_x000D_
_x000D_
 which disables all child form elements as well as the _x000D_
_x000D_
`delegate document, Rails.linkClickSelector, 'click', disableElement`_x000D_
_x000D_
to attempt to disable the element._x000D_
The first invocation change the text inside the a tag to be saved as attribute while being replaced by the data-disable-with attribute data._x000D_
The second invocation again takes the inner text (now the data-diable-with) and overwrites the saved text making the link always show the data-disabled-with text, even after reenabling, since the original text, saved within an attribute was overwritten during the second invocation._x000D_
_x000D_
Tl;Dr: Disabling an element that already is disabled is not handled well._x000D_
_x000D_
### Fixes_x000D_
_x000D_
While you could make sure none of the handlers target the same elements, disabling a disabled element should not cause issues at any time. Since the current implementation already marks an element as disabled by ujs, we should use that information to determine if we should actually disable or just return early.","C 0000426",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"I originally named this `StatementInvalid` because that's what we do in_x000D_
GitHub, but `@tenderlove` pointed out that this means apps can't test_x000D_
for or explitly rescue this error. `StatementInvalid` is pretty broad so_x000D_
I've renamed this to `InvalidWriteOnRead`._x000D_
_x000D_
I also changed the `while_preventing_writes` block to reset to false -_x000D_
we always want to turn this feature off at the end of the block._x000D_
_x000D_
cc/ @rafaelfranca @matthewd @tenderlove - thoughts on the error name?","C 0000427",0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,1,0,0,0
"### Summary_x000D_
_x000D_
Defines `Object#include` that allows for including a module on an instance level. This is facilitated by including the module on the instance's singleton class._x000D_
_x000D_
A practical use for this is to provide controller-specific validations to a model:_x000D_
_x000D_
```ruby_x000D_
module SpecialUserValidations_x000D_
  extend ActiveSupport::Concern_x000D_
_x000D_
  included do_x000D_
    validates :name, presence: :true_x000D_
  end_x000D_
end_x000D_
_x000D_
class FooController_x000D_
  def update_x000D_
    @user = User.find(params[:id])_x000D_
    @user.include(SpecialUserValidations)_x000D_
    # ... @user now requires name to be set_x000D_
  end_x000D_
end_x000D_
```_x000D_
    _x000D_
","C 0000428",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34622._x000D_
_x000D_
Quotes joined columns properly in SQLite._x000D_
","C 0000429",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
IMO the previous header (_Serving GZipped version of assets_) was misleading, because it was suggesting that the config will enable us serving the gzipped version of assets out of the box, which is not true, because we need to configure it on a server, e.g. nginx._x000D_
_x000D_
In fact, the paragraph is explaining how to enable/disable gzipping assets in the config and I believe that my change will be more straightforward for readers.","C 0000430",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Implements #33064_x000D_
_x000D_
> When using the actioncable javascript package, if you want to pass an authorization token you need to do so when creating the cable consumer. However, this is not dynamic, ideally you could modify this token after the consumer is created so if the token expires or is refreshed it could be updated._x000D_
_x000D_
Now you can update the authorization token in cable consumers.","C 0000431",0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
👋 I'm the release manager for Bundler and i'm currently preparing for the release of Bundler 2. I wanted to test Bundler 2 on Rails' test suite and make sure I didn't break anything. After talking with @rafaelfranca, we agreed that we should update the repo to the use the latest pre-release._x000D_
_x000D_
Once the final release is made, I'll make another PR to update Travis to pull the latest stable release._x000D_
_x000D_
\cc @rafaelfranca _x000D_
","C 0000432",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"According to [Ruby on Rails Guides Guidelines](https://guides.rubyonrails.org/ruby_on_rails_guides_guidelines.html#html-guides-generation), environment variable `DIRECTION` is't necessary to give in order to generate Rails Guides.  But, `bundle exec rake guides:generate` gives me errors below._x000D_
_x000D_
```_x000D_
ysksn at T460s in ~/Projects/rails/guides on master using 2.5.3_x000D_
 ± bundle exec rake guides:generate_x000D_
/home/ysksn/.rbenv/versions/2.5.3/bin/ruby rails_guides.rb_x000D_
Traceback (most recent call last):_x000D_
rails_guides.rb:29:in `<main>': undefined method `to_sym' for nil:NilClass (NoMethodError)_x000D_
rake aborted!_x000D_
Command failed with status (1): [/home/ysksn/.rbenv/versions/2.5.3/bin/ruby...]_x000D_
/home/ysksn/Projects/rails/guides/Rakefile:24:in `block (3 levels) in <top (required)>'_x000D_
/home/ysksn/Projects/rails/vendor/bundle/gems/rake-12.3.1/exe/rake:27:in `<top (required)>'_x000D_
/home/ysksn/.rbenv/versions/2.5.3/bin/bundle:23:in `load'_x000D_
/home/ysksn/.rbenv/versions/2.5.3/bin/bundle:23:in `<main>'_x000D_
Tasks: TOP => guides:generate => guides:generate:html_x000D_
(See full trace by running task with --trace)_x000D_
```_x000D_
So, I've changed that if environment variable `DIRECTION` isn't given, set `:ltr` as default value._x000D_
_x000D_
Thanks :)","C 0000433",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
This leverages `ActiveSupport.on_load` in the guides and generated `test_helper.rb`, rather than reopen classes. This practice can help safeguard against load order issues._x000D_
_x000D_
Spin off from [discussion](https://github.com/rails/rails/pull/34563#discussion_r237374753) with @Edouard-chin, @gmcgibbon, & @rafaelfranca in #34563._x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
_x000D_
- [ ] Update CHANGELOG (does updating the generated `test_helper.rb` warrant this?)_x000D_
- [ ] Either update #34563 after merging this, or update this after merging #34563_x000D_
","C 0000434",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Hello,_x000D_
_x000D_
I've found a few places in Rails code base where I think it makes sense to calculate elapsed time more precisely by using `Concurrent.monotonic_time`:_x000D_
_x000D_
- `ActiveSupport::Cache::MemoryStore#prune`_x000D_
- `ActiveRecord::ConnectionAdapters::ConnectionPool::Queue#wait_poll`_x000D_
- `ActiveRecord::ConnectionAdapters::ConnectionPool#attempt_to_checkout_all_existing_connections`_x000D_
- `ActiveRecord::ConnectionAdapters::Mysql2Adapter#explain`_x000D_
_x000D_
See_x000D_
https://docs.ruby-lang.org/en/2.5.0/Process.html#method-c-clock_gettime_x000D_
https://blog.dnsimple.com/2018/03/elapsed-time-with-ruby-the-right-way_x000D_
_x000D_
Related to 7c4542146f0dde962205e5a90839349631ae60fb_x000D_
_x000D_
<del>_x000D_
Add private `ActiveSupport::ProcessClock` module_x000D_
_x000D_
In the codebase, we use `Process::CLOCK_PROCESS_CPUTIME_ID`,_x000D_
but it doesn't work on Windows so we should add conditions_x000D_
to support Windows. It is a good idea to handle all those cases_x000D_
in one place to prevent spreading those conditions in the codebase._x000D_
_x000D_
Related to #34374, #34410_x000D_
</del>","C 0000435",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"### Summary_x000D_
_x000D_
This small change simply colorizes the unpermitted params warning/error log output to make it easier for scanning and identifying issues with strong params. I've been helping out some junior/beginner engineers with rails and more than a few times they've run into issues where they're just overlooking the log message. Not ashamed to say that this still gets me every once in a while, mostly because I feel like I've scanned the log and I don't see the message, so I go looking elsewhere._x000D_
_x000D_
[It seems like moving the default to `:raise` instead of `:log` is probably a good idea](https://github.com/rails/rails/pull/32206), but regardless if we'd raise an error, it seems like colorizing the log message makes sense as a parallel.","C 0000436",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34608._x000D_
_x000D_
Adds note to the routing guide about defining additional resource routes with symbols.","C 0000437",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"This patch modifies XmlMini::Parsing[""decimal""] to handle a string that contains an invalid number. Since [ruby/ruby@a0e438c#diff-6b866d482baf2bdfd8433893fb1f6d36R144](https://github.com/ruby/ruby/commit/a0e438cd3c28d2eaf4efa18243d5b6edafa14d88#diff-6b866d482baf2bdfd8433893fb1f6d36R144) this case raises an `ArgumentError`. `String.to_f` returns 0.0 if there is not a valid number at the start of the argument, so current behavior is conserved._x000D_
    _x000D_
See https://travis-ci.org/rails/rails/jobs/463180341#L6264_x000D_
    _x000D_
Related: #34600, #34601_x000D_
","C 0000438",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Unlike the `Relation#delete_all`, `delete_all` on collection proxy_x000D_
doesn't return affected count. Since the `CollectionProxy` is a subclass_x000D_
of the `Relation`, this inconsistency is probably not intended, so it_x000D_
should return the count consistently._x000D_
","C 0000439",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34460._x000D_
_x000D_
Calls `#reset_scope` after every delete method call on a collection association. This clears stale memoized offsets containing removed records here:_x000D_
https://github.com/rails/rails/blob/6ca6478a67ecdff58c29d10cd408b7259ed89e2b/activerecord/lib/active_record/relation/finder_methods.rb#L512","C 0000440",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Fixes #34599 _x000D_
_x000D_
By default `ActiveRecord.enum` generates several default scopes based on the values. This PR adds an option to disable those scopes which could possibly cause conflicts with existing methods for the model._x000D_
_x000D_
<!-- Provide a general description of the code changes in your pull_x000D_
request... were there any bugs you had fixed? If so, mention them. If_x000D_
these bugs have open GitHub issues, be sure to tag them here as well,_x000D_
to keep the conversation linked together. -->_x000D_
_x000D_
### Other Information_x000D_
_x000D_
<!-- If there's anything else that's important and relevant to your pull_x000D_
request, mention that information here. This could include_x000D_
benchmarks, or other information._x000D_
_x000D_
If you are updating any of the CHANGELOG files or are asked to update the_x000D_
CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file._x000D_
_x000D_
Finally, if your pull request affects documentation or any non-code_x000D_
changes, guidelines for those changes are [available_x000D_
here](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)_x000D_
_x000D_
Thanks for contributing to Rails! -->_x000D_
","C 0000441",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"See #34568","C 0000442",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
"Fixes #34600 _x000D_
_x000D_
### Summary_x000D_
_x000D_
NumericData.average was returning nil on ruby versions <= ruby 2.6.0dev (2018-12-03 trunk 66154)_x000D_
_x000D_
Now it returns 0.0 instead of nil","C 0000443",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
I accidentally forgot to add the author line to my changelog entry from 2bb4fdef5efc70327c018e982ff809a29ac6708b (#34590). Sorry about that 😳_x000D_
_x000D_
","C 0000444",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"See: https://travis-ci.org/rails/rails/jobs/462233144#L1384","C 0000445",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"- Fix formatting_x000D_
- Don't repeat ""Active Record automatically handles creating and migrating a new database for each worker to use.""_x000D_
- Tell that AR loads the schema to a database for each process(Related to #33479)_x000D_
- Clarify that `parallelize_teardown` is executed for each process_x000D_
","C 0000446",0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0
"### Summary_x000D_
The variable `route` was only allocated to hold an object that was immediately returned. This patch removes that variable.","C 0000447",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
In https://github.com/rails/rails/pull/34367, we merged a breaking change to `actionmailer` that changed the parameters of `DeliveryJob`. This will cause upgrade pains for any app delivering mail in the background. This patch attempts to rectify the situation by reverting and deprecating `DeliveryJob` and `Parameterized::DeliveryJob` and introducing `NewDeliveryJob` to send either kind of mail._x000D_
_x000D_
Because web and job workers aren't always deployed to in lockstep, and enqueued jobs can be worked off at any time during a deployment, we have two problems to solve:_x000D_
_x000D_
1. Old delivery jobs need to be able to be worked off by a rails 6 job worker._x000D_
2. New delivery jobs have to be able to be worked off by an old rails 5.x job worker._x000D_
_x000D_
So, the parameter change to `DeliveryJob` needs to be reverted and `Parameterized::DeliveryJob` needs to be brought back to satisfy problem 1. And, the `NewDeliveryJob` class needs to be backported to 5.x to satisfy problem 2. I'll followup with a backport PR if we can all agree on this course of action._x000D_
_x000D_
cc @eileencodes @Edouard-chin _x000D_
","C 0000448",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
The `WebSocket` dependency of `ActionCable.Connection` was made configurable in 66901c1849efae74c8a58fe0cb36afd487c067cc_x000D_
_x000D_
However, the reference in `Connection#getState` was not updated to use the configurable property. This change remedies that and adds a test to verify it. Additionally, it backfills a test to ensure that `Connection#open` uses the configurable property._x000D_
_x000D_
Resolves #34589","C 0000449",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Resolves #34587 _x000D_
_x000D_
<details>_x000D_
<summary>Issue description</summary>_x000D_
_x000D_
> ### Steps to reproduce_x000D_
> ```_x000D_
> cd actioncable_x000D_
> yarn add --dev left-pad_x000D_
> ```_x000D_
> _x000D_
> ### Expected behavior_x000D_
> There should be changes to `yarn.lock` that are tracked by git._x000D_
> _x000D_
> ### Actual behavior_x000D_
> There are only changes to `package.json` tracked by git - no changes to `yarn.lock` tracked by git_x000D_
> _x000D_
> ### System configuration_x000D_
> **Rails version**: N/A_x000D_
> _x000D_
> **Ruby version**: N/A_x000D_
> _x000D_
> ## Analysis_x000D_
> _x000D_
> This seems to be because the repository is now using [Yarn Workspaces](https://yarnpkg.com/lang/en/docs/workspaces/) (added in https://github.com/rails/rails/pull/33079):_x000D_
> _x000D_
> https://github.com/rails/rails/blob/a429b29425027006f2bbd4d267928dde1dc2c31a/.yarnrc#L1-L2_x000D_
> https://github.com/rails/rails/blob/a429b29425027006f2bbd4d267928dde1dc2c31a/package.json#L3-L10_x000D_
> _x000D_
> This makes the `yarn.lock` files inside the `actioncable` and `activestorage` directories obsolete. Now the only `yarn.lock` that matters is in the repository root. However, that file is currently in the `.gitignore`:_x000D_
> https://github.com/rails/rails/blob/a429b29425027006f2bbd4d267928dde1dc2c31a/.gitignore#L19_x000D_
> _x000D_
> This seems undesirable. If you have a stale `yarn.lock` in the root, it won't be modified to add new packages when you `git pull`, even if new dependencies have been added in one of the workspaces. This means that when you run `yarn install`, you won't have all the dependencies installed. You have to first run `rm yarn.lock` to remove your stale lockfile, and then run `yarn install` to get everything installed. Since the root `yarn.lock` is currently in the `.gitignore`, it's easy to miss that you have this file locally, so it's not obvious that you should run `rm yarn.lock` before `yarn install`._x000D_
> _x000D_
> I think we should remove `/yarn.lock` from the `.gitignore` and check in the root `yarn.lock` like we check in [the root `Gemfile.lock`](https://github.com/rails/rails/blob/a429b29425027006f2bbd4d267928dde1dc2c31a/Gemfile.lock)._x000D_
> _x000D_
> Related thread: https://github.com/rails/rails/pull/34370#issuecomment-443449106_x000D_
</details>","C 0000450",1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"I added ""require 'database/setup'"" in the `activestorage/test/service/s3_service_test.rb` file to test it in isolation as discussed in [this](https://github.com/rails/rails/pull/33795#issuecomment-435152682) commentary.","C 0000451",0,0,0,1,0,1,0,0,0,0,5,0,0,2,1,1,0,0,0
,"C 0000452",0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,0,0,0,0
"Better descriptions for `.rubocop.yml` cops.","C 0000453",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0
"### Summary_x000D_
_x000D_
Adds `yield` to parameterized mail test helper so assertions_x000D_
passed into `with_delivery_job` are actually ran.","C 0000454",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0
"### Summary_x000D_
_x000D_
Closes https://github.com/rails/rails/issues/34574._x000D_
_x000D_
Adds docs to clarify that we don't support non-primary key ID columns._x000D_
_x000D_
I had originally tried adding a warning upon setting `primary_key=` (similar to what we do for [composite primary keys](https://github.com/rails/rails/blob/25c076117ce9bb3efcf686c110187206e428b96a/activerecord/lib/active_record/attribute_methods/primary_key.rb#L131)) but we have test coverage for not hitting the DB while setting the primary key, and I don't want to add a runtime check._x000D_
","C 0000455",2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0
"### Summary_x000D_
_x000D_
`S3Service#upload` was broken in `5.2.1.1` and got fixed in https://github.com/rails/rails/pull/34550_x000D_
_x000D_
This adds a shared test ensuring that the `upload` method accepts the extra hash for all the services._x000D_
_x000D_
This takes the keys present in the documentation around `attachments.attach`_x000D_
","C 0000456",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Firefox fires click events on left button, right button and scroll-wheel (any non-primary mouse key) clicks while other browsers don't._x000D_
This commit stops these firefox specific events from being handled like a primary click before other Rails UJS handlers start processing the event by checking which mouse key was used to trigger the event._x000D_
_x000D_
### Other Information_x000D_
Firefox fires click events even if the click originated from right-clicking or the scroll wheel._x000D_
See [here](https://developer.mozilla.org/en-US/docs/Web/Events#Mouse_Events):_x000D_
_x000D_
> A pointing device button (ANY button; soon to be primary button only) has been pressed and released on an element._x000D_
_x000D_
According to the [Mozilla Docs](https://developer.mozilla.org/en-US/docs/Web/Events/click), this should be safe for left and right handed mice._x000D_
_x000D_
> The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left._x000D_
_x000D_
### Related issue_x000D_
#34541_x000D_
","C 0000457",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Follow up #33394._x000D_
_x000D_
#33394 only fixes the case of scoping with klass methods in the scope_x000D_
block which invokes `klass.all`._x000D_
Query methods in the scope block also need to invoke `klass.all` to be_x000D_
affected by the scoping.","C 0000458",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Backport of https://github.com/rails/rails/pull/34569 to `5-2-stable`.","C 0000459",0,0,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Allow aliased attributes to be used in `#update_columns` and `#update`._x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34565._x000D_
","C 0000460",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Pass the `connection` to the `@instrumenter.instrument` call in the `ActiveRecord::ConnectionAdapters#log` method._x000D_
_x000D_
## Why we need that ?_x000D_
_x000D_
Because you already pass the `object_id` (`:connection_id  => object_id`) of the `ActiveRecord::ConnectionAdapters` instance which will then force us to use `ObjectSpace._id2ref` function to retrieve this instance but:_x000D_
 1. `ObjectSpace._id2ref` is not accessible in JRuby_x000D_
 2. @headius said this: ""_id2ref should never be use by any code anywhere. It isn't even safe on MRI."". Here: https://twitter.com/headius/status/1068188351012966402_x000D_
_x000D_
So when you pass `:connection_id  => object_id`, it's not that useful. 😕_x000D_
Passing directly the reference of the object is better for users._x000D_
_x000D_
It'll allow us to cleanly solve this issue in the Datadog instrumenter: https://github.com/DataDog/dd-trace-rb/issues/640_x000D_
_x000D_
WDYT ?_x000D_
_x000D_
_x000D_
","C 0000461",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Delayed Job is mentioned multiple times in the document, but it is not linked from anywhere._x000D_
_x000D_
### Summary_x000D_
_x000D_
Added a link to the Delayed Job product page, since it is mentioned in the document._x000D_
_x000D_
### Other Information_x000D_
_x000D_
None._x000D_
","C 0000462",0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0
"### Summary_x000D_
_x000D_
This updates the guides to include examples of useful patterns for organizing _test helpers_, and preventing `test_helpers.rb` from getting bloated. It adds two sections:_x000D_
_x000D_
- **Extracting Files**, which discusses extracting modules and where they could be put_x000D_
- **Eagerly Requiring Helpers**, which discusses how to easily require these modules for convenience_x000D_
_x000D_
### Motivation_x000D_
_x000D_
I was unable to find good documentation on how to organize test helpers or custom assertions. Unfortunately, the existing documentation's pattern of adding directly to `test_helper.rb` can lead to that file becoming bloated. The closest related information I could find was [RSpec's documentation on the use of `spec/support`](https://github.com/rspec/rspec-rails/blob/8c3a238f8cb26b5821dc4ccaacff2f2088bf2adc/lib/generators/rspec/install/templates/spec/rails_helper.rb#L10-L23)._x000D_
_x000D_
### Why not `test/support`?_x000D_
_x000D_
In my discussion with @rafaelfranca, I had originally leaned towards `test/support`. However, in the event that the helpers are complex enough to warrant tests, it is not obvious how this should be handled:_x000D_
_x000D_
- Should the tests be in `test/support`, and explicitly ignored when eagerly requiring the contents of that directory?_x000D_
- Should the tests be in another folder, such as `test/unit`?_x000D_
_x000D_
@rafaelfranca's suggestion of promoting the helpers to the `lib/test` directory has an obvious test location of `test/lib`, making it a good fit for a recommended pattern._x000D_
_x000D_
----_x000D_
_x000D_
- [ ] Either update #34619 after merging this, or update this after merging #34619","C 0000463",0,0,0,0,1,0,0,0,1,0,0,1,0,0,2,0,0,0,0
"### Summary_x000D_
_x000D_
I had some trouble reading through API docs for ActiveRecord::Querying, so I edited them to be easier to understand._x000D_
_x000D_
  * Break up long sentences_x000D_
  * Reword some sentences to clarify subject, predicate, and object_x000D_
  * Explain drawbacks of using count_by_sql_x000D_
  * Reformat documentation to 80 characters wide to improve editability_x000D_
","C 0000464",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34540._x000D_
_x000D_
Allows spaces in postgres table names._x000D_
","C 0000465",1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34555._x000D_
_x000D_
`SerializedAttributeTest` appears to leak attribute decorations triggered by [this line](https://github.com/rails/rails/blob/00638f31d1f5c914bac32c5f00cb0e0693274b99/activerecord/test/cases/serialized_attribute_test.rb#L17) when placed in the test's teardown block. This makes it so the next test that uses an instance of `Topic` is unable to cast its time attributes properly because `Time.zone` is nil by default in the AR test suite._x000D_
","C 0000466",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"### Summary_x000D_
I stumbled upon this error while trying to make a basic.  _x000D_
_x000D_
```_x000D_
2.3.4 :008 > ActiveRecord::Base.establish_connection(                                                                                          _x000D_
2.3.4 :009 >       ""adapter""  => ""sqlite3"",                                                                                                    _x000D_
2.3.4 :010 >       ""database"" => ""path/to/dbfile""                                                                                              _x000D_
2.3.4 :011?>     )       _x000D_
```_x000D_
And it gave out a:_x000D_
```_x000D_
ArgumentError: wrong number of arguments (given 1, expected 2)                                                                                                                                  _x000D_
        from /Users/sergio/.rvm/rubies/ruby-2.3.4/lib/ruby/site_ruby/2.3.0/rubygems/errors.rb:28:in `initialize'                                                                                _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:203:in `exception'                                  _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:203:in `raise'                                      _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:203:in `rescue in spec'                             _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:190:in `spec'                                       _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/abstract/connection_pool.rb:950:in `establish_connection'                       _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_handling.rb:60:in `establish_connection'                                                 _x000D_
        from (irb):21                                                                                                                                                                           _x000D_
        from /Users/sergio/.rvm/rubies/ruby-2.3.4/bin/irb:11:in `<main>'                                                                                  _x000D_
```_x000D_
_x000D_
It seems that I was missing a dependency (sqlite3 _sigh_) , and Gem `MissingSpecError` has some problems here in initialisation -- it requires 2 arguments . _x000D_
_x000D_
I replicated the offending line:_x000D_
```_x000D_
(byebug) raise e.class, ""Hello"", e.backtrace_x000D_
*** ArgumentError Exception: wrong number of arguments (given 1, expected 2)_x000D_
_x000D_
nil_x000D_
```_x000D_
_x000D_
_x000D_
It seems like `LoadError` also catches `MissingSpecError`. The last one requires 2 arguments, and fails to provide a meaningful error message. -- http://ruby-doc.org/stdlib-2.4.0_preview1/libdoc/rubygems/rdoc/Gem/MissingSpecError.html_x000D_
_x000D_
In this PR we would be casting that error to a `LoadError` instead when rescuing and re-raising a `MissingSpecError` (since we would need more complex arguments)  _x000D_
_x000D_
The alternative would be to create some convoluted logic for handling these 2 types of exceptions","C 0000467",0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0
"### Summary_x000D_
I stumbled upon this error while trying to make a basic.  _x000D_
_x000D_
```_x000D_
2.3.4 :008 > ActiveRecord::Base.establish_connection(                                                                                          _x000D_
2.3.4 :009 >       ""adapter""  => ""sqlite3"",                                                                                                    _x000D_
2.3.4 :010 >       ""database"" => ""path/to/dbfile""                                                                                              _x000D_
2.3.4 :011?>     )       _x000D_
```_x000D_
And it gave out a:_x000D_
```_x000D_
ArgumentError: wrong number of arguments (given 1, expected 2)                                                                                                                                  _x000D_
        from /Users/sergio/.rvm/rubies/ruby-2.3.4/lib/ruby/site_ruby/2.3.0/rubygems/errors.rb:28:in `initialize'                                                                                _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:203:in `exception'                                  _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:203:in `raise'                                      _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:203:in `rescue in spec'                             _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:190:in `spec'                                       _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/abstract/connection_pool.rb:950:in `establish_connection'                       _x000D_
        from /Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/active_record/connection_handling.rb:60:in `establish_connection'                                                 _x000D_
        from (irb):21                                                                                                                                                                           _x000D_
        from /Users/sergio/.rvm/rubies/ruby-2.3.4/bin/irb:11:in `<main>'                                                                                  _x000D_
```_x000D_
_x000D_
It seems that I was missing a dependency (sqlite3 _sigh_) , and Gem MissingSpecError has some problems here in initialisation with this Ruby syntax. _x000D_
_x000D_
I replicated the offending line:_x000D_
```_x000D_
(byebug) raise e.class, ""Hello"", e.backtrace_x000D_
*** ArgumentError Exception: wrong number of arguments (given 1, expected 2)_x000D_
_x000D_
nil_x000D_
```_x000D_
Just like my initial error._x000D_
and again with the Ruby `.new` object syntax _x000D_
```_x000D_
(byebug) raise e.class.new(""Hello"", e.backtrace)_x000D_
*** Gem::MissingSpecError Exception: Could not find 'Hello' ([""/Users/sergio/.rvm/rubies/ruby-2.3.4/lib/ruby/site_ruby/2.3.0/rubygems/dependency.rb:308:in `to_specs'"", ""/Users/sergio/.rvm/rubies/ruby-2.3.4/lib/ruby/site_ruby/2.3.0/rubygems/dependency.rb:320:in `to_spec'"", ""/Users/sergio/.rvm/rubies/ruby-2.3.4/lib/ruby/site_ruby/2.3.0/rubygems/core_ext/kernel_gem.rb:65:in `gem'"", ""/Users/sergio/.rvm/gems/ruby-2.3.4/gems/activerecord-5.2.1.1/lib/a_x000D_
_x000D_
..._x000D_
```_x000D_
Which looks correct. _x000D_
_x000D_
Could this be a backward compatibility issue? _x000D_
Yet, this was made in Ruby 2.3 and according to rails_x000D_
`Rails 5 requires Ruby 2.2.2 or newer.`_x000D_
So it should be in the clear._x000D_
_x000D_
Disc: This might have been a beginners mistake. _x000D_
_x000D_
_x000D_
##### EDIT_x000D_
Tried with ruby 2.4 and activerecord-5.2.1.1_x000D_
Same result _x000D_
```_x000D_
2.4.1 :007 > require 'active_record'_x000D_
 => true _x000D_
2.4.1 :008 > ActiveRecord::Base.establish_connection(_x000D_
2.4.1 :009 >       ""adapter""  => ""sqlite3"",_x000D_
2.4.1 :010 >       ""database"" => ""path/to/dbfile""_x000D_
2.4.1 :011?>     )_x000D_
ArgumentError: wrong number of arguments (given 1, expected 2)_x000D_
        from /Users/sergio/.rvm/rubies/ruby-2.4.1/lib/ruby/site_ruby/2.4.0/rubygems/errors.rb:28:in `initialize'_x000D_
        from /Users/sergio/.rvm/gems/ruby-2.4.1/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:203:in `exception'_x000D_
        from /Users/sergio/.rvm/gems/ruby-2.4.1/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:203:in `raise'_x000D_
        from /Users/sergio/.rvm/gems/ruby-2.4.1/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:203:in `rescue in spec'_x000D_
        from /Users/sergio/.rvm/gems/ruby-2.4.1/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/connection_specification.rb:190:in `spec'_x000D_
        from /Users/sergio/.rvm/gems/ruby-2.4.1/gems/activerecord-5.2.1.1/lib/active_record/connection_adapters/abstract/connection_pool.rb:950:in `establish_connection'_x000D_
        from /Users/sergio/.rvm/gems/ruby-2.4.1/gems/activerecord-5.2.1.1/lib/active_record/connection_handling.rb:60:in `establish_connection'_x000D_
        from (irb):8_x000D_
        from /Users/sergio/.rvm/rubies/ruby-2.4.1/bin/irb:11:in `<main>'_x000D_
2.4.1 :012 > _x000D_
```_x000D_
_x000D_
_x000D_
_x000D_
","C 0000468",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"When distributed over multiple logger calls the lines can become intermixed with other log statements. Combining them into a single logger call makes sure they always get logged together.","C 0000469",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"If the same block is included multiple times, we no longer raise an exception or overwrite the included block instance variable._x000D_
_x000D_
Fixes #14802.","C 0000470",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"### Summary_x000D_
_x000D_
I fixed lack of modification the following commit._x000D_
https://github.com/rails/rails/commit/54ed6ad8d7468dc3a0b690e629c7c18497552eb8_x000D_
_x000D_
In rails 5.2.1.1, when I uploaded object using `#attach` to amazon s3, `ArgumentError: unknown keyword: content_type` was occurred.","C 0000471",0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0
"This prevents the array from being dumped as a DRbObject so we can reduce_x000D_
communication with the server._x000D_
_x000D_
In DRb, if `Marshal.dump` fails, `Marshal.dump` is executed again after converting the object to `DRbObject`. This also possible to reduce the execution of `Marshal.dump` by converting to a format that can be marshalized in advance using `DRbObject`._x000D_
This is the same approach to Action Pack's parallel test. Ref: 5751b7ea58d7cf259dda30fb42fff51fc6ae93d5_x000D_
_x000D_
","C 0000472",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Currently, ASt build is broken. This PR fixes them. _x000D_
https://travis-ci.org/rails/rails/jobs/460454477 ","C 0000473",0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0
"### Summary_x000D_
_x000D_
fix the merge conflict in `Gemfile.lock`_x000D_
_x000D_
### Other Information_x000D_
_x000D_
","C 0000474",1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Just a small typo in Active Storage docs. 😃 _x000D_
","C 0000475",0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This adds a new method `or` to WhereChain. This can be used to more easily write WHERE clauses that use the OR operator, using familiar hash/array/string arguments that `where` takes. But unlike the existing ActiveRecord::Relation `or`, this will not require repeating the scope._x000D_
_x000D_
For example, where you previously would have had to go with one of these options:_x000D_
```ruby_x000D_
Post.where(title: 'Goodbye').or(Post.where(active: true))_x000D_
Post.where(""title = 'Goodbye' OR active = true"")_x000D_
```_x000D_
Now you can define the two (or more) operands using the same types of arguments passed to `where`:_x000D_
```ruby_x000D_
Post.where.or(""active = true"", [""created_at > ?"", Date.today], { title: 'Goodbye' })_x000D_
```_x000D_
This is good for simple ""OR"" scenarios, where repeating the starting scope would make things messier. If the conditions that need to be combined with ""OR"" are more complex, then defining two scopes and combining them using the existing `or` method is probably the better option._x000D_
_x000D_
Making this a method on WhereChain ought to alleviate the concerns in #9052 about how a more flexible `or` method would affect what comes before or after it in a method chain. In this implementation, the ""OR"" operator only gets applied to the conditions included in its own arguments._x000D_
_x000D_
This new method is currently written to use the existing ActiveRecord `or` method under the hood, but I'm open to alternatives._x000D_
","C 0000476",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Before this patch, singular and collection associations_x000D_
had different implementations of the #find_target method._x000D_
This patch reuses the code properly through extending the low level_x000D_
methods._x000D_
_x000D_
","C 0000477",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34532._x000D_
_x000D_
Clarifies that all `ActiveRecord` scope bodies must return an `ActiveRecord::Relation` or `nil`.","C 0000478",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"First of all, let me explain my use case: I have a heavy JSONB DB column which I want to exclude from most of the queries, that's why I've decided to use [ignored_columns](https://api.rubyonrails.org/classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-ignored_column) feature. This column is populated via DB trigger, and sometimes I do want to have it loaded, in such cases I explicitly load it (for instance, using `.select(""*"")`). Also, I have a custom `ActiveRecord::Type` to make interactions with the underlying JSON easier. The problem is that with this combination the value I get when I call that accessor is a _value from the DB_, custom type is completely ignored._x000D_
_x000D_
Here is a simplier example with a string instead of JSON:_x000D_
_x000D_
```ruby_x000D_
class DeveloperName < ActiveRecord::Type::String_x000D_
  def deserialize(value)_x000D_
    ""Developer: #{value}""_x000D_
  end_x000D_
end_x000D_
_x000D_
class AttributedDeveloper < ActiveRecord::Base_x000D_
  self.table_name = ""developers""_x000D_
_x000D_
  attribute :name, DeveloperName.new_x000D_
_x000D_
  self.ignored_columns += [""name""]_x000D_
end_x000D_
_x000D_
developer = AttributedDeveloper.create_x000D_
developer.update_column :name, ""name""_x000D_
_x000D_
loaded_developer = AttributedDeveloper.where(id: developer.id).select(""*"").first_x000D_
puts loaded_developer.name # should be ""Developer: name"" but it's just ""name""_x000D_
```_x000D_
_x000D_
Here is a reason why it happens:_x000D_
1. `ignored_columns` removes the column from the column_hash_x000D_
2. `#select_all` can fill `column_types` for the result set when DB provides the types (only PostgreSQL does it, so other tests for other DBs cannot reproduce the problem)_x000D_
3. when `#find_by_sql` prepares the `ActiveRecord::Result`, it uses `column_hash` to remove all the types coming from the DB because we know how to handle them_x000D_
4. Ignored columns are not in the `column_hash` so `#find_by_sql` defines the accessor method with the DB-provided type and custom `attribute` is ignored_x000D_
_x000D_
My solution is to remove `attributes_to_define_after_schema_loads` keys from the `column_types` along with `column_hash` keys because having the custom attributes means that we do know how to deserialize this field.","C 0000479",0,0,0,0,0,1,0,1,0,0,0,0,0,0,2,0,0,0,0
"### Summary_x000D_
_x000D_
`ActiveRecord::Base#cache_key` will now return a stable key without a timestamp._x000D_
So we should use `cache_key_with_version` for the example in `1.7 Low-Level Caching`._x000D_
_x000D_
Sorry, this is a missing fix for [my pull request I submitted before](https://github.com/rails/rails/pull/34363)._x000D_
","C 0000480",0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"I've updated the Rails Guide on Testing to reflect testing emails that have been delivered with the `deliver_later` method. The example provided in the original guide does not take that that into account or show the more recent assertions that can be used in functional and system tests._x000D_
_x000D_
This is a corrected PR originally submitted #34502 ","C 0000481",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"### Summary_x000D_
This pull request executes `test_composite_primary_key_out_of_order` with sqlite3 adapter._x000D_
_x000D_
https://www.sqlite.org/releaselog/3_7_16.html_x000D_
_x000D_
> 9 Enhance the PRAGMA table_info command so that the ""pk"" column is an increasing integer to show the order of columns in the primary key._x000D_
_x000D_
Rails 6 supports SQLite 3.8 then we can remove this skip condition._x000D_
_x000D_
","C 0000482",0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0
"Fixes #34506 - When running `exec_query` with INSERT (or other write commands), MySQL returns `ActiveRecord::Result`","C 0000483",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"### Summary_x000D_
_x000D_
This pull request bumps the minimum version of PostgreSQL to 9.3, dropping PostgreSQL 9.1 and 9.2 support._x000D_
_x000D_
https://www.postgresql.org/support/versioning/_x000D_
_x000D_
- 9.1 EOLed on September 2016._x000D_
- 9.2 EOLed on September 2017._x000D_
_x000D_
9.3 is also not supported since Nov 8, 2018.  https://www.postgresql.org/about/news/1905/_x000D_
I think it may be a little bit early to drop PostgreSQL 9.3 yet._x000D_
_x000D_
Here are other changes included in this pull request:_x000D_
* Deprecated `supports_ranges?` since no other databases support range data type_x000D_
_x000D_
* Add `supports_materialized_views?` to abstract adapter_x000D_
Materialized views itself is supported by other databases, other connection adapters may support them_x000D_
_x000D_
* Drop CI against PostgreSQL 9.2_x000D_
_x000D_
","C 0000484",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"When the `Duration` class was introduced in 276c9f29, the `parts` were_x000D_
represented as an array of arrays_x000D_
(for example `[[:seconds, 5], [:days, 3], [:seconds, 7]]`)._x000D_
At that time the `reduce` in `#inspect` made sense,_x000D_
since we would need to get the totals for each part_x000D_
(the example would become `{ seconds: 12, days: 3 }`)._x000D_
_x000D_
With the current version of `Duration` we call `to_h` on the `parts`_x000D_
[immediately on initialize](https://github.com/rails/rails/blob/b2eb1d1c55a59fee1e6c4cba7030d8ceb524267c/activesupport/lib/active_support/duration.rb#L211) (see 32f215c3 for details on why we do that),_x000D_
so now the `reduce` doesn't seem to be doing_x000D_
anything meaningful._x000D_
_x000D_
(I was looking at this method because I was pondering https://github.com/rails/rails/issues/34369)","C 0000485",0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,0,0
"Updating the Testing Guide to Reflect Emails Enqueued With ActiveJob._x000D_
_x000D_
I've updated the Rails Guide on Testing to reflect testing emails that have been delivered with the `deliver_later` method. The example provided in the original guide does not take that that into account or show the more recent assertions that can be used in functional and system tests._x000D_
_x000D_
This particular PR reflects the current 5.2 functionality. A separate PR for 6.0 has been submitted with updated documentation as well.","C 0000486",0,2,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34514_x000D_
_x000D_
The pluralized method created to access each enum now raises an error when attempting to modify the original._x000D_
_x000D_
Problem being addresed:_x000D_
```ruby_x000D_
expected_copy = Model.states # {'foo'=>0, 'bar'=>1, 'baz'=>2}_x000D_
_x000D_
# All the application would be silently affected with the following lines_x000D_
expected_copy.delete('foo') # previously deleted foo from Model.states_x000D_
expected_copy['bad_key'] = 10 # previously added a new key on Model.states_x000D_
```_x000D_
","C 0000487",1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34514_x000D_
_x000D_
The pluralized method created to access each enum now returns a copy of `enum_values`, preventing modifications on the original. _x000D_
_x000D_
Problem being addresed:_x000D_
```ruby_x000D_
expected_copy = Model.states # {'foo'=>0, 'bar'=>1, 'baz'=>2}_x000D_
_x000D_
# All the application would be silently affected with the following lines_x000D_
expected_copy.delete('foo') # previously deleted foo from Model.states_x000D_
expected_copy['bad_key'] = 10 # previously added a new key on Model.states_x000D_
```_x000D_
_x000D_
","C 0000488",0,0,0,0,1,0,0,0,0,0,0,1,0,0,3,0,0,0,0
"### Summary_x000D_
_x000D_
Change the homepage link to https.","C 0000489",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,0,0
"Adds ? to README.md to make title a question.","C 0000490",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0
"### Summary_x000D_
This patch improves readability by using `direction`  instead of `rtl`flag, as [CSS does](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)._x000D_
_x000D_
I have also took the chance to:_x000D_
* Use `.to_sym` when getting direction's `env_value` as it could be a String._x000D_
* Removed the call to `FileUtils.rm` as `FileUtils.mv` [already overwrites](https://ruby-doc.org/stdlib-2.5.1/libdoc/fileutils/rdoc/FileUtils.html#method-c-mv) the assets if it exists _x000D_
_x000D_
### Other Information_x000D_
Continues: #34486_x000D_
Gives credit to @paracycle_x000D_
_x000D_
r? @rafaelfranca ","C 0000491",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0
"We use this at GH but I'm not 100% sure whether others will find this useful. Thoughts?_x000D_
_x000D_
The other open question I have is whether the `write_query?` should be defined by ""is a query that writes"" or ""is a query that is not reading"" (ie not select, etc). For now I chose some common write queries to demonstrate the goals of this feature but I'd love input into what @rafaelfranca @tenderlove and @matthewd think about this._x000D_
_x000D_
---_x000D_
_x000D_
This PR adds the ability to block writes to a database even if the_x000D_
database user is able to write (ie the database is a primary and not a_x000D_
replica)._x000D_
_x000D_
This is useful for a few reasons: 1) when converting your database from_x000D_
a single db to a primary/replica setup - you can fix all the writes on_x000D_
reads early on, 2) when we implement automatic database switching or_x000D_
when an app is manually switching connections this feature can be used_x000D_
to ensure reads are reading and writes are writing. We want to make sure_x000D_
we raise if we ever try to write in read mode, regardless of database_x000D_
type._x000D_
_x000D_
This should be used in conjunction with `connected_to` in write mode._x000D_
For example:_x000D_
_x000D_
```ruby_x000D_
ActiveRecord::Base.connected_to(role: :writing) do_x000D_
  Dog.connection.while_blocking_writes do_x000D_
    Dog.create! # will raise because we're blocking writes_x000D_
  end_x000D_
end_x000D_
_x000D_
ActiveRecord::Base.connected_to(role: :reading) do_x000D_
  Dog.connection.while_blocking_writes do_x000D_
    Dog.first # will not raise because we're not writing_x000D_
  end_x000D_
end_x000D_
```","C 0000492",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"* See https://github.com/rails/rails/pull/29092#issuecomment-437572543_x000D_
* After introducing cache versioning, even with cache versioning off_x000D_
  there's a performance regression when passing an Active Record_x000D_
  relation to cache_x000D_
* This happens in ActiveSupport::Cache inside `normalize_version`_x000D_
* This method would check if the relation responds to cache_version_x000D_
  and if not, would recrusively normalize it with `to_a`_x000D_
* This would lead to the relation being retrieved from database and_x000D_
  enumerated, causing the performance regression_x000D_
* This fix simply adds `cache_version` returning `nil` to Active Record_x000D_
  relations_x000D_
* This is a temporary stopgap, until relation cache versioning is_x000D_
  implemented. See https://github.com/rails/rails/pull/34378","C 0000493",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"…nqueued with ActiveJobs._x000D_
_x000D_
### Summary_x000D_
I've updated the Rails Guide on Testing to reflect testing emails that have been delivered with the `deliver_later` method. The example provided in the original guide does not take that that into account or show the more recent assertions that can be used in functional and system tests._x000D_
_x000D_
### Other Information_x000D_
This is my first PR, so please let me know how I could make this better!","C 0000494",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Fixes #34493.","C 0000495",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"### Summary_x000D_
_x000D_
Expand the documentation for `slice!` method in order to make explicit what it really does._x000D_
_x000D_
Taking ActiveSuport::Multibyte as example._x000D_
_x000D_
https://github.com/rails/rails/blob/4800fd072f2a8349e92cf9386da4b66de712a669/activesupport/lib/active_support/multibyte/chars.rb#L96 ","C 0000496",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The connection handler was using the RuntimeRegistry which kind of_x000D_
implies it's a per thread registry. But it's actually per fiber._x000D_
_x000D_
If you have an application that uses fibers and you're using multiple_x000D_
databases, when you switch the connection handler to swap connections_x000D_
new fibers running on the same thread used to get a different connection_x000D_
id. This PR changes the code to actually use a thread so that we get_x000D_
the same connection._x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/30047_x000D_
_x000D_
cc/ @tenderlove @arthurnn @matthewd @rafaelfranca ","C 0000497",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0
"### Summary_x000D_
_x000D_
Fixes https://github.com/rails/rails/issues/34479._x000D_
_x000D_
Disallows multiple uses of `root` within the same routing context without `as:`._x000D_
_x000D_
The referenced issue maps the first `root` to `/form/:foo`, and a second one to `/`. When calling `root_path` in the template rendered by `/`, Rails knows to call the first root path (because it is the one with the name). The second root is not used, and can't be referenced by a named route helper because it doesn't have a name._x000D_
_x000D_
This whole situation can be avoided by not assuming a root route should be unnamed if one already exists._x000D_
_x000D_
r? @rafaelfranca ","C 0000498",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0
"### Summary_x000D_
_x000D_
Fix typo in `development_dependencies_install.md`: everyting -> everything","C 0000499",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"Currently the query cache is only aware of one handler so once we added_x000D_
multiple databases switching on the handler we broke query cache for_x000D_
those reading connections._x000D_
_x000D_
While #34054 is the proper fix, that fix is not straight forward and I_x000D_
want to make sure that the query cache isn't just broken for all other_x000D_
connections not in the main handler._x000D_
_x000D_
cc/ @rafaelfranca @matthewd @tenderlove ","C 0000500",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"Sorry, but this isn’t an acceptable fix for the referenced issue. It’s a feature that a rich-text attribute isn’t backed by a text column on the original model’s table.","C 0000501",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks, @georgeclaghorn for taking a look. Even I had a little doubt in my mind about the fix because to fix the test cases I had to add migration and make them database column's on the model and documentation here(https://edgeguides.rubyonrails.org/action_text_overview.html#examples) did not mention anything regarding `has_rich_text` isn’t required to be backed by a text column on the original model’s table._x000D_
_x000D_
But I learned a lot in debugging the issue 🎉 😄 _x000D_
_x000D_
Another way to fix this would be by making changes in the dirty tracking('attribute.changed?') for the rich text field.","C 0000502",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0
"Thanks!","C 0000503",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"I can live with a slightly ugly deprecation warning since they have such a short life. It’s better to keep the history for a deprecation warning I find.","C 0000504",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0
"> I can live with a slightly ugly deprecation warning since they have such a short life._x000D_
_x000D_
That is a valid point. Thanks.","C 0000505",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0
"There is no reason to mention about all of the content-type, but it is worth especially if `application/json` to me.","C 0000506",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Ohh.. sorry I forgot to add [skip ci] to commit message._x000D_
_x000D_
@kamipo _x000D_
Thank you review._x000D_
I made the following corrections._x000D_
_x000D_
* Minimized explanation_x000D_
* Added `: json` and`: xml` example to TIP_x000D_
_x000D_
Tell me If OK with you._x000D_
Why is `application / json` particularly worthwhile?_x000D_
","C 0000507",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"> Why is `application / json` particularly worthwhile?_x000D_
_x000D_
Since you removed that in the first commit 598a289638d0d7b9000f77b1838afc525eaa03d8, in other words, I meant there is no reason to remove the `application/json` example at least._x000D_
_x000D_
This looks cosmetic to me._x000D_
We generally do not accept a cosmetic change._x000D_
What is worth of this change more than before?_x000D_
_x000D_
https://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code_x000D_
_x000D_
> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted (read more about [our rationales behind this decision](https://github.com/rails/rails/pull/13771#issuecomment-32746700))._x000D_
","C 0000508",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"@kamipo _x000D_
Thank you, I understood._x000D_
The reason for this change is as follows._x000D_
_x000D_
In original sentences default 'of MIME content-type is described as `text / html` or` application / json `or` application / xml`, but actually many content-types are set._x000D_
_x000D_
I suggested updating because I thought that confusing developers who read guide.","C 0000509",0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"But if you think so on the committer it is okay to close it.","C 0000510",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"This PR will close.","C 0000511",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"Can you please add these assertions to the first test (named “attaching existing blobs to an existing record”) and remove this one?","C 0000512",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Ditto. Let’s fold these assertions into the first test, named “attaching an existing blob to an existing record.”","C 0000513",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0
"@georgeclaghorn - Merged both test assertions as suggested ✅ ","C 0000514",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Thank you!","C 0000515",2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Does the method signature in this error message need updating?","C 0000516",0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"How is the virtual_path built here, like it was with Path.build in decorate? I don’t see how decorate can be removed yet.","C 0000517",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"1. [`find_templates` uses `Path.build` and passes that to `query`](https://github.com/rails/rails/blob/0e13941dbe9c4840175e5c6f5b2c3f572249a4ec/actionview/lib/action_view/template/resolver.rb#L210-L213)_x000D_
2. [`query` passes the virtual path to the template constructor](https://github.com/rails/rails/blob/0e13941dbe9c4840175e5c6f5b2c3f572249a4ec/actionview/lib/action_view/template/resolver.rb#L222-L228)","C 0000518",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"ah yep, I'll fix that","C 0000519",0,0,0,0,1,0,1,0,0,0,0,0,0,3,0,0,0,0,0
"Ah, thanks! I was looking for the build_path method (which uses Path.build) and found no occurrences, so I got confused. Seems like we could kill that build_path private method. I’ll take a look later unless you want to look into it.","C 0000520",0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0
"I think this needs to be_x000D_
_x000D_
``` suggestion_x000D_
        find_templates(name, prefix, partial, details, false, locals)_x000D_
```","C 0000521",1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0
"You're totally right.  I'll rm that method.  Thank you!","C 0000522",1,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"Should we handle the case were people to marshal load an object created before this change?","C 0000523",0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0
"I don't think so.  I think the reason we introduced the marshal stuff is for parallel testing ([according to this comment](https://github.com/rails/rails/blob/082130d1d43620ca29c2f2f169a5059fa0065a8c/actionview/lib/action_view/template.rb#L265-L267)).  Those shouldn't stick around.","C 0000524",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"👍 ","C 0000525",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"I updated this PR to include a commit that deletes the `decorate` method and makes the `Template` object a read-only object.","C 0000526",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"I’m guessing what’s identifier and short_identifier here is what’s path(?) and virtual_path elsewhere in Action View. Might be nice if the naming was unified for our internals. Though that’s another PR.","C 0000527",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"I think they are a little different. `virtual_path` is relative to the view directory (ex. `app/views`), where `short_identifier` is relative to the app root (or from `/` if from a gem outside). I think it's also possible for identifier not to be from the FS if the template comes from some other source._x000D_
_x000D_
I do agree that it does feel like something here could be unified though!","C 0000528",0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
"> Do we print the inspect output in logs or the log subscriber? Could be good to double check what a rendering log output looks like._x000D_
_x000D_
👍 Good idea. Logging looks unchanged in my test app. I also tested an exception from a view and it looked normal._x000D_
_x000D_
<img width=""691"" alt=""screen shot 2019-02-25 at 14 33 30"" src=""https://user-images.githubusercontent.com/131752/53373626-db1bd000-390a-11e9-90db-4374ed4e90cf.png"">_x000D_
","C 0000529",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Gotcha! Thanks for checking both.","C 0000530",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Why should we do deprecation here in HTML and in Text? They’re both marked nodoc.","C 0000531",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"tbh, I think we can remove them.  The problem is that these are *supposed* to quack the same as instances of `Template`.  I really don't think people are calling `formats` on anything but instances of `Template`, but I figured I'd add the deprecation warning since these are ""duck typing buddies"" with `Template`._x000D_
_x000D_
Actually I think these should probably share inheritance hierarchy with `Template`, but that's a later patch.","C 0000532",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"(we were definitely calling `formats` on Text / HTML instances, and the deprecation warning helped me track / fix them)","C 0000533",0,1,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0
"@tenderlove Method `formats` was renamed to `format`. Can I update the test description here to `format`?","C 0000534",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Changed here #35406. ","C 0000535",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"❤️","C 0000536",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"```suggestion_x000D_
    def formats=(_)_x000D_
```","C 0000537",0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Are you thinking that eventually formats on the template will just be format? (I’m a little confused as to why it’s an array today, I guess.)","C 0000538",0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0
"@kaspth https://github.com/rails/rails/pull/35406","C 0000539",1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I didn't add leading parenthesis to the sqlite3 test because sqlite3 didn't consider it valid syntax.","C 0000540",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"@matthewd I fixed this - memcache store tests are running on Buildkite.  https://buildkite.com/rails/rails/builds/59125#961452d7-452f-4d8b-ae40-300ad492dc45_x000D_
<hr/>_x000D_
Edited:_x000D_
_x000D_
Oh, there is still something to fix:_x000D_
```bash_x000D_
W, [2019-02-26T22:09:35.905507 #16]  WARN -- : localhost:11211 failed (count: 0) Errno::EADDRNOTAVAIL: Cannot assign requested address - connect(2) for ""localhost"" port 11211_x000D_
```_x000D_
Fixed: https://buildkite.com/rails/rails/builds/59128#09e12043-28c3-417e-8021-bda18a92de60","C 0000541",1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
"🙇🏻‍♂️:heart:","C 0000542",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0
"Closing since we don't accept backport PRs, only if asked.","C 0000543",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Hmm, will investigate the test failures in the next few days and report back.","C 0000544",0,0,0,0,0,0,0,1,0,0,0,0,1,0,2,0,0,1,0
"_Sigh!_ The app's `mailers` are eager loaded in production, so they subclass `ActionMailer::Base` before `ActiveSupport.on_load(:after_initialize)`, and hence before being configured (in this PR)._x000D_
_x000D_
The`ActionMailer` design is in general highly problematic. There's probably a reason for it, but presumably it would make a lot more sense if it just read the config on demand (when creating mail) rather than differing in behavior when eager loading is enabled. ","C 0000545",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Yeah, we can't change the way configurations are loaded in the framework._x000D_
_x000D_
The correct way too add deliveries methods is using:_x000D_
_x000D_
```_x000D_
class Railtie < ::Rails::Railtie_x000D_
  initializer ""foo_mail.register_delivery_method"" do_x000D_
    ActiveSupport.on_load(:action_mailer) do_x000D_
      add_delivery_method :foo, FooMailer_x000D_
    end_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
even if you always use this way it is not possible to set the `config.action_mailer.foo_settings`?","C 0000546",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"Unfortunately, no it doesn't work, that will raise a missing method error because `add_delivery_method` is set to be called once `ActionMailer::Base` is loaded, which is too late._x000D_
_x000D_
Basically it's a catch 22, we need the ActionMailer loaded to add a delivery method, but we need the delivery method added before hand so the delivery method can be configured as ActionMailer is loaded._x000D_
_x000D_
The approach I've taken in this PR is likely too major of a change._x000D_
_x000D_
The alternative is to add `method_missing` method that matches `(.+)_settings=` and stores the hash, even though the delivery method is not available yet. It's a lot less invasive than this approach.","C 0000547",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Just to clarify the issue is eager loading. It *will* work in development because the gems initializer and hence its `on_load(:action_mailer)` hook gets called before the config is copied. However, in production (eager loading) ActionMailer is loaded before the gems initializer is called so the hooks get called in the reverse order and an error is raised._x000D_
_x000D_
**EDIT**: My apologies, this is misleading, eager loading only comes into play when using this PR.","C 0000548",0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
"In eager load `ActionMailer` is not loaded before the gems initializer. It only happens in the application Finisher so it is after all railties initializers are run._x000D_
_x000D_
Can you create an example application reproducing the issue? It would be good if you don't use any gem and instead build a rails plugin inline because the problem might be in the gem you are using.","C 0000549",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,2,0,0
"Closing this PR as the approach being taken is too major of a change e.g. disabling eager loading of `app/mailers`._x000D_
_x000D_
However, I've opened https://github.com/rails/rails/issues/35416 to document the issue and will try my hand at a less intrusive PR._x000D_
_x000D_
@rafaelfranca An example application (and a fake `foomailer` gem) reproducing the issue is available in the issue mentioned above.","C 0000550",1,0,0,1,3,0,0,0,0,0,1,0,0,0,1,0,1,1,0
"Thanks @kamipo you are super fast and active in merging PR's. Thanks a ton.","C 0000551",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"Thanks for the PR, but it is fine as is.","C 0000552",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"Thanks, but this is already covered by `lib/active_support.rb`, which should always be required before any individual files within the gem.","C 0000553",2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Thank you review and merge.","C 0000554",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0
"@dhh: I think you need to add extra 2 spaces here. The example structure is broken here https://github.com/rails/rails/blob/negative-enum-scope/activerecord/CHANGELOG.md","C 0000555",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0
"Also, I don't know if it matters or not, but we should inherit class `Post` from `ApplicationRecord` instead here","C 0000556",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0
"I'll do the indent, but ApplicationRecord is really a Rails concern, not an Active Record concern. Maybe a fine point of difference, but it's there.","C 0000557",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"@dhh : I think we should also add `post.not_active?` like we already have `post.active?`. What do you think?","C 0000558",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Not needed. You can always negate a predicate method in a variety of ways with `!`, `unless`, and a million other ways. Not so with a scope, thus the need for the help there.","C 0000559",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"What Inflector does the constantize and safe_constantize methods end up referring to? Zeitwerk’s or Active Support’s? I’d think the latter, so I’m confused why this is needed._x000D_
_x000D_
Also sounds like Zeitwerk should have a default_inflector akin to its logger.","C 0000560",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Correct, in this file `Inflector` is referring to the ActiveSupport `Inflector`, and everything in this file is all well and good. This setting is so that https://github.com/fxn/zeitwerk/blob/ccd4b76647e9ca90f0811b7b0f98782b07c4739a/lib/zeitwerk/loader.rb#L341 uses the same inflections this module would use to populate the constants that zeitwerk then autoloads. In the test I added, if we didn't make this change, zeitwerk would populate `::GraphqlController` instead of `::GraphQLController`. ","C 0000561",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Oh! This is an overlook, totally forgot about the inflector!_x000D_
_x000D_
Just a heads up, I'll write back a bit later. Please note that the method called by Zeitwerk needs to have arity 2, from memory this probably needs a wrapper._x000D_
_x000D_
@kaspth you can't really have a global default inflector setter, it is fundamental that each instance has total control over its inflector. When you ship a gem, you cannot get the inflector changed, your code depends on the inflector you configure. Logging is a bit different, because the only purpose is to debug problems, gems are expected to ship with the default `nil` logger._x000D_
_x000D_
Will write back later!","C 0000562",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"> Please note that the method called by Zeitwerk needs to have arity 2, from memory this probably needs a wrapper._x000D_
_x000D_
Ah, oops, you're totally right. `ActiveSupport::Inflector#camelize` does have airty 2 which is why this worked for me and the tests pass, but the second argument is `uppercase_first_letter` as opposed to the `abspath`. Sounds like we need a `Zeitwerk::ActiveSupportInflector` or a `ActiveSupport::ZeitwerkIntegration::Inflector` wrapper doodad. In which project do you think it should live?","C 0000563",0,0,0,0,1,0,0,0,0,1,2,1,1,0,1,2,1,0,0
"It was easier for me to implement it than to communicate the details, so I fixed this in 39b2a6374b49dba43606b1a806899e49aa055a81 giving of course credit to you too for the work on this patch._x000D_
_x000D_
That was a good catch, thanks!","C 0000564",0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Thanks!","C 0000565",0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,0
"Can you note about that like here? We can drop the workaround if older SQLite3 support is dropped in the future._x000D_
_x000D_
https://github.com/rails/rails/blob/a796de1bd644b54e2c27577319c262af0de56e8f/activerecord/lib/arel/visitors/mysql.rb#L68-L73","C 0000566",1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0
":+1: Make sense. I fixed._x000D_
","C 0000567",1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0
"Passed both Travis(https://travis-ci.org/rails/rails/jobs/497367021) and buildkite(https://buildkite.com/rails/rails/builds/59012#5991b123-d333-45b3-bad2-344eabc789c4)._x000D_
","C 0000568",1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0
"When I run the test from #35372 you can see that the methods go away:_x000D_
_x000D_
```_x000D_
$ be ruby a_controller_test.rb_x000D_
Methods: 349_x000D_
{0=>""Methods: 375""}_x000D_
{1=>""Methods: 361""}_x000D_
{2=>""Methods: 351""}_x000D_
{3=>""Methods: 462""}_x000D_
{4=>""Methods: 533""}_x000D_
{5=>""Methods: 414""}_x000D_
{6=>""Methods: 518""}_x000D_
{7=>""Methods: 448""}_x000D_
{8=>""Methods: 405""}_x000D_
{9=>""Methods: 388""}_x000D_
```_x000D_
_x000D_
The number of methods isn't stable, but it's not growing (it just goes up and down with GC).","C 0000569",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Thanks!","C 0000570",1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
"@tenderlove I think the comment above needs to be updated to talk about the new argument.","C 0000571",0,0,0,3,1,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"CI is broken so I don't think we are ready to relax this version constraint.","C 0000572",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0
"Related: #34799 ","C 0000573",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"Duplicate of #35209.","C 0000574",0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0
"I merged just because this is the getting started guide.","C 0000575",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Thanks for the PR, but it is correct as is._x000D_
_x000D_
https://github.com/rails/rails/blob/b75192845a6aa89b35c857e9f3de443ae1a0fbd5/activerecord/test/cases/associations/has_and_belongs_to_many_associations_test.rb#L460-L469","C 0000576",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Thank you for teaching me","C 0000577",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"```diff_x000D_
diff --git a/activerecord/lib/active_record/relation/calculations.rb b/activerecord/lib/active_record/relation/calculations.rb_x000D_
index 3fb1fdc605..4f9ddf302e 100644_x000D_
--- a/activerecord/lib/active_record/relation/calculations.rb_x000D_
+++ b/activerecord/lib/active_record/relation/calculations.rb_x000D_
@@ -233,11 +233,11 @@ def perform_calculation(operation, column_name)_x000D_
         distinct = distinct_value_x000D_
 _x000D_
         if operation == ""count""_x000D_
-          distinct = select_for_count if distinct_select?(select_for_count)_x000D_
-_x000D_
           column_name ||= select_for_count_x000D_
           if column_name == :all_x000D_
-            if distinct && (group_values.any? || select_values.empty? && order_values.empty?)_x000D_
+            if !distinct_x000D_
+              distinct = distinct_select?(select_for_count) if group_values.empty?_x000D_
+            elsif group_values.any? || select_values.empty? && order_values.empty?_x000D_
               column_name = primary_key_x000D_
             end_x000D_
           elsif distinct_select?(column_name)_x000D_
```","C 0000578",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Can you remove this line in favor of https://github.com/rails/rails/pull/35361#discussion_r259570692?","C 0000579",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This should return 5, since it should be the same result with `Account.select(""DISTINCT accounts.firm_id"").group(""accounts.firm_id"").load.size`.","C 0000580",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Don't use `.to_h`, but just use a hash like here._x000D_
_x000D_
https://github.com/rails/rails/blob/1cf72affe0ac0c7dac557fe463d2153c758bf7af/activerecord/test/cases/calculations_test.rb#L765-L769","C 0000581",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"> Also I think the test cases about `size` shouldn't be on `test/cases/calculations_test.rb` file_x000D_
_x000D_
Yes, just put them in `test/cases/relations_test.rb` for now._x000D_
_x000D_
https://github.com/rails/rails/blob/be442ccd8342baf39e73b01a6fdd38e1a3b15c2c/activerecord/test/cases/relations_test.rb#L957-L973","C 0000582",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0
"Use double quotes._x000D_
_x000D_
https://codeclimate.com/github/rails/rails/pull/35361_x000D_
_x000D_
![image](https://user-images.githubusercontent.com/12642/53363588-36d47080-3980-11e9-86bc-7ca80ea496f9.png)_x000D_
","C 0000583",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"Somehow executing:_x000D_
```ruby_x000D_
Account.select(""DISTINCT accounts.firm_id"").group(""accounts.firm_id"").size_x000D_
# { nil => 1, 1 => 1, 2 => 1, 6 => 2, 9 => 1 }_x000D_
```_x000D_
Now returns the hash. But I agree that it should return the same of: _x000D_
```ruby_x000D_
Account.select(""DISTINCT accounts.firm_id"").group(""accounts.firm_id"").load.size_x000D_
# 5_x000D_
```_x000D_
Should I investigate this for this PR ?_x000D_
_x000D_
","C 0000584",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Woops sorry! :man_facepalming: ","C 0000585",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"Done!","C 0000586",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"There is a weird situation added a test with `includes`:_x000D_
```ruby_x000D_
def test_size_with_eager_loading_and_manual_distinct_select_and_includes_x000D_
  accounts = Account.select(""DISTINCT accounts.firm_id"").includes(:firm).order(""firms.id"")_x000D_
_x000D_
  assert_queries(1) { assert_equal 5, accounts.size }_x000D_
  assert_queries(1) { assert_equal 5, accounts.load.size }_x000D_
end_x000D_
```_x000D_
It raises:_x000D_
`# ActiveRecord::StatementInvalid: SQLite3::SQLException: near ""DISTINCT"": syntax error`_x000D_
I can investigate further if you want. _x000D_
_x000D_
But this also gets raised when using:_x000D_
```ruby_x000D_
Account.distinct(:credit_limit).select(""DISTINCT accounts.firm_id"").count(:all)_x000D_
# ActiveRecord::StatementInvalid: SQLite3::SQLException: near ""DISTINCT"": syntax error_x000D_
```_x000D_
_x000D_
What do you think about this?","C 0000587",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"Feel free to create another PR.","C 0000588",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"This is an issue for `count` with eager loading._x000D_
I'd prefer to address it in another PR, since it is a little complex than what this PR fixes.","C 0000589",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0
"As an user, I expect `.group.size` (same as `.group.count`) to return an hash. And doing `.load.size` / `to_a.size` would return a collection of the instances of the model and then how many of them there are.","C 0000590",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Originally, `relation.size` behaves fragile, that is a breaking change though._x000D_
_x000D_
```ruby_x000D_
relation = Post.left_joins(:comments).group(:id)_x000D_
relation.size # => return a hash_x000D_
relation.each { |record| puts record.id }_x000D_
relation.size # => return an integer_x000D_
_x000D_
relation = Post.left_joins(:comments).group(:id)_x000D_
relation.count # => return a hash_x000D_
relation.each { |record| puts record.id }_x000D_
relation.count # => return a hash_x000D_
_x000D_
relation = Post.left_joins(:comments).group(:id)_x000D_
relation.length # => return an integer_x000D_
relation.each { |record| puts record.id }_x000D_
relation.length # => return an integer_x000D_
```","C 0000591",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,1,0
"Ok I'll work it in another PR! ","C 0000592",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"But in my opinion `size` and `load.size` should have the same return value the difference should be that when using just `size` if the collection is loaded it will not execute a query but if it isn't it executes a query without loading the collection instances. _x000D_
_x000D_
That they return different values when the collection is loaded and when it isn't is confusing. ","C 0000593",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"This change also affects to `count(:all)`._x000D_
Can you add test case for `count(:all)` as well (e.g. ebc09ed9ad9a04338138739226a1a92c7a2707ee)?","C 0000594",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks for your reply! Totally! I will add more tests cases. ","C 0000595",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0
"Hey @kamipo I added more test cases, as some of them didn't gave the correct original count value when reassigning the `column_name`. _x000D_
_x000D_
So in order to fix the issue and keep the functionality instead of changing the `column_name`, `distinct` is assigned with the `select_for_count` values. _x000D_
_x000D_
I think this fixes the issue with the minor impact. _x000D_
_x000D_
However in terms of code I don't think it's very understandable.  Assigning `distinct` to `select_for_count` but then 4 lines below assign `distinct` to `nil`  when `column_name` isn't `:all` is very confusing. _x000D_
_x000D_
What do you think would be better? _x000D_
_x000D_
Also I think the test cases about `size` shouldn't be on `test/cases/calculations_test.rb` file but inside `test/cases/relation` folder. Do you think that creating a file `test/cases/relation/size_test.rb` there would be a good approach? _x000D_
_x000D_
Thanks! ","C 0000596",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"Done! Thank you so much for your help! This is my first Rails PR :smile:. Is it correct? ","C 0000597",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0
"Thanks! And congrats on your first Rails contribution 🎉 ","C 0000598",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0
"Weird... This test isn't failed locally... I suspect a bug on SQLite3..._x000D_
_x000D_
https://travis-ci.org/rails/rails/jobs/496726410#L1198-L1208","C 0000599",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"It did fail on buildkite as well https://buildkite.com/rails/rails/builds/58981","C 0000600",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"ah... skipped on buildkite as well for now a333ba3f7f24dff3c50c7cf26a2fe2caa748a851.","C 0000601",0,0,0,0,2,0,0,0,0,0,0,0,1,0,4,0,0,0,0
"Can we use `I18n.with_locale` instead?_x000D_
_x000D_
```ruby_x000D_
test ""form with rich text area having placeholder with locale"" do_x000D_
  I18n.with_locale :placeholder do_x000D_
    form_with model: Message.new, scope: :message do |form|_x000D_
      form.rich_text_area :title, placeholder: true_x000D_
    end_x000D_
  end_x000D_
_x000D_
  # ..._x000D_
```","C 0000602",0,0,0,0,0,0,0,0,0,0,2,0,1,0,1,0,0,0,0
"@georgeclaghorn : Yep. Used `I18n.with_locale` instead of `with_locale`. ","C 0000603",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"@georgeclaghorn : Sorry for ping you so much. Is it okay if we extract code for `ActionView::Helpers::Tags::ActionText` and `ActionView::Helpers::FormHelper` in separate files like we have in `ActionView` for text_field, etc?","C 0000604",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"I think it’s fine for them to stay in one file for now.","C 0000605",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Thanks, @abhaynikam! This could use some tests along the lines of the ones [here](https://github.com/rails/rails/blob/49f9dff9b6ba1451d8c85927d5f75327bd2322d9/actionview/test/template/form_helper_test.rb).","C 0000606",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@georgeclaghorn : Added tests. Do we need to add changelog entry for the fix? This is not yet released so I don't think it should be still wanted to confirm.","C 0000607",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"Incrementing the lock version invalidates any other process's optimistic lock, which is the desired outcome: the record no longer looks the same as it did when they loaded it.","C 0000608",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"If so, we need the update not only in `touch_all` but also in `update_counters` and `update_all`.","C 0000609",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"Changed to opposite direction c14e161.","C 0000610",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thank you for the pull request. Duplicate of #22440.","C 0000611",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"@rafaelfranca I'm sorry for this duplicate!","C 0000612",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"This is caused by 311f00116738df175c12cb36bebe79587f88e00b._x000D_
Can you address it in `when Symbol`?_x000D_
_x000D_
```diff_x000D_
diff --git a/activerecord/lib/active_record/relation/query_methods.rb b/activerecord/lib/active_record/relation/query_methods.rb_x000D_
index 3566a57ddc..5563dfb6c9 100644_x000D_
--- a/activerecord/lib/active_record/relation/query_methods.rb_x000D_
+++ b/activerecord/lib/active_record/relation/query_methods.rb_x000D_
@@ -1157,9 +1157,9 @@ def preprocess_order_args(order_args)_x000D_
         order_args.map! do |arg|_x000D_
           case arg_x000D_
           when Symbol_x000D_
-            field = arg.to_s_x000D_
-            arel_column(field) {_x000D_
-              Arel.sql(connection.quote_table_name(field))_x000D_
+            arg = arg.to_s_x000D_
+            arel_column(arg) {_x000D_
+              Arel.sql(connection.quote_table_name(arg))_x000D_
             }.asc_x000D_
           when Hash_x000D_
             arg.map { |field, dir|_x000D_
```","C 0000613",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"@kamipo _x000D_
Thank you review._x000D_
I also changed it because the code that you presented was good.","C 0000614",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"OK._x000D_
I squashed commits into one.","C 0000615",1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks!","C 0000616",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@alkesh26 I merged this by mistake. Please note this affects code changes, [ci skip] should not be added in such cases._x000D_
_x000D_
We should run full CI","C 0000617",1,1,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0
"@vipulnsward sorry I forgot about this change https://github.com/rails/rails/pull/35342/files#diff-0f66ef96762e67b6746a49de6182c1a4R256._x000D_
_x000D_
Will add `[ci skip]` only when my changes are related to documentation fixes. ","C 0000618",0,1,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0
"We only deprecate things that were public API, I don't remember building `ActionView::Base` instances being public API before. Do you have a reason why you are building those instances without using public APIs?","C 0000619",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0
"This removes memoization, which I think we don't want. Please revert this line and only remove the `gsub`.","C 0000620",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I would say this goes against the current test suite's standards. You should be able to run tests on any DB by changing `ARCONN` and using `if` statements to not run tests that don't apply to specific adapters. Attaching a DB also doesn't seem to work in CI. Can you refactor this to use the standard test schema?","C 0000621",2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This only accounts for a single dot, but you can have multiple dots in a table name, eg. `field = :""a.b.c""`","C 0000622",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I undo things to exactly how things were before your fix. `super` just ends up calling `quote_column_name`, which does cache things. I don't mind changing it back if you prefer. Let me know.","C 0000623",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This uses `rpartition`, so it splits from the last dot._x000D_
For your example, the result would be `['a.b', '.', 'c']`","C 0000624",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"Weird, the whole test suite passed on my rails-dev-box. I will not have time to look into it until tomorrow._x000D_
_x000D_
There are plenty of tests that are specific to one adapter like that. I basically copied the `schema_test.rb` file name and basic structure from the postgresql side of things: https://github.com/rails/rails/blob/master/activerecord/test/cases/adapters/postgresql/schema_test.rb, there is also an equivalent file in the mysql side._x000D_
_x000D_
I'm not quite sure what is wrong here to be honest. I work a lot by following examples I find in the project that match my need. Could you show me what you expect?_x000D_
_x000D_
I agree a single set of tests to checks schema's behaviors, with conditions to setup the schema correctly for each databse would be optimal, thats what I do in the gem that found this issue. But I'm not confortable doing a refactor of hundreds of lines (all 3 databases's schema_test files) of test code in this massive test suite.","C 0000625",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0
"Can you fix it in the `quote_table_name`?_x000D_
Here is not only place we use `quote_table_name`.","C 0000626",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"Ah, on second thought this is an edge case to do with a specific adapter. I had forgotten we have adapter specific tests, this is in the right place. 👍 Still, I think the implementation is off. Let's not attach the database and try creating a one-off table with a dot in the name. Something like [this](https://github.com/rails/rails/blob/fd8e5eee014b8e8fb3015a312c5c1217f1273a37/activerecord/test/cases/adapters/sqlite3/json_test.rb#L11) maybe?","C 0000627",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"hm.. I see the problem._x000D_
_x000D_
https://github.com/rails/rails/blob/825d70b4069df3411b77636c98ca668292bbc03a/activerecord/lib/active_record/connection_adapters/abstract/schema_creation.rb#L42-L44_x000D_
_x000D_
We should use `quote_table_name` only to quote actual table name or schema qualified table name._x000D_
Here is one of the case of quoting table name qualified *column name*._x000D_
We probably need new method for the purpose.","C 0000628",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"I can transfer my logic to `Quoting` under the name `quote_table_and_column_name`._x000D_
_x000D_
The issue is how to deal with column names which might also contain dots. My fix doesn't deal with those, that's why I didn't want to make a method; it wasn't as general purpose as I would like.","C 0000629",0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0
"Yes, [abstract table quoting](https://github.com/rails/rails/blob/dfa857ef25b5abf7485e4f7115e4a311e00c599c/activerecord/lib/active_record/connection_adapters/abstract/quoting.rb#L72) calls `quote_column_name ` but it uses the wrong ivar. I would prefer keeping them separate as they were before.","C 0000630",0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
"At least the `quote_table_name` is also used for quoting the order by column._x000D_
4650874073bef4f02da3c2b0bfc4ba2a6fd5d562 would be broken by this change for now.","C 0000631",0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0
"Okay, but then do I use `super` or not? Because if I do, then both ivar will cache the value which feels wasteful.","C 0000632",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"PostgreSQL does create an actual schema for its tests, so in my mind I should do the same. _x000D_
_x000D_
I understand that you don't want me to use `ActiveRecord::Schema`. I can look at doing it from the connection object as you ask. That was the first thing I did, but I had the weird issue where `Thing.first` and `Thing.create` would return a `Thing` that had nil as id. This gets solved by using the Schema. I guess it's another bug down in the rabbit hole._x000D_
_x000D_
I'll look into it tomorrow.","C 0000633",0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0
"Alright, thnx, I'll rebase and fix+test again when I move the logic to Quoting.","C 0000634",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"Okay, so the root cause of all of this is absolutely bonkers. Nothing is what it seems and I was wrong. But the story is interesting._x000D_
_x000D_
TL;DR: Quoting schema/tables is the same in SQLite as the other databases. No weird need for ""."", the fix is correct and just made my code start actually testing the right thing and find a subtle bug elsewhere. SQLite's Attached database was never actually supported, and supporting them appears not worth the trouble._x000D_
_x000D_
Because of the bad quoting that was going on before the fix, when my gem, in its tests, would create a table in a database (using `create_table ""my_schema.thing"" do ...`), the actual generated SQL would be a `CREATE TABLE ""my_schema.thing""`). This is actually a table with a name that contain a dot, and not a table that refers to the schema._x000D_
_x000D_
Then, later on, the code in all my tests also also used the quote_table_name, and so everything always used a table_name with a dot instead of testing actual schemas._x000D_
_x000D_
What threw me in this weird quoting behavior understanding in 6.0 is that I would get syntax errors when trying to use the models. But that was not form the select or such things. No. It was from a call to PRAGMA which does things special for schemas (attached database). See, this is the query to get the table information in SQLite:_x000D_
_x000D_
`""PRAGMA table_info(#{quote_table_name(table_name)})""`_x000D_
_x000D_
However, when dealing with database, the actual syntax is_x000D_
_x000D_
`""PRAGMA schema_name.table_info(table_name)""`_x000D_
_x000D_
But those kinds of calls are not shown in the log, so I would get confused thinking the problem was in the previous query (because the problematic query is not shown in the error messages... which i don't know why)._x000D_
_x000D_
Now that part could be fixed with some code to split the table name into schema + table in an intelligent way (so that quoted parts remain the same). But here is a the kicker:_x000D_
_x000D_
In a `SELECT` in SQLite, you cannot specify the database at the attributes parts. Meaning:_x000D_
_x000D_
`SELECT bar.id FROM foo.bar` is valid, but_x000D_
`SELECT foo.bar.id FROM foo.bar` is not valid, its a syntax error!_x000D_
_x000D_
So in order to generate correct queries here, things get even more wild. It's clear to me that this is not worth my trouble (or anyone's)._x000D_
_x000D_
Sorry for the waste of time. Such a rabbit hole...","C 0000635",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"We don’t necessarily want to expose every attribute just because._x000D_
_x000D_
By the way, sometimes it can be annoying for contributors to “stalk” ones commits and do follow up PRs. I’d recommend commenting on the original PR with a question if it was intentional. Thanks!","C 0000636",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"The LookupContext is private API, why bother deprecating the attribute reader/writer?","C 0000637",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Hehe, I'll ✂️.  No reason really.","C 0000638",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Actually I wanted to make 100% sure nobody else was calling it, and it looks like not","C 0000639",1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0
"I am not sure why we have used string interpolation here. `""parent_id = #{id}""` can be replaced with `parent_id: id`","C 0000640",1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"Yeah, that does seem odd. Does git blame or the Topic using tests say anything? While it doesn't matter in tests, this also technically is vulnerable to SQL injections so at the very least it should use `= ?`. But let's just switch it to the hash as you mention.","C 0000641",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0
"@kaspth Changes seem to be very old can be changed to `parent_id: id`. I have done that here.","C 0000642",0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,1,0,1,0
"> If you'd like to delete several records in bulk, you may use `destroy_all` method","C 0000643",1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"CI is failing with the following error. I am not sure how to fix it. Can anybody help me with it?_x000D_
_x000D_
```_x000D_
The command ""sudo -E apt-add-repository -y ""ppa:jonathonf/ffmpeg-3"""" failed and exited with 1 during_x000D_
```_x000D_
_x000D_
","C 0000644",1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We can also say 'run' instead of 'execute' as we've used on [another line](https://github.com/rails/rails/pull/35324/files#diff-23bde35a6dadcaeb7fb6918f754ee591R353).","C 0000645",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Thanks, both work better in different sentences. Can keep as is","C 0000646",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"I don't think this should be merged. We already use ""happen"" a lots for callbacks and validations._x000D_
_x000D_
https://github.com/rails/rails/blob/b2eb1d1c55a59fee1e6c4cba7030d8ceb524267c/activemodel/lib/active_model/validations/absence.rb#L13-L14_x000D_
_x000D_
https://github.com/rails/rails/blob/b2eb1d1c55a59fee1e6c4cba7030d8ceb524267c/activemodel/lib/active_model/validations/presence.rb#L12-L13_x000D_
_x000D_
https://github.com/rails/rails/blob/1cbc6555f5eeaae32abaf7f35db807cbb3a3a9c9/activerecord/lib/active_record/transactions.rb#L85-L87_x000D_
_x000D_
https://github.com/rails/rails/blob/02e6abd8fd5ad883fd2f29fd5850e650dd121805/guides/source/active_record_validations.md#L72_x000D_
_x000D_
https://github.com/rails/rails/blob/02e6abd8fd5ad883fd2f29fd5850e650dd121805/guides/source/active_record_validations.md#L630-L631_x000D_
_x000D_
https://github.com/rails/rails/blob/02e6abd8fd5ad883fd2f29fd5850e650dd121805/guides/source/active_record_validations.md#L638-L639_x000D_
_x000D_
https://github.com/rails/rails/blob/02e6abd8fd5ad883fd2f29fd5850e650dd121805/guides/source/active_record_validations.md#L828_x000D_
_x000D_
https://github.com/rails/rails/blob/02e6abd8fd5ad883fd2f29fd5850e650dd121805/guides/source/active_record_validations.md#L915-L917_x000D_
_x000D_
https://github.com/rails/rails/blob/02e6abd8fd5ad883fd2f29fd5850e650dd121805/guides/source/active_record_validations.md#L921-L922_x000D_
_x000D_
https://github.com/rails/rails/blob/02e6abd8fd5ad883fd2f29fd5850e650dd121805/guides/source/active_record_validations.md#L975-L977_x000D_
_x000D_
","C 0000647",0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Reverted 30016df82f892f621c4937f3aec397f8d4cb30f2 for now.","C 0000648",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"> We already use ""happen"" a lots for callbacks and validations._x000D_
_x000D_
I see we use it for validations. For callbacks though, it just felt unnatural to read it that way, given its more referred to as ""callback execution"". _x000D_
_x000D_
Before merging, I tried searching if ""callback happening"" is a normal term to used anywhere, did not find many examples._x000D_
_x000D_
Anyway happy to leave as is for now though.","C 0000649",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Thanks for the PR, but it is fine as is to allow any callable object.","C 0000650",3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Thanks. In the future, you can add `[ci skip]` to your commit message for documentation-only changes to skip the Travis build.","C 0000651",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"Thanks, @kamipo. I will remember this next time.","C 0000652",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Why not just `*args`? What's the purpose of splitting the first one out?","C 0000653",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Just `*args` make sense. Fixed it. 👍 ","C 0000654",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"Need a blank line above.","C 0000655",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Need a blank line above.","C 0000656",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Need more two space indentation.","C 0000657",0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0
"✂️ a blank line.","C 0000658",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"```suggestion_x000D_
    #_x000D_
```","C 0000659",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"```suggestion_x000D_
    #_x000D_
```","C 0000660",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"```suggestion_x000D_
    # This is short-hand for <tt>relation.where(condition).destroy_all</tt>._x000D_
```","C 0000661",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0
"```suggestion_x000D_
    # This is short-hand for <tt>relation.where(condition).delete_all</tt>._x000D_
```","C 0000662",0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,1,0,0
"This doesn’t seem to match @dhh’s description. I don’t think we want `.all` before a destroy_by. It should work like find_by straight on Person.","C 0000663",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"I think the plural of person is people (at the very least Rails’ inflector says so), so let’s go with that.","C 0000664",0,0,0,0,0,0,0,1,0,0,1,0,0,0,3,0,0,0,0
"Just use `delegate` like as other query methods._x000D_
_x000D_
https://github.com/rails/rails/blob/ef602f8892fa4c41d7b0bb7868fc9084a9888212/activerecord/lib/active_record/querying.rb#L5-L16","C 0000665",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"It's easier to read:_x000D_
_x000D_
`assert_equal [david], destroyed`","C 0000666",1,0,0,1,0,0,0,0,0,0,0,1,0,0,2,0,0,1,0
"I think we can pare back the testing a lot. This is basically just a delegator to where + destroy/delete_all. So we just need to test the delegation, not all the ways `where` works._x000D_
_x000D_
Also, should probably just spell out that this is shorthand for where().delete/destroy_all.","C 0000667",0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"@dhh : Cutoff most of the test cases and added some basic test case to check delegation. Also, updated the comments to mention `shorthand for where().delete/destroy_all.`","C 0000668",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Looking good. Waiting for the builds to finish, but otherwise I believe good to merge.","C 0000669",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"@kamipo : Fixed all suggestions. Thank You. 👍 ","C 0000670",2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"@kaspth : Done with the changes. Please have a look.","C 0000671",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"@kaspth : Fixed all the review comments. _x000D_
_x000D_
cc/ @dhh @kamipo ","C 0000672",0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0
"Thanks!","C 0000673",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"```suggestion_x000D_
When multiple conditions define whether or not a callback should happen, an `Array` can be used. Moreover, you can apply both `:if` and `:unless` to the same callback._x000D_
```","C 0000674",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"```suggestion_x000D_
The callback only runs when all the `:if` conditions and none of the `:unless` conditions are evaluated to `true`._x000D_
```","C 0000675",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"```suggestion_x000D_
    if: [Proc.new { |c| c.user.allow_send_email? }, :author_wants_emails?],_x000D_
```","C 0000676",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0
"```suggestion_x000D_
    unless: Proc.new { |c| c.article.ignore_comments? }_x000D_
```","C 0000677",0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0
"@kamipo_x000D_
_x000D_
Thank you for review._x000D_
I have committed the proposal.","C 0000678",1,0,1,0,0,0,0,0,0,0,4,1,0,0,0,0,1,1,0
"Thank you for your contribution!_x000D_
In the future, you can add `[ci skip]` to your *commit message* for documentation-only changes to skip the Travis build.","C 0000679",0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"merge Thank you._x000D_
I gained good insight through this contribution._x000D_
Next time, when updating only doc, [ci skip] will be careful.","C 0000680",0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0
"I think we should remove `that` from here. _x000D_
_x000D_
Following sounds correct to me. _x000D_
```_x000D_
Don't allow `where` with invalid value matches to nil values._x000D_
```","C 0000681",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Thank you for the pointing out, I've removed that.","C 0000682",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0
"```suggestion_x000D_
It is possible to associate `:if` and `:unless` with a `Proc` object. This option is best suited when writing short validation methods, usually one-liners:_x000D_
```","C 0000683",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"```suggestion_x000D_
It is possible to associate `:if` and `:unless` with a `Proc` object_x000D_
```","C 0000684",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0
"Looks like we have one another ""Finally"" in the guides._x000D_
_x000D_
https://github.com/rails/rails/blob/03c2bb6b9dd5d0c35dd0e7e71927cc0f28ab59e0/guides/source/active_record_validations.md#L937","C 0000685",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Is this also inconsistent with 'active_record validations.md'? _x000D_
Or should we interpret the preamble 'finally' as 'fainally' in the description of ': if,: unless'?","C 0000686",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"I also deleted 'finally' in 'active_record_validations.md' @kamipo  taught.","C 0000687",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0
"@kamipo _x000D_
_x000D_
Thank you for review._x000D_
We have committed the proposal.","C 0000688",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"I digged the history, but the items are not the last item from the first merge from docrails._x000D_
Anyway, the ""Finally"" doesn't make sense.","C 0000689",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"merge Thank you._x000D_
I gained good insight through this contribution.","C 0000690",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Thanks!","C 0000691",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"Thanks you guys for taking the time! @yhara @nobu ","C 0000692",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"How does this change anything? If it's only being retained by the machine stack, I don't see how that's a real problem._x000D_
_x000D_
If there's real retention, #35296 sounds more like #33094 to me.","C 0000693",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"We've disscussed about the usage of the `ObjectSpace.define_finalizer` in the thread https://twitter.com/yhara/status/1096765718698192896._x000D_
_x000D_
As @yhara described at https://github.com/rails/rails/issues/35296#issuecomment-464319765, the default proc in the `@owner_to_pool` has a reference to the handler as the implcit `self`, so the finalizer proc which has a reference to the `@owner_to_pool` is not right usage to pass `ObjectSpace.define_finalizer`._x000D_
_x000D_
That is noted the doc in Japanese https://docs.ruby-lang.org/ja/latest/method/ObjectSpace/m/define_finalizer.html (not in English though https://ruby-doc.org/core-2.6.1/ObjectSpace.html#method-c-define_finalizer)_x000D_
_x000D_
Do you mean that there is no reason to touch the code unless that is a real world problem?","C 0000694",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Ah okay, I didn't read that comment closely because it seemed to be in between several other theories, and because its last line suggested it was already disproven._x000D_
_x000D_
Beyond the fact this PR wasn't clear in describing the reason for a very subtle change, my remaining concern would be that we don't have anything to prevent a future change from breaking it again (and unlike `unowned_pool_finalizer`, it's less obvious even for a reviewer familiar with the special needs of finalizers)._x000D_
_x000D_
(The new method should also be `:nodoc:`, and the ""the above early discard"" comment probably needs rephrasing... and finally, looking at the set of four methods, I get the feeling a different arrangement of responsibilities might be clearer)_x000D_
_x000D_
---_x000D_
_x000D_
A true leak is definitely worth fixing; I just didn't read closely enough to confirm that the machine stack theory was eliminated (and _that_ would not be a true leak).","C 0000695",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"I'm taking this is the main difference? We've now captured the currently rendering template and can derive the format directly from it?","C 0000696",0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0
"I don't see how the old code would get a `rendered_format` here? Did you already consolidate `rendered_format=` on the finder/lookup_context or am I misremembering?","C 0000697",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Yep, exactly","C 0000698",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"It's pretty confusing, but [the template renderer would set it on the lookup context](https://github.com/rails/rails/blob/df12a1b2413906ee38a977e3cbb325512c184837/actionview/lib/action_view/renderer/template_renderer.rb#L13).  The partial renderer [could do it too](https://github.com/rails/rails/blob/df12a1b2413906ee38a977e3cbb325512c184837/actionview/lib/action_view/renderer/partial_renderer.rb#L317-L323).","C 0000699",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Uhhh, right, they both set the same info but from slightly different vantage points. Got it, thanks 👍","C 0000700",0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0
"> When the template is being rendered, it pushes the_x000D_
current template on to a stack, setting `@current_template` to the_x000D_
template currently being rendered. When the cache helper asks the_x000D_
digestor for a key, it uses the format of the template currently on the_x000D_
stack._x000D_
_x000D_
I've chased down [a bunch of `Digestor` issues](https://github.com/rails/rails/commits/master/actionview/lib/action_view/digestor.rb?author=javan) stemming from mixed format templates (e.g. a `.js.erb` template that renders `.html.erb` partials). Any chance this change could reintroduce some of them? Hard to tell if [changes to the tests like these](https://github.com/rails/rails/pull/35293/files#diff-fe08eaa05da7c13bcd3c20c7c90b6591L148) might be covering them up.","C 0000701",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"> Hard to tell if [changes to the tests like these](https://github.com/rails/rails/pull/35293/files#diff-fe08eaa05da7c13bcd3c20c7c90b6591L148) might be covering them up._x000D_
_x000D_
I only removed those because they had no impact on the change.  I can undo that change, but it has no impact on the tests.  Since the digestor [doesn't look at the `renderd_format` anymore](https://github.com/rails/rails/pull/35293/files#diff-7ee9dc74b44ac1e2c604f7bc0791475dL23), setting it to some value shouldn't have any impact.","C 0000702",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks for the suggestion, but I think this sounds too specialized for Active Support.","C 0000703",0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0
"Side note: Storing a monetary value in as decimal is also risky as well due to how computer handle floating point number. Best practice is to store your amount as integer in cents and use something like [Money](https://github.com/RubyMoney/money) gem to help with the conversion._x000D_
_x000D_
So, I'm also against adding this to the core as it might promote practice that could lead into errors.","C 0000704",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"@matthewd yes, it is too specialized, like other features that ActiveSupport adds over core_ext, but OK ;)_x000D_
_x000D_
My intention was add support `in_cents` only to `BigDecimal`, but I extend to Float as sugar syntax._x000D_
_x000D_
@sikachu I agree to store monetary value as integer in cents is the best practice when we do not have an alternative, like BigDecimal, that provides arbitrary-precision floating point decimal arithmetic. And about promote the best practice, why not add Money gem into Rails stack?_x000D_
_x000D_
I wish you all the best!","C 0000705",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Thanks!","C 0000706",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"cc @tenderlove","C 0000707",2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"I think it can break (or leak memory) in some cases, but I think you're right: it's better to emit a warning and continue to work than to raise an exception._x000D_
_x000D_
Web console probably doesn't get reloaded, so there's probably no memory leak. _x000D_
_x000D_
Actually, maybe we should only emit the warning if self.class == AV::Base?","C 0000708",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"> Actually, maybe we should only emit the warning if self.class == AV::Base?_x000D_
_x000D_
I think that it makes sense because I couldn't come up with a case with an original view class other than debug view.  I fixed condition and message.","C 0000709",1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"I took a swing at this message:_x000D_
_x000D_
```Class level methods will no longer inherit scoping from #{scope._deprecated_scope_source} in Rails 6.1. To continue using the scoped relation, pass it into the block directly. To instead access the full set of models, as Rails 6.1 will, use `#{name}.unscoped`.```","C 0000710",0,0,0,0,0,0,0,0,0,0,2,2,0,2,0,0,2,1,0
"What we'd like to see at `#{scope._deprecated_scope_source}`?","C 0000711",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,1,0,0
"It is hard to show dynamic value without `#{name}` in this context._x000D_
It could be to be ```Class level methods will no longer inherit scoping from the scoped relation in Rails 6.1. To continue using the scoped relation, pass it into the block directly. To instead access the full set of models, as Rails 6.1 will, use `#{name}.unscoped`.```","C 0000712",0,0,0,0,0,0,0,0,0,0,2,1,0,0,3,0,0,0,0
"ah I misunderstand that. If we'd like ""To continue using the scoped relation"", we can use `#{name}.all` to drop the deprecated flag.","C 0000713",1,0,0,0,0,1,0,0,0,0,2,0,0,1,1,0,0,1,0
"ah couldn't use klass.all in this context for the purpose...","C 0000714",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Reworded.","C 0000715",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"I was thinking that `_deprecated_scope_source` would be something like ``` `create` ```","C 0000716",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0
"Okey, addressed at https://github.com/rails/rails/compare/f86693cd04f19817028d189caec7430ca7df836d..18f0ca7bfdcb103323dc6f951301cefbf5ebc28a.","C 0000717",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"What are the non-""leak"" ways a scope can be set after this? Is it only explicit `.scoping { .. }`?","C 0000718",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Yes, since `.scoping { .. }` is public API, I leaved the way as to inject the scope at global.","C 0000719",0,0,0,0,0,1,0,0,0,0,1,0,0,0,2,0,0,0,0
"Maybe I don't get the point of ""What are the non-""leak"" ways a scope can be set after this?""._x000D_
_x000D_
Can you expand about your concerned situation? @matthewd ","C 0000720",0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0
"Instead of saying `consult the documentation`, can we add the link to the documentation here?","C 0000721",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Also, can we rename `throw_setter_deprecation` -> `throw_setter_deprecation_warning` ??","C 0000722",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Docs get released when the version gets released so I can't yet link to the API docs. ","C 0000723",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"We're deleting this code in 6.1 - I think the current method name is fine.","C 0000724",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"If the `order` has two or more spaces between `nulls` and `first`, the regex still doesn't match to the `order`._x000D_
(e.g._x000D_
```ruby_x000D_
Topic.order(Arel.sql(""title NULLS  FIRST""))_x000D_
```_x000D_
)_x000D_
_x000D_
```suggestion_x000D_
          /\bnulls\s+(?:first|last)\b/i.match?(order)_x000D_
```","C 0000725",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Should I add a new record to the changelog?","C 0000726",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"I think this is not a critical bug, so it is fine as is to me.","C 0000727",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"done","C 0000728",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks!","C 0000729",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This seems to break other time related tests strangely, I will continue to investigate._x000D_
_x000D_
I should mention too that this is not specific to MySQL. You can reproduce the problem with any adapter:_x000D_
_x000D_
`bin/test test/cases/serialized_attribute_test.rb test/cases/attribute_methods_test.rb test/cases/base_test.rb -n ""/^(?:SerializedAttributeTest#(?:test_serialize_does_not_eagerly_load_columns)|AttributeMethodsTest#(?:test_YAML_dumping_a_record_with_time_zone-aware_attribute)|BasicsTest#(?:test_preserving_time_objects_with_time_with_zone_conversion_to_default_timezone_local))$/"" --seed 17411 -v`","C 0000730",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"It turns out [this line](https://github.com/rails/rails/blob/ccaa6199a74906ccb45fadbe1ce6a7e1fdd3d0d1/activerecord/test/cases/attribute_methods_test.rb#L710) initializes a Topic [with `time_zone_aware_attributes` enabled](https://github.com/rails/rails/blob/ccaa6199a74906ccb45fadbe1ce6a7e1fdd3d0d1/activerecord/test/cases/helper.rb#L188), which causes the date time attribute differences. We need to use a global class here because of how YAML dumping/loading works (other tz-aware column tests don't use the global Topic class). I've opted to simply reset column info on Topic after the test to tell Active Record to forget about the attribute change.","C 0000731",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"How about using splat hash?_x000D_
_x000D_
Since Ruby 2.6, this options hash would cause a warning like here:_x000D_
_x000D_
```ruby_x000D_
def foo(a = {}) _x000D_
  a_x000D_
end_x000D_
_x000D_
a = { foo: ""foo"" }_x000D_
_x000D_
p foo(a.merge(bar: ""bar""))_x000D_
p foo(**a, bar: ""bar"")_x000D_
```_x000D_
_x000D_
```_x000D_
% ruby -w xxx.rb_x000D_
{:foo=>""foo"", :bar=>""bar""}_x000D_
xxx.rb:1: warning: in `foo': the last argument was passed as a single Hash_x000D_
xxx.rb:8: warning: although a splat keyword arguments here_x000D_
{:foo=>""foo"", :bar=>""bar""}_x000D_
```","C 0000732",0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0
"Thanks, make sense. I fixed.","C 0000733",0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"Could switch to tag.meta while we’re here.","C 0000734",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"What about keeping the line the same but unsplatting the options at the end of the tag call?","C 0000735",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"In `tag(""meta"")` and `tag.meta`, the generated tags are slightly different. _x000D_
_x000D_
```ruby _x000D_
helper.tag(""meta"", name: ""csp-nonce"")_x000D_
#=> ""<meta name=\""csp-nonce\"" />""_x000D_
helper.tag.meta(name: ""csp-nonce"")_x000D_
#=> ""<meta name=\""csp-nonce\""> _x000D_
``` _x000D_
_x000D_
Of course, since meta tag is a void element, it is not necessary to have a close tag. However, the tag generated by `csrf_meta_tags` have a close tag, and I think that it is better to behave similarly so that the closing tag is generated. _x000D_
_x000D_
> What about keeping the line the same but unsplatting the options at the end of the tag call? _x000D_
_x000D_
:+1: I fixed._x000D_
","C 0000736",0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"> What about keeping the line the same but unsplatting the options at the end of the tag call?_x000D_
_x000D_
It would cause a warning https://travis-ci.org/rails/rails/jobs/493601600#L1254-L1256.","C 0000737",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"I screwed up! Thanks again!","C 0000738",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This test passes without the code change. We want to test that the mirror delegates `path_for` to the primary:_x000D_
_x000D_
```ruby_x000D_
test ""path for file in primary service"" do_x000D_
  assert_equal @service.primary.path_for(@key), @service.url_for(@key)_x000D_
end_x000D_
```","C 0000739",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Sorry, I used `url_for` in my example when I meant `path_for`. 🤦‍♂️_x000D_
_x000D_
```suggestion_x000D_
    assert_equal @service.primary.path_for(@key), @service.path_for(@key)_x000D_
```","C 0000740",0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Sorry. My bad. I should have checked it.","C 0000741",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks, @abhaynikam. This needs a test.","C 0000742",0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
"@georgeclaghorn : Added test cases. Please let me know if we should add more cases.","C 0000743",0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
"@georgeclaghorn : Done with the changes. ","C 0000744",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Thank you!","C 0000745",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0
"Thanks for the PR. Can you add a test case about what this fixes?","C 0000746",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I added some tests. now 'foo nulls first' can be reversed_x000D_
I'm not really sure why current rule for nulls first/last implemented in this way:_x000D_
```_x000D_
      def does_not_support_reverse?(order)_x000D_
        # Account for String subclasses like Arel::Nodes::SqlLiteral that_x000D_
        # override methods like #count._x000D_
        order = String.new(order) unless order.instance_of?(String)_x000D_
_x000D_
        # Uses SQL function with multiple arguments._x000D_
        (order.include?("","") && order.split("","").find { |section| section.count(""("") != section.count("")"") }) ||_x000D_
          # Uses ""nulls first"" like construction._x000D_
          /nulls (first|last)\Z/i.match?(order)_x000D_
      end_x000D_
```_x000D_
should 'nulls first' construction be irreversible only in case if order ends with this construction?_x000D_
or is it a bug and should be:_x000D_
```_x000D_
      def does_not_support_reverse?(order)_x000D_
        # Account for String subclasses like Arel::Nodes::SqlLiteral that_x000D_
        # override methods like #count._x000D_
        order = String.new(order) unless order.instance_of?(String)_x000D_
_x000D_
        # Uses SQL function with multiple arguments._x000D_
        (order.include?("","") && order.split("","").find { |section| section.count(""("") != section.count("")"") }) ||_x000D_
          # Uses ""nulls first"" like construction._x000D_
          /nulls (first|last)\Z/i.match?(section)_x000D_
      end_x000D_
```_x000D_
? (`order` replaced with `section`)_x000D_
_x000D_
if it's a bug and rails should see the whole order irreversible no matter where 'null first' is - I happy to create a new pull request to fix this bug (and close this one). _x000D_
_x000D_
if it's ok to have 'nulls first' as a non-last option - this PR should fix broken AR behavior_x000D_
_x000D_
previously AR having `foo NULLS FIRST, bar` made `foo NULLS FIRST DESC, bar DESC` from it and raised pg exception because of wrong query syntax. this pr should fix it_x000D_
_x000D_
","C 0000747",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"I can also drop `|| /nulls (first|last)\Z/i.match?(order)` as with those changes it will work keeping original first/last order","C 0000748",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`does_not_support_reverse?` wad added at #18928._x000D_
_x000D_
I suppose the reason that does not support reverse NULLS FIRST/LAST is that we could not decide the behavior user expected whether or not NULLS FIRST/LAST should be reversed._x000D_
_x000D_
(IMO at least unless NULLS FIRST/LAST is reversed, `relation.order(""id NULLS FIRST"").reverse_order.to_a` is not to be the same result with `relation.order(""id NULLS FIRST"").to_a.reverse`)","C 0000749",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"fair. I created a new [PR](https://github.com/rails/rails/pull/35274) to fix already existing regex bug.","C 0000750",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0
"Thanks!","C 0000751",0,0,0,0,0,0,0,0,0,0,0,2,0,2,1,0,0,0,0
"Should this comment be here?","C 0000752",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"Should this be nodoc?","C 0000753",1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"I think so.  I wasn't sure exactly how public this should be.  I'll remove comments and put `:nodoc:` for now.  Thank you for reviewing! 🙇‍♂️","C 0000754",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0
"I assume this is what gets the axe next? Are you thinking something similar for the variants assignment above?","C 0000755",0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0
"The nil in here reads a little confusing. How about making layout an optional kw arg? Then we can just omit nil here.","C 0000756",1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0
"Could keep the style similar to below with parens.","C 0000757",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Why call `presence`? if you know the value will match `ACCEPTABLE_UUID` it can't be blank, or am I missing something?","C 0000758",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0
"Good point. I had done it as homage to the original functionality of `UUID#cast` but unless there's a form of `ACCEPTABLE_UUID` which is also blank, then it won't be relevant.","C 0000759",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"This could break existing apps, it isn't tested, but ` UUIDType.new(guid: :""A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11"").guid` is worked for a long time.","C 0000760",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"So there is some reliance on `#to_s` for other types which implement that function, for users who use Object UUIDs instead of serialized UUIDs. Thanks for that feedback I wasn't aware, and it wasn't tested. I'll look into the tests and add a case for a UUID type. I always use `SecureRandom.uuid` myself._x000D_
_x000D_
Fortunately, `String#to_s` is just an identity function, so there's only minor performance overhead to returning it, no allocations.","C 0000761",0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"I'm sorry I misunderstood your meaning. You are referring to an existing test case in `test_acceptable_uuid_regex` which is a passing test in my change. I thought you were referring to some UUID object library like `uuidtools`, which creates objects to represent UUIDs._x000D_
_x000D_
This does not appear to be supported by the existing test cases, though it might work. Because I know I have done that in the past and that others might be expecting it to work, I'll add a test to cover such a case._x000D_
","C 0000762",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Can you change the assertion to ensure returning string as before?_x000D_
```suggestion_x000D_
      assert_instance_of String, uuid.guid_x000D_
```","C 0000763",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This is an improvement I can get behind.","C 0000764",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Ah! It caused another bug because I also implemented the DuckUUID compatability...","C 0000765",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0
"Can you change the `cast` method to private `cast_value` method?_x000D_
Also, I'd prefer `value if value.match?(ACCEPTABLE_UUID)` style as most other type cast do so._x000D_
_x000D_
https://github.com/rails/rails/blob/5ca19efafea08984ff1c464c64969f82b9db3569/activemodel/lib/active_model/type/value.rb#L37-L39_x000D_
_x000D_
https://github.com/rails/rails/blob/5ca19efafea08984ff1c464c64969f82b9db3569/activemodel/lib/active_model/type/value.rb#L118-L123","C 0000766",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I intentionally hadn't done the compact style because I was wary of the magical nil return when a conditional is the last statement in a method. But if that's recommended then I don't mind it too badly. I had no idea about the `cast -> cast_value` delegation, so thank you for that information.","C 0000767",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"`casted.to_s` is redundant.","C 0000768",0,0,0,0,0,2,0,0,0,0,1,0,0,0,1,0,0,0,0
"Can you make the `cast_value` method private?_x000D_
_x000D_
https://github.com/rails/rails/blob/5ca19efafea08984ff1c464c64969f82b9db3569/activemodel/lib/active_model/type/value.rb#L116-L123","C 0000769",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Can you fix the style issue?_x000D_
_x000D_
https://codeclimate.com/github/rails/rails/pull/35263_x000D_
_x000D_
![image](https://user-images.githubusercontent.com/12642/53067077-f0ad8600-3515-11e9-9f66-dd6701eced1b.png)_x000D_
","C 0000770",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0
"I abandoned the guard clause style to maximize clarity.","C 0000771",0,0,0,0,1,0,1,0,0,0,2,0,0,0,2,0,1,0,0
"Thanks!","C 0000772",0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,0,0
"Can I backport this to Rails 5.1 and 5.2? What do you recommend?","C 0000773",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0
"We basically backport only bug or security fixes._x000D_
See the Maintenance Policy https://guides.rubyonrails.org/maintenance_policy.html.","C 0000774",0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0
"```suggestion_x000D_
NOTE: Basic knowledge of relational database management systems (RDBMS) and structured query language (SQL) is helpful in order to fully understand ActiveRecord. Please refer to [this tutorial](https://www.w3schools.com/sql/default.asp) (or [this one](http://www.sqlcourse.com/)) or study them by other means if you would like to learn more._x000D_
```","C 0000775",0,0,0,1,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0
"Since you are now a Rails committer I feel I need to correct your on this._x000D_
_x000D_
When we talk about the framework we always separate the names, so Active Record. When we are talking about the constant the words are together and if you can with monospaced fonts, so `ActiveRecord`.","C 0000776",1,0,0,4,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Thanks @rafaelfranca, I'll keep that in mind writing docs going forward!","C 0000777",0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0
" I can't think in a way we can cache collections like this so I feel like raising an exception on this case is better than silently not caching it. At least the users can make the decision to use the same template if cache is important or remove the `cache` call that was not doing anything.","C 0000778",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"> I can't think in a way we can cache collections like this so I feel like raising an exception on this case is better than silently not caching it. At least the users can make the decision to use the same template if cache is important or remove the `cache` call that was not doing anything._x000D_
_x000D_
Cool.  That was my feeling too, but I wanted to hear other opinions.  I'll update this to raise a `NotImplementedError`.","C 0000779",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I'd rather not change `HWIA` for the sake of the subclass. Maybe we can just override `nested_under_indifferent_access` in the subclass? Or to be more explicit about behaviour, we could alias over top of the superclass implementation:_x000D_
_x000D_
```_x000D_
def nested_as_self_x000D_
  self.class.new(self)_x000D_
end_x000D_
_x000D_
alias_method :nested_under_indifferent_access, :nested_as_self_x000D_
```","C 0000780",1,0,0,2,1,0,0,0,0,0,0,2,0,0,2,1,0,0,0
"> Maybe we can just override `nested_under_indifferent_access` in the subclass?_x000D_
_x000D_
Can't do that sadly `nested_under_indifferent_access` is defined on the `Hash` class https://github.com/rails/rails/blob/840f55567191c96bdf4250a339759dbb532d351e/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb#L23_x000D_
Overriding it inside the subclass will have no effect","C 0000781",1,1,0,2,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0
"Ah, my mistake, but I still think `as_self` is an inheritance hack. Can we just override `convert_value` in the subclass instead?","C 0000782",0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0
"This changelog entry is not needed. This should be invisible for the users.","C 0000783",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0
"Thanks for the 👀 , I made the suggested change. If we come across a similar use case in the future we can maybe reconsider extracting the code that returns a a HWIA into a separated method.","C 0000784",0,1,1,4,0,0,0,0,0,0,0,0,0,1,5,4,0,0,0
"```suggestion_x000D_
            if reflection.type && !reflection.through_reflection?_x000D_
```","C 0000785",2,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"```suggestion_x000D_
    assert_equal original.posts.first.comments.ids, preloaded.posts.first.comments.ids_x000D_
```","C 0000786",0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0
"Why not using just `.find(2)`?","C 0000787",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I don't think this is right assertion to have._x000D_
_x000D_
Here I check the following situation:_x000D_
_x000D_
The has many through association of the second tier (aka ""has many through through"") may have same records in the through association:_x000D_
_x000D_
```_x000D_
category(1).posts.first.comments.first == category(2).posts.first.comments.first_x000D_
```_x000D_
_x000D_
Note that this can never happen for through association in the 1st tier._x000D_
_x000D_
When we reset the source reflection after processing each owner (e.g. category), the following _x000D_
owner may not be able to use the same through record (shared comment) because source reflection would already be reset._x000D_
_x000D_
That is why reset code for the source reflection was moved out of `owners.each` loop. _x000D_
","C 0000788",1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0
"See my comment 2 lines below. This test is for a very tricky situation.","C 0000789",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"The reason that I suggested is the assertion isn't failed without this patch in locally.","C 0000790",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"That is true. I had a version of the patch with only one line of code changed:_x000D_
_x000D_
``` diff_x000D_
- association.reset if preload_scope	_x000D_
+ association.reset if scope_x000D_
```_x000D_
_x000D_
However, in a separated branch where I made experiments with other things, I realized this one-line patch adds a regression. That is how this patch end up having 2 tests:_x000D_
_x000D_
* first test_x000D_
* one line of code patch_x000D_
* discovered regression_x000D_
* second test_x000D_
* improved patch_x000D_
_x000D_
I was trying to invent the version of this test that would fail on master but no luck._x000D_
You may try it yourself using my description of the problem above. It should theoretically exist.  Maybe with ""has many through through through"" :).","C 0000791",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I see. I know it is hard to invent the ""has many through through through"" failing test._x000D_
It is fine as is since this may prevent any regression by any other refactoring in the future.","C 0000792",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0
"For some reason I have a collection where some of the `middle_records` are `nil` and this explode. I'll try to reproduce but does someone know if that can be the case?","C 0000793",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"hmm... somehow preloaded records have `nil`, at least that is skipped in `grouped_records` for now._x000D_
(I removed the skip in the past, but as far as I remember tests aren't passed.)_x000D_
_x000D_
https://github.com/rails/rails/blob/bd4eff2f99ffa5868574c497bc63f320cbda3083/activerecord/lib/active_record/associations/preloader.rb#L152-L155","C 0000794",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Got a reproduction script:_x000D_
_x000D_
```ruby_x000D_
# frozen_string_literal: true_x000D_
_x000D_
require ""bundler/setup""_x000D_
_x000D_
require ""active_record""_x000D_
require ""minitest/autorun""_x000D_
require ""logger""_x000D_
_x000D_
# This connection will do for database-independent bug reports._x000D_
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")_x000D_
ActiveRecord::Base.logger = Logger.new(STDOUT)_x000D_
_x000D_
ActiveRecord::Schema.define do_x000D_
  create_table :posts, force: true do |t|_x000D_
  end_x000D_
_x000D_
  create_table :foos, force: true do |t|_x000D_
    t.integer :post_id_x000D_
  end_x000D_
_x000D_
  create_table :comments, force: true do |t|_x000D_
    t.integer :post_id_x000D_
  end_x000D_
end_x000D_
_x000D_
class Post < ActiveRecord::Base_x000D_
  has_many :comments_x000D_
  has_one :foo_x000D_
end_x000D_
_x000D_
class Comment < ActiveRecord::Base_x000D_
  belongs_to :post_x000D_
_x000D_
  has_one :foo, through: :post_x000D_
end_x000D_
_x000D_
class Foo < ActiveRecord::Base_x000D_
  default_scope { order(:id) }_x000D_
_x000D_
  belongs_to :post_x000D_
end_x000D_
_x000D_
class BugTest < Minitest::Test_x000D_
  def test_association_stuff_x000D_
    Comment.create!_x000D_
    Foo.create!_x000D_
_x000D_
    assert_equal 1, Comment.preload(:post, :foo).to_a_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
I'll write a test and commit the fix. Not sure if we should fix the root cause of having `nil`s at that point or just skip if there are `nil`s. WDYT?","C 0000795",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Ideally we'd like to find the root cause. But for now just skip `nil` record is also fine to me since we already have that skip in `grouped_records` for a long time.","C 0000796",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Fixed in 572dcdd7e8","C 0000797",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Looks good to me. Can you squash your commits?","C 0000798",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"done","C 0000799",0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This change is causing a few extra queries in my application and it is really hard to me to understand why those association needs to be reset to chose if this is the expected behavior or not._x000D_
_x000D_
Can you explain why we need to reset those associations now? And if we don't reset, which problems will happen?","C 0000800",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0
"## Patch motivation_x000D_
_x000D_
 Here is the test that fails: https://github.com/rails/rails/pull/35247/files#diff-f51660d918ba5921aaae392122026533R2088_x000D_
_x000D_
It fails because source association is loaded with the a target through association scope aka `reflection.scope`: the one that is at the association definition: _x000D_
_x000D_
``` ruby_x000D_
test/models/author.rb:44:  has_many :comments_desc, -> { order(""comments.id DESC"") }, through: :posts_sorted_by_id, source: :comments_x000D_
```_x000D_
_x000D_
But this scope is alien to the `source_reflection`._x000D_
So the reset should happen based on the scope passed to the source reflection preloader: https://github.com/rails/rails/pull/35247/files#diff-ca84a6da4dec54d0ca3e430fbb352ad9R12_x000D_
_x000D_
It makes the reset consistent with the custom scope (3rd argument) passed to the preloader: when passed non-empty scope always reset._x000D_
_x000D_
_x000D_
## Reset problem_x000D_
_x000D_
Current implementation of the preloading is odd: at first we load the records into the association (aka assigning the `Association#target`) with an alien scope and then we take the records from there into memory and reseting the association. There should be test cases where the already loaded association would be reset if we put the `preload` argument to the right order. Like:_x000D_
_x000D_
```_x000D_
Author.has_many :posts, -> { custom_scope1 }_x000D_
Author.has_many :comments, through: :posts, -> { custom_scope2 } _x000D_
Author.preload(:posts => {:comments},  :comments => {} ).first_x000D_
```_x000D_
_x000D_
In this example, we preload the `comments` association before the through association that would use that association as a source._x000D_
_x000D_
Only in this specific order, it will cause the `Post#comments`  to be reset after being preloaded._x000D_
_x000D_
A more complex scenario to reveal this bug should exist before this patch. The reset was happening only when `preload_scope` was given which can only present for through association of the 2nd tier (aka has many through through).  _x000D_
_x000D_
## Solution_x000D_
_x000D_
The only way to fix that in all cases is never set the `Association#target` inside preloader when `preload_scope` is given._x000D_
_x000D_
I am working on this patch now and I am optimistic it is doable in an adequate way. However, this is not a trivial patch (~100 lines changed in the diff)._x000D_
 _x000D_
I was thinking it would be easier for the Rails core team to review patches ones by one as the tackle deeper and deeper problems of the preloading code instead of all of them dumped together with a several pages of description._x000D_
_x000D_
 _x000D_
_x000D_
_x000D_
","C 0000801",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"That colon sticks out a bit to me_x000D_
_x000D_
```suggestion_x000D_
                  ""Setting `ActiveRecord::Base.configurations` with `[]=` is deprecated. Use `ActiveRecord::Base.configurations=` directly to set the configurations instead.""_x000D_
```","C 0000802",0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,1,0,1,0
"Is this going to be a close enough approximation to work for most existing callers? I would've imagined something a bit more.. `concat`-y?","C 0000803",0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0
"If the expectation is that `super` is going to raise, ""deprecated"" is a bit of a misnomer here._x000D_
_x000D_
Perhaps we should only produce this deprecation warning for each/first/fetch/values, and have the `else` case below raise a custom exception [with a similar, but harsher, message]? ","C 0000804",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0
"Per above, while this sounds :100: -- I love that we're able to provide this sort of transitional smoothing -- I think it's surprising (read: not how 5.2 acts) for the other configurations to have disappeared. (Assuming that is what's happening.)","C 0000805",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"If we're calling `[] =` we're replacing already created configurations and those will be an array.","C 0000806",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Ok I redid this PR. Here's what the changes consist of now:_x000D_
_x000D_
1) Introduces a new setter called `configs_for = ` that will add a new_x000D_
hash to the configurations list OR replace an existing hash if that_x000D_
environment is already declared. This restores ""hash like"" behavior that_x000D_
Rails 5 and below supported._x000D_
_x000D_
~2) Deprecates getter for `[]` because I think leaving this one hash_x000D_
method in would be confusing.~ changed my mind on this bc it's actually used a lot in our codebase and makes sense to just leave it._x000D_
_x000D_
3) Changed to throw deprecation warnings on the methods we decided to support_x000D_
for hash conversion and raise on the methods we don't support._x000D_
_x000D_
4) Refactored the setter/getter hash deprecation warnings messages and_x000D_
rewrote them._x000D_
_x000D_
Getters message:_x000D_
_x000D_
```_x000D_
DEPRECATION WARNING: `ActiveRecord::Base.configurations` no longer_x000D_
returns a hash. Methods that act on the hash like `values` are_x000D_
deprecated and will be removed in Rails 6.1. Use the `configs_for`_x000D_
method to collect and iterate over the database configurations._x000D_
```_x000D_
_x000D_
Setter message:_x000D_
_x000D_
```_x000D_
DEPRECATION WARNING: Setting `ActiveRecord::Base.configurations` with_x000D_
`[]=` is deprecated. Use `ActiveRecord::Base.configurations=` directly_x000D_
to set the configurations instead._x000D_
```_x000D_
_x000D_
5) Rewrote the legacy configurations test file to test all the public_x000D_
methods in the DatabaseConfigurations class._x000D_
","C 0000807",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Update: chatted with @matthewd and we decided that adding a `configs_for=` is overkill and we should only support the old way of doing things with deprecation.","C 0000808",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks for the PR, but it was already fixed by #35154.","C 0000809",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0
"I'm suspecting this test to be flakey. It does a `SHOW FULL FIELD FROM` query, tried to revert all the change from this PR and it still fails pretty consistently. I was able to reproduce the failure on master but it's not as frequent, not sure why","C 0000810",1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0
"What is not clear is how this change fix the problem since `destroy_all` still call `load_target` that still check for the counter cache. Can you explain better how overriding `find_target?` affects `destroy_all`?","C 0000811",1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Hmm that's embarassing 😓 , I added the check in the `load_target` after a test failed and didn't think about it twice since test was passing. That test isn't testing anything actually, updating the counter_cache value manually has no effect._x000D_
_x000D_
Let me find write a better test and find another way to solve the issue","C 0000812",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"After digging more on this, the `destroy_all` issue seems to be just the tip of the iceberg and the counter cache optimization patch makes other significant changes._x000D_
_x000D_
Thanks to @byroot for this snippet_x000D_
_x000D_
```ruby_x000D_
    post = Post.create!_x000D_
_x000D_
    second_post = Post.create!_x000D_
    comment = second_post.comments.create!(name: 'Hello World!')_x000D_
    comment.update_column(:post_id, post.id)_x000D_
    post.reload_x000D_
_x000D_
    assert_equal 0, post.comments_count_x000D_
    assert_equal 0, post.comments.to_a.size_x000D_
_x000D_
    assert_equal 1, Comment.where(post_id: post.id).count_x000D_
```_x000D_
_x000D_
Also, any method like `Post.comments.sample`, `Post.comments.shuffle` ... basically all methods here https://github.com/rails/rails/blob/8d9d46fdae4502b8881eca641c51a64ee7804194/activerecord/lib/active_record/relation/delegation.rb#L71-L74 will have this issue of not loading the target if the counter cache value is 0._x000D_
_x000D_
Considering that messing with the counter_cache value is not difficult (see example below), I believe that https://github.com/rails/rails/pull/35127 should be reverted. At this current state, counter cache doesn't seem to be reliable enough to be used for optimizations such as this one_x000D_
_x000D_
```ruby_x000D_
    post = Post.create!_x000D_
_x000D_
    second_post = Post.create!_x000D_
    post.comments.create!(name: 'Hello World!')_x000D_
    assert_equal 1, post.comments_count_x000D_
    post.reload_x000D_
_x000D_
    assert_equal 1, post.comments.where('1=1').delete_all_x000D_
    post.reload_x000D_
    assert_equal 1, post.comments_count_x000D_
  end_x000D_
```","C 0000813",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Agree, marking as loaded without actual loading is too greedy optimization._x000D_
I'm going to revert that commit.","C 0000814",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Maybe we should use the UTC time?","C 0000815",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Can we make the wait time part of the other log message?  Then we don't need to have two `info` blocks._x000D_
_x000D_
I believe the `job = event...` line was moved inside the info block for performance (so it doesn't get executed unless the logger is in info mode).","C 0000816",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"Do we actually need to calculate how long the job has been in the queue?  I would expect the log messages to have a timestamp.  If the log message has a time stamp, we can just log the ""enqueued time"" and whatever reads the log messages can calculate how long the message sat in the queue.  Logging just the duration means that we lose the ""enqueued_at"" information (or we have to take the log timestamp and subtract the duration to back in to the value).","C 0000817",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Not sure if returning a Time object from serialize is a good idea. It will work in JSON-based adapters but the problem is that the roundtrip of this value will return a String, so maybe it better to be explicit about the string conversion we want to do?","C 0000818",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Is this working? `enqueued_at` will be a string and when I try `Time.now.utc - JSON.load(JSON.dump(Time.now.utc))` I get an error.","C 0000819",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"In our application we only lock the enqueued_at.","C 0000820",0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0
"Is there a Rails preferred format for this sort of data?","C 0000821",1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"I think I will remove it per @tenderlove's suggestion.","C 0000822",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"Let’s just say “enqueued at”, so we keep the language the same.","C 0000823",0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0
"I changed it to be a string then added a test to make sure it could be parsed.","C 0000824",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0
" mayb `Time.now.utc.iso8601`?","C 0000825",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"![](https://imgs.xkcd.com/comics/iso_8601.png)","C 0000826",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,2,1,0
"Should we take retries in consideration? Let say a job needs to be retried 10 times, is the time on queue the same as the difference between the first time it was enqueued and the time it is being executed or should we just consider the last time it was retried?","C 0000827",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"I just checked our application and we don't take in consideration retries, so this is enough for me.","C 0000828",1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"I am not sure how to get the test to rebuild, it looks like it just failed to start?","C 0000829",1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"Thanks! Merged in ac68550ae6","C 0000830",0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"I really like that setting autoload paths is split from the other initializer. 👍","C 0000831",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0
"Need `platform:` here; `if` and Gemfiles don't mix well","C 0000832",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"All the rest of this file uses single quotes","C 0000833",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Oh yes.","C 0000834",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"But our style guidelines have changed over time, saw an opportunity to update that one I was touching._x000D_
_x000D_
True that the file should be consistent.","C 0000835",0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0
"> * A file should define only one constant in its namespace (but can define inner ones). So, if `app/models/foo.rb` defines `Foo` and also `Bar`, `Bar` won't be reloaded cleanly._x000D_
_x000D_
Is this classic mode behavior, or Zeitwerk behavior?  I thought it wouldn't be reloaded cleanly in classic mode.","C 0000836",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"> > * A file should define only one constant in its namespace (but can define inner ones). So, if `app/models/foo.rb` defines `Foo` and also `Bar`, `Bar` won't be reloaded cleanly._x000D_
> _x000D_
> Is this classic mode behavior, or Zeitwerk behavior? I thought it wouldn't be reloaded cleanly in classic mode._x000D_
_x000D_
In classic mode, if you define `Foo = Bar = 1` in `app/models/foo.rb`, dependencies has `Bar` in `autoloaded_constants`. I believe that is a side-effect of the implementation, more than a deliberate feature._x000D_
_x000D_
In the new mode we enforce one file = one constant path, except for inner classes. There is a technical reason for it, which is that we keep track of what is loaded in the decoration of `Kernel#require`. Given an absolute file name, we know the parent module and constant name that corresponds to, there is no way to detect `Bar`._x000D_
","C 0000837",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"> * Autoload paths that do not exist on boot are ignored._x000D_
_x000D_
Can you expand on that one?_x000D_
_x000D_
Is that true even after a reload? Because that sounds Bad.","C 0000838",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"> Should zietwerk be an explicit dependency of activesupport?_x000D_
_x000D_
Being a dependency would be fine too. Maybe better in the sense that it is a dependency, but if everything goes well one that is going to gradually replace the classic autoloader, it sends a stronger message._x000D_
_x000D_
I'll change this (unless someone has an objection)._x000D_
","C 0000839",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"> > * Autoload paths that do not exist on boot are ignored._x000D_
> _x000D_
> Can you expand on that one?_x000D_
>_x000D_
> Is that true even after a reload? Because that sounds Bad._x000D_
_x000D_
That is a design decision, but open to debate of course._x000D_
_x000D_
In Zeitwerk, pushing a non-existing directory is an error. As always, microdecisions. In this case the idea is to prevent misconfiguring directories with typos in their names or whatever and fail fast. On the other hand, the point of view in which you do not consider that to be an error, and just ignore the non-existing ones on setup, is also valid._x000D_
_x000D_
The decision depends on use cases. You can have empty directories, but not non-existing directories. Do we have real use cases that deserve changing this logic? Similarly, with classic autoloading, the subdirectories under `app` _at boot_ are the ones in autoload paths, if you add a new one (`app/services`), you need to restart the server._x000D_
_x000D_
","C 0000840",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"> * There is a new config attribute `config.autoloader` that can be `:classic` or `:zeitwerk`. This is `:zeitwerk` for new apps on CRuby, and `:classic` for apps loading the defaults of previous versions or run by other interpreters._x000D_
_x000D_
@fxn Any reason for it to be only enabled on CRuby by default?","C 0000841",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0
"> @fxn Any reason for it to be only enabled on CRuby by default?_x000D_
_x000D_
Hey @eregon! It was in my TODO to contact the JRuby/TruffleRuby teams about it._x000D_
_x000D_
Right now, Zeitwerk only supports CRuby. One of the reasons is that it needs `Kernel#autoload` to call `Kernel#require`, because it is key to be able to [decorate it](https://github.com/fxn/zeitwerk/blob/master/lib/zeitwerk/kernel.rb). I am watching https://github.com/jruby/jruby/issues/5403 regarding this._x000D_
_x000D_
Another detail, is that in order to support what I call [explicit namespaces](https://github.com/fxn/zeitwerk#explicit-namespaces) the library sets a trace point on the `:class` event. Last time I checked, JRuby does not emit this particular event unless you pass the `--debug` flag. I am not familiar with that flag, but does not seem like something you'd enable in production normally._x000D_
_x000D_
On the other hand the `:class` event is triggered rarely in regular code bases, so I wanted to ask if the JRuby team would consider broadcasting that one in the default mode._x000D_
_x000D_
Furthermore, the test suite has a [Ruby compatibility suite](https://github.com/fxn/zeitwerk/blob/master/test/lib/zeitwerk/test_ruby_compatibility.rb) in case it helps. I don't know right now if it is exhaustive, should do a pass and document in which way we depend on each property, but it is a good indicator._x000D_
_x000D_
Please anything else just let me know, would be awesome that the library is portable._x000D_
","C 0000842",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"> Do we have real use cases that deserve changing this logic? Similarly, with classic autoloading, the subdirectories under `app` _at boot_ are the ones in autoload paths, if you add a new one (`app/services`), you need to restart the server._x000D_
_x000D_
I strongly feel that's a bug worth fixing, not doubling down on... and I think it's hugely more common to create a new namespaced model (that is, a new namespace) than it is to invent a new `app/*/` type, so I think this will be quickly problematic if I'm correctly understanding the new behaviour._x000D_
_x000D_
To be clear, I agree with the design decision at Zeitwerk's level that a missing directory should be an error: I just think that Rails in its soft-friendly-autoloady configuration will want to be more forgiving, and I think that means a fully dynamic app (drawing a distinction between ""basic"" autoload and ""genuinely expect files to change/appear/disappear"" reload+autoload) ultimately can't freeze the path list._x000D_
_x000D_
(Zeitwerk doesn't need to react to such directories appearing, of course -- our file watcher will handle that -- it just needs to be open to having its paths reconfigured during the reload cycle.)","C 0000843",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"> I think it's hugely more common to create a new namespaced model (that is, a new namespace) than it is to invent a new `app/*/` type, so I think this will be quickly problematic if I'm correctly understanding the new behaviour._x000D_
_x000D_
Ah, let's make sure we are in sync on this one! New namespaces are picked up just fine. If you create `app/models/admin` and reload, `Admin` is autoloadable right away. The only thing we ignore are paths in `ActiveSupport::Dependencies.autoload_paths` that by the time the finisher runs do not exist ([code](https://github.com/rails/rails/blob/ed9acb4fcc793ce1ab68a0e5076dc9458cc7f218/activesupport/lib/active_support/dependencies/zeitwerk_integration.rb#L44)).","C 0000844",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"@matthewd now that we talk about this, I believe that I wrote that `if` influenced by the current tolerance to non-existing directories. But on a second thought, I wonder if we should also err in the new mode instead of silently ignoring the autoload path.","C 0000845",0,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Ah okay, I misunderstood your previous wording, but I do still think we should support that too. (I didn't actually think it was currently so insensitive to new appearances (modulo complications from spring)_x000D_
_x000D_
Loosely related: #33822 ","C 0000846",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This method is not in a performance critical codepath so this improvement is not worth it. Please read the contributing guides. https://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#benchmark-your-code_x000D_
_x000D_
I'll merge only because the code is now clear, but this will be the last time I'll merge a cosmetic PR from you.","C 0000847",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"@rafaelfranca will take care of cosmetic changes in the next PR's.","C 0000848",0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"@rafaelfranca the code change done here has about 1.1x of improvement. But I need some guidance on what are the features or code tagged as performance-critical code path? I thought this will come under a performance improvement._x000D_
_x000D_
 I went through this [link](https://github.com/rails/rails/pull/13771#issuecomment-32746700) on cosmetic changes. Is it like 1.1x of improvement not considered as a significant improvement and hence marked as cosmetic change? Do we have a performance benchmark like the optimization should be more than 5x time of previous code version?_x000D_
_x000D_
If possible can you please guide me on what code blocks to look at which we are planning to optimize? And how to make sure that the optimization changes I want to get merged are not tagged as cosmetic changes?","C 0000849",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This change isn't correct and should probably be reverted._x000D_
`appendTo` Inserts every element in the set of matched elements to the end of the target. https://api.jquery.com/appendTo/_x000D_
`raw` shouldn't be used either because of XSS.","C 0000850",1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Agree, this is correct as is. Reverted fb60def5a4d9eef95571b730701c55426846e0ea.","C 0000851",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"Sorry my mistake - think I must've been getting confused with jQuery's `.append()`! 😕 _x000D_
_x000D_
Regarding the XSS: I have tested some code that's similar to the example in the docs and it seems to only work when using `raw` because otherwise Rails tries to escape all the HTML, and trying to append this escaped HTML makes the user's browser very unhappy:_x000D_
```ruby_x000D_
$( ""<%= j render 'thing', thing: @thing, thingy: @thingy %>"" ).appendTo(""tr#thing-<%= @thing.id %>"");_x000D_
```_x000D_
```_x000D_
Error: Syntax error, unrecognized expression: &lt;tr id=&quot;thing-6649&quot;&gt;_x000D_
  &lt;td&gt;Blood Music&lt;&#47;td&gt;_x000D_
[snip]_x000D_
```_x000D_
_x000D_
Am I doing something wrong here? And apologies for mistakes - first PR in an open-source project.","C 0000852",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Ok so I did some more digging on this... Turns out it's an issue with the `escape_utils` gem which I'm using. Sorry for wasting your time!","C 0000853",0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0
"Ok, seems it is not that simple and we would need to cherry-pick some more stuff from master.  Would it be desired to get this fixed for 5.2? If yes I would volunteer to dig deeper.","C 0000854",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Unfortunately we can't backport or fix this on 5-2-stable. It requires too much changes that we prefer to not make in a stable branch. Because of that, Rails 5.2 will not support customization of the parameterized mailer job.","C 0000855",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks for the clarification @rafaelfranca 👍 ","C 0000856",0,2,0,0,0,0,0,0,0,0,0,1,2,0,1,1,0,0,0
"That's great! Can we add changelog entry about this change?","C 0000857",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"👍 Added 850e6aaad9c276d1b84708448221eb3becf0b917","C 0000858",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0
"Duplicated with #29311, #29335, #29573, #30276, #31144, #32373, and #33820.","C 0000859",1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0
"I am not sure if this is a cosmetic change. `flat_map` works faster as compared to `map` followed by `flatten`. Need inputs on this.","C 0000860",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Yes, it is considered a cosmetic change unless in a real world benchmark you can show that this performance improvement make any difference.","C 0000861",0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Can you mention about `column_type` in the error message?","C 0000862",0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I've extracted `define_column_methods` to ease to handle all short-hand methods at c7721ea._x000D_
Can you rebase on master?","C 0000863",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"rebased & update error message.","C 0000864",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Thanks!","C 0000865",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0
"Would it make more sense to call this `StringAccessDeprecatedHash` and check for string access or are we genuinely concerned with all cases that aren't symbols? String access is all we are testing for.","C 0000866",0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0
"Why is `# :doc:` here?","C 0000867",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Nitpick: Since you're doing a heredoc and squish, you can break up the line below with a newline.","C 0000868",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0
"I would rather test deprecated behaviour in deprecation tests only.","C 0000869",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Since the new behaviour restricts usage to symbol keys only, I wanted to make sure that we generate a deprecation notice for anything that is not a symbol. For all intents and purposes, you are correct, we are really trying to detect string access, but I thought it wouldn't hurt to be more general in this case._x000D_
_x000D_
I am open to changing the behaviour and renaming the class, if you think otherwise, though.","C 0000870",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"Sorry, that's a left-over, will remove.","C 0000871",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"I have noted in the `Other Information` section of my PR that this is *not* deprecated behaviour._x000D_
_x000D_
> Note that the top-level access to the `OrderedOptions` object returned from `config_for` has indifferent access semantics due to the nature of how `OrderedOptions` works._x000D_
_x000D_
Since, `my_custom_config` is an instance of `OrderedOptions`, top-level key access is indifferent. Thus, this test is asserting that that behaviour is not changed._x000D_
_x000D_
I could put an `assert_not_deprecated` around the string access assertion if it is going to make it more readable and understandable, though.","C 0000872",0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Sure, will do.","C 0000873",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"Ah, my mistake. Leaving it as-is if we don't expect this to be deprecated sounds good to me 👍 ","C 0000874",0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"> I am open to changing the behaviour and renaming the class, if you think otherwise, though._x000D_
_x000D_
I don't feel strongly about it. Let's get a second opinion. ","C 0000875",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,3,0,0
"I'm fine with the name and implementation. We can only have strings and symbols keys anyway.","C 0000876",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"Would `slice`, `extract` and `except` and the `!` versions with string keys work? How about `fetch`?","C 0000877",0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0
"They wouldn't work with the current state of the PR, but I can add similar implementation for those as well.","C 0000878",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Added support for these methods and a test that asserts they all work properly with string keys with deprecations.","C 0000879",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,1,0
"Implementation seems similar to HWA, why not inheriting from it and just override the `convert_key` method ?","C 0000880",0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0
"That's exactly what I tried first and decided against later, for 2 reasons:_x000D_
_x000D_
1. HWIA stores keys as strings, but we want symbols. So it felt like I was resisting the base class._x000D_
2. Even more importantly, `convert_key` is called during both read *and* write, and there is no way to know from which it is called. That would mean we would show deprecation notices as we are interning the YAML parsed hashes and thus showing notices to people who don't even access hashes via string keys. That would be confusing._x000D_
_x000D_
Basically HWIA just was not flexible enough for this purpose. But I did take most of the implementation straight from it._x000D_
_x000D_
Hope this addresses your concern.","C 0000881",0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,3,1,0
"I applied this change to your branch._x000D_
_x000D_
> 1\. HWIA stores keys as strings, but we want symbols. So it felt like I was resisting the base class._x000D_
_x000D_
This seems to work as expected in my tests, and passes the test suite: `Rails.application.config.my_custom_config[:foo] => {:bar=>[""baz""] }`_x000D_
_x000D_
> 2\. Even more importantly, `convert_key` is called during both read _and_ write, and there is no way to know from which it is called. That would mean we would show deprecation notices as we are interning the YAML parsed hashes and thus showing notices to people who don't even access hashes via string keys. That would be confusing._x000D_
_x000D_
I'm not seeing this behaviour. Can you explain how this would happen?_x000D_
_x000D_
We can revert this to not extend from HWIA if need be, but it seems to work as expected AFAICT.","C 0000882",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"So the `[]=` method of HWIA calls `convert_key`  here: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/hash_with_indifferent_access.rb#L94 which would be called ultimately from a source that has nested hashes. If those hashes don't have string keys, we would get a deprecation notice. I guess what's protecting the code from doing that is the fact that you are calling `.to_sym` before passing `key` to `super`, so that writes always get a symbol key._x000D_
_x000D_
I guess that solves it more elegantly than I had it. Thanks for the rework and the simplification. 👍","C 0000883",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0
"I think I've addressed all PR comments and squashed my commits, so this PR should be ready to go if there are no more comments._x000D_
_x000D_
Additionally, I've added an extra commit to fix the order of expected/actual parameters of some of the assertions added in https://github.com/rails/rails/pull/33882. Since that is logically separate from the main work in this PR, I've opted to leave that as a separate commit, and didn't squash it with my other commits.","C 0000884",0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0
"These links are meant to point to the stable 6-0 branch, which will be created after 6-0 release. _x000D_
_x000D_
Example for 5.0: https://github.com/rails/rails/blob/5-0-stable/railties/CHANGELOG.md_x000D_
_x000D_
Master ones only point to changes on master, which are cleared post release.","C 0000885",0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
"Hello, I did it intentionally 'cause those links should refer to `6-0-stable` version of rails/rails. It'll be fixed when we release `6.0.0.rc1`. Thanks for the pull request.","C 0000886",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Whose are unaligned now, since we moved them I'd just remove the alignment","C 0000887",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"It is not clear to my why the cache key is an instance of object. It is just to create a unique value?","C 0000888",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Yes.  I think the original reason was that calculating a hash for the details key was expensive (essentially `{ some: :complex, thing: { a: b: } }.hash`), so we do it once and use an object instead.  Apparently we have to consult the template cache many times, so we need a fast `.hash`._x000D_
_x000D_
I think we can eliminate this cache all together and still maintain speed, but it may require changes to the lookup context.  That's why I'm interested in making the lookup context more private (and be more aggressive with API changes).","C 0000889",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"Makes sense.","C 0000890",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"That's fine we usually don't followup with CHANGELOG updates until right before release but we're close enough this time it's fine. ","C 0000891",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"It feels to me that this is being done at the wrong level. Relation should not know about scoping. Maybe this should be done in the scoping class?_x000D_
_x000D_
cc @matthewd ","C 0000892",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"I agree that here is not best place to do this._x000D_
But Relation has `scoping` method, and already need to know the result of `klass.current_scope(true)` in some places (in `scoping`, `spawn`, etc), so I just do this here since here is only place to do this._x000D_
_x000D_
If we'd not like to do this here, an option is just extracting to method in the scoping class like the following:_x000D_
_x000D_
```diff_x000D_
diff --git a/activerecord/lib/active_record/relation.rb b/activerecord/lib/active_record/relation.rb_x000D_
index 32f0609798..347d745d19 100644_x000D_
--- a/activerecord/lib/active_record/relation.rb_x000D_
+++ b/activerecord/lib/active_record/relation.rb_x000D_
@@ -67,11 +67,7 @@ def bind_attribute(name, value) # :nodoc:_x000D_
     #   user = users.new { |user| user.name = 'Oscar' }_x000D_
     #   user.name # => Oscar_x000D_
     def new(attributes = nil, &block)_x000D_
-      current_scope = klass.current_scope(true)_x000D_
-      block = -> record do_x000D_
-        klass.current_scope = current_scope_x000D_
-        yield record if block_given?_x000D_
-      end_x000D_
+      block = klass.current_scope_restoring_block(&block)_x000D_
       scoping { klass.new(attributes, &block) }_x000D_
     end_x000D_
 _x000D_
diff --git a/activerecord/lib/active_record/scoping.rb b/activerecord/lib/active_record/scoping.rb_x000D_
index 35e9dcbffc..1142a87d25 100644_x000D_
--- a/activerecord/lib/active_record/scoping.rb_x000D_
+++ b/activerecord/lib/active_record/scoping.rb_x000D_
@@ -30,6 +30,14 @@ def current_scope(skip_inherited_scope = false)_x000D_
       def current_scope=(scope)_x000D_
         ScopeRegistry.set_value_for(:current_scope, self, scope)_x000D_
       end_x000D_
+_x000D_
+      def current_scope_restoring_block(&block)_x000D_
+        current_scope = self.current_scope(true)_x000D_
+        -> *args do_x000D_
+          self.current_scope = current_scope_x000D_
+          yield(*args) if block_given?_x000D_
+        end_x000D_
+      end_x000D_
     end_x000D_
 _x000D_
     def populate_with_current_scope_attributes # :nodoc:_x000D_
```","C 0000893",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"> Would not this cause breaking changes?_x000D_
_x000D_
Before this PR #35186, the `self.total_count = Bird.count` in `after_initialize` and the `Bird.find_by!(name: ""canary"")` are affected by `Bird.where(color: ""green"").scoping { }` in `Bird.where(color: ""green"").create`, so `parrot.total_count` will be 0 and `Bird.find_by!(name: ""canary"")` will raise `RecordNotFound`._x000D_
_x000D_
```ruby_x000D_
canary = Bird.create!(color: ""yellow"", name: ""canary"")_x000D_
parrot = Bird.where(color: ""green"").create do |bird|_x000D_
  bird.name = ""parrot""_x000D_
  assert_equal canary, Bird.find_by!(name: ""canary"")_x000D_
end_x000D_
assert_equal 1, parrot.total_count_x000D_
```_x000D_
_x000D_
If anyone depends on the behavior, it is affected by this change._x000D_
But I think the leaking scope is just a bug, probably most people use a workaround `Bird.unscoped.count` and `Bird.unscoped.find_by!(name: ""canary"")` for a long time.","C 0000894",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"That could be a nice refactoring","C 0000895",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
":+1:","C 0000896",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Applied 4cb1438b57067d637c79d49d0662c43b5b4e64c2.","C 0000897",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"@kamipo Thank you for the fix :-)","C 0000898",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I'm still concerned about this breaking change. If people is relying on this behavior they may start to leak information silently like happened some years ago in the GitHub incident._x000D_
_x000D_
Is there any way we can detect people is relying on this behavior and show them a warning?_x000D_
_x000D_
@tenderlove @matthewd @jeremy what do you think?","C 0000899",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Please correct me if I'm wrong, but if the scope is leaking, then the scope in `after_initialize` etc would depend on the context in which the object is created.  People depending on this behavior would have to have exactly one code path for initialization, otherwise they would have to do `unscoped` because the scope would be different each time._x000D_
_x000D_
Could we set the scope object to something that raises an exception if `unscoped` *isn't* called?","C 0000900",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
"Since `scoping` is public API, people may have a usage like the case (1)._x000D_
In the case (1), initialization block and callbacks are affected by the `Bird.where(color: ""yellow"").scoping`._x000D_
I made the case (2) working the same with the case (1) in this PR._x000D_
_x000D_
We could set the exception scope object for the case (2), it will make the case (2) working different back with the case (1) though..._x000D_
_x000D_
```ruby_x000D_
canary = Bird.create!(color: ""yellow"", name: ""canary"")_x000D_
_x000D_
# (1)_x000D_
Bird.where(color: ""yellow"").scoping do_x000D_
  parrot = Bird.create!(color: ""green"") do |bird|_x000D_
    bird.name = ""parrot""_x000D_
    assert_equal canary, Bird.find_by!(name: ""canary"")_x000D_
  end_x000D_
  assert_equal 1, parrot.total_count_x000D_
end_x000D_
_x000D_
# (2)_x000D_
Bird.where(color: ""yellow"").scoping do_x000D_
  parrot = Bird.rewhere(color: ""green"").create! do |bird|_x000D_
    bird.name = ""parrot""_x000D_
    assert_equal canary, Bird.find_by!(name: ""canary"")_x000D_
  end_x000D_
  assert_equal 1, parrot.total_count_x000D_
end_x000D_
```","C 0000901",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"What happens if we realease new versions of our packages? Or if there’s commits in them that haven’t yet been pushed to npm?","C 0000902",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Your concern is correct and we should not this approach. Since there was I wanted to confirm, I temporarily put this in.","C 0000903",2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Could/should this point at the git repo instead?","C 0000904",0,2,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0
":+1: Totally agree. I fixed.","C 0000905",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"OK, this approach works and cut off the run time about 10 minutes.(as kaspth mentioned already :)","C 0000906",0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0
"Fantastic work, @y-yagi!_x000D_
_x000D_
I wonder if we could eventually make `railties/test/isolation/assets/package.json`'s version specifiers auto-generated from the corresponding Gemfile entries or something: that master reference is perfect now, but as this branch becomes a mature `6-0-stable` and webpacker moves forward, it'll presumably become less good.","C 0000907",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"I have been running individual tests a lot these days, this patch speeds things up significantly. 🙌","C 0000908",0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0
"Is operation the right word here? When I think about database operation I think those things you define in the database level https://docs.oracle.com/database/121/TGSQL/tgsql_monit.htm#GUID-DC573FB7-40C5-4D6D-BE81-EF356900B444._x000D_
_x000D_
Maybe resolver_storage?","C 0000909",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"> Is operation the right word here? When I think about database operation I think those things you define in the database level_x000D_
_x000D_
I agree. I think this name evolved out of ""last DB operation"", but I think that's an implementation detail and not necessarily how we're picking. ""storage"" is better, but it isn't necessarily doing storage, this also has awareness that I think ""storage"" implies it wouldn't._x000D_
_x000D_
How about ""resolver context""? What this class does is provide the context needed by the resolver to pick a database for the request. I've pushed up a commit renaming it to this.","C 0000910",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"Ooo I like context. ","C 0000911",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,4,0,0
"Thanks @jhawthorn! ","C 0000912",0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,3,1,0
"Can we name this option `incinerate` and make the default value `true`? Then you’d disable incineration by setting it to false.","C 0000913",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Last thing: this should go above the beta1 heading. beta1 already shipped.","C 0000914",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Ah, missed that. Pushed a fix.","C 0000915",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"@georgeclaghorn Added it to `ActionMailbox::Engine`","C 0000916",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0
"Instead of hardcoding 3 and 4, can you assert that the size increases by one?","C 0000917",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"The intent that removing `target.empty?` is that `target.empty?` should be redundant if staled `@association_ids` is properly cleared. But I missed `CollectionAssociation#build` at #29631._x000D_
_x000D_
Can you move `@association_ids = nil` after the `target << record` line in `replace_on_target` and in `remove_records`?_x000D_
_x000D_
```diff_x000D_
diff --git a/activerecord/lib/active_record/associations/collection_association.rb b/activerecord/lib/active_record/associations/collection_association.rb_x000D_
index 68f53d5c1c..fc2a40d675 100644_x000D_
--- a/activerecord/lib/active_record/associations/collection_association.rb_x000D_
+++ b/activerecord/lib/active_record/associations/collection_association.rb_x000D_
@@ -347,7 +347,6 @@ def _create_record(attributes, raise = false, &block)_x000D_
               add_to_target(record) do_x000D_
                 result = insert_record(record, true, raise) {_x000D_
                   @_was_loaded = loaded?_x000D_
-                  @association_ids = nil_x000D_
                 }_x000D_
               end_x000D_
               raise ActiveRecord::Rollback unless result_x000D_
@@ -384,6 +383,7 @@ def remove_records(existing_records, records, method)_x000D_
 _x000D_
           delete_records(existing_records, method) if existing_records.any?_x000D_
           @target -= records_x000D_
+          @association_ids = nil_x000D_
 _x000D_
           records.each { |record| callback(:after_remove, record) }_x000D_
         end_x000D_
@@ -424,7 +424,6 @@ def concat_records(records, raise = false)_x000D_
               unless owner.new_record?_x000D_
                 result &&= insert_record(record, true, raise) {_x000D_
                   @_was_loaded = loaded?_x000D_
-                  @association_ids = nil_x000D_
                 }_x000D_
               end_x000D_
             end_x000D_
@@ -448,6 +447,7 @@ def replace_on_target(record, index, skip_callbacks)_x000D_
             target[index] = record_x000D_
           elsif @_was_loaded || !loaded?_x000D_
             target << record_x000D_
+            @association_ids = nil_x000D_
           end_x000D_
 _x000D_
           callback(:after_add, record) unless skip_callbacks_x000D_
```","C 0000918",0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0
"Use double quotes.","C 0000919",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"👍 . Are you sure the `if index` case doesn't need the `@association_ids = nil`?","C 0000920",0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"I think that case doesn't need the `@association_ids = nil`, since the `index` is used for replacing with the same record._x000D_
_x000D_
https://github.com/rails/rails/blob/19dc2edaab62864ea96205b78153eed30f752144/activerecord/lib/active_record/associations/collection_association.rb#L283-L288_x000D_
_x000D_
https://github.com/rails/rails/blob/19dc2edaab62864ea96205b78153eed30f752144/activerecord/lib/active_record/associations/collection_association.rb#L411-L417","C 0000921",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Fixed: decided to use a fresh object to maintain the test readability.","C 0000922",2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Can you add the `@association_ids = nil` in `remove_records` too?_x000D_
_x000D_
```diff_x000D_
diff --git a/activerecord/lib/active_record/associations/collection_association.rb b/activerecord/lib/active_record/associations/collection_association.rb_x000D_
index 68f53d5c1c..e718ea8393 100644_x000D_
--- a/activerecord/lib/active_record/associations/collection_association.rb_x000D_
+++ b/activerecord/lib/active_record/associations/collection_association.rb_x000D_
@@ -384,6 +384,7 @@ def remove_records(existing_records, records, method)_x000D_
_x000D_
           delete_records(existing_records, method) if existing_records.any?_x000D_
           @target -= records_x000D_
+          @association_ids = nil_x000D_
_x000D_
           records.each { |record| callback(:after_remove, record) }_x000D_
         end_x000D_
diff --git a/activerecord/test/cases/associations/has_many_associations_test.rb b/activerecord/test/cases/associations/has_many_associations_test.rb_x000D_
index 5fdc5a92fc..d99fa3d324 100644_x000D_
--- a/activerecord/test/cases/associations/has_many_associations_test.rb_x000D_
+++ b/activerecord/test/cases/associations/has_many_associations_test.rb_x000D_
@@ -121,6 +121,14 @@ def setup_x000D_
     Client.destroyed_client_ids.clear_x000D_
   end_x000D_
_x000D_
+  def test_ids_reader_cache_should_be_cleared_when_collection_is_deleted_x000D_
+    firm = companies(:first_firm)_x000D_
+    assert_equal [2, 3, 11], firm.client_ids_x000D_
+    client = firm.clients.first_x000D_
+    firm.clients.delete(client)_x000D_
+    assert_equal [3, 11], firm.client_ids_x000D_
+  end_x000D_
+_x000D_
   def test_sti_subselect_count_x000D_
     tag = Tag.first_x000D_
     len = Post.tagged_with(tag.id).limit(10).size_x000D_
```","C 0000923",0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,1,0
"Looking to the comment looks like this is intend to work with non-Rails app _x000D_
_x000D_
> If the app is a Rails app..._x000D_
_x000D_
Then the problem is that other non-Rails apps can have also the `routes` method defined, so I think checking for routes type is a good solution to the problem 👍 ","C 0000924",0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0
"why the `&&` is being used here? It should always return `self`","C 0000925",0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,2,0,0,0
"same here, it should always return self.","C 0000926",0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0
"The transaction above could be rolled back without exception. So this method should notify that failure to caller._x000D_
_x000D_
```rb_x000D_
        def concat_records(records, raise = false)_x000D_
          ..._x000D_
_x000D_
          raise ActiveRecord::Rollback unless result_x000D_
_x000D_
          records_x000D_
        end_x000D_
```_x000D_
_x000D_
And this method is called by `replace_records`, which expects falsey value when transaction was rolled back._x000D_
_x000D_
```rb_x000D_
        def replace_records(new_target, original_target)_x000D_
          delete(difference(target, new_target))_x000D_
_x000D_
          unless concat(difference(new_target, target))_x000D_
            @target = original_target_x000D_
            raise RecordNotSaved, ""Failed to replace #{reflection.name} because one or more of the "" \_x000D_
                                  ""new records could not be saved.""_x000D_
          end_x000D_
```_x000D_
_x000D_
Note that rollback was introduced in this commit: https://github.com/rails/rails/commit/5dc72378b783e924c5bf079ca660388ec4ac9224#diff-20f545c453ee24942b6f7ae565e9e369R450","C 0000927",0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Looks like the implementation is completely the same with `#<<`, since `CollectionAssociation#concat` flatten `records`._x000D_
_x000D_
https://github.com/rails/rails/blob/272e64101bb6daaa4bbaf2d1c64f64c6b82ead8e/activerecord/lib/active_record/associations/collection_proxy.rb#L1055-L1059_x000D_
_x000D_
https://github.com/rails/rails/blob/272e64101bb6daaa4bbaf2d1c64f64c6b82ead8e/activerecord/lib/active_record/associations/collection_association.rb#L115-L116_x000D_
_x000D_
If we don't intend to behave `#concat` and `#<<` differently (at least the behavior is the same for now), how about just aliasing?","C 0000928",1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Ah, maybe `RecordNotSaved` should be raised by `concat` method itself instead of returning falsey value, isn't it..?","C 0000929",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Remaining the doc style comment is a historical reason, `CollectionAssociation` was replaced by `CollectionProxy` as public API, now `CollectionAssociation` is private API._x000D_
_x000D_
https://github.com/rails/rails/blob/272e64101bb6daaa4bbaf2d1c64f64c6b82ead8e/activerecord/lib/active_record/associations/collection_association.rb#L28_x000D_
_x000D_
Thus we are not always necessary to change the implementation of `CollectionAssociation#concat` unless the change fixes any public behavior.","C 0000930",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"```_x000D_
irb(main):004:0> [:foo] << [:bar]_x000D_
=> [:foo, [:bar]]_x000D_
```_x000D_
_x000D_
While it is different from behavior of plain `Array`, I think this behavior is reasonable for record collection which can't contain nested array. +1 for aliasing!","C 0000931",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0
"I'll revert CollectionAssociation and remove `Returns +self+` part of doc.","C 0000932",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"```suggestion_x000D_
      # Add +records+ to this association. Since <tt><<</tt> flattens its argument list_x000D_
```","C 0000933",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"```suggestion_x000D_
      # to the association's primary key. Since <tt><<</tt> flattens its argument list and_x000D_
      # inserts each record, +push+ and +concat+ behave identically. Returns +self+_x000D_
```","C 0000934",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Thank you for reviewing! Revised the commit.","C 0000935",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Document fixed!","C 0000936",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0
"Thanks!","C 0000937",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0
"I confirmed this changed with [this commit](https://github.com/buildkite/terminal-to-html/commit/f19721a00ff6736207a5a02d3275f73526214978) _x000D_
","C 0000938",0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0
"@betterzega Thanks! In the future, please add [ci skip] to commit message for skip the Travis build._x000D_
","C 0000939",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"this `as =` is not necessary here anymore.","C 0000940",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"nice catch, thanks!","C 0000941",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Hey, the dot can be eliminated because it is a word boundary._x000D_
","C 0000942",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"I think the idea is that this was only done when `i18n_full_message` is set to true, otherwise it would be a change in behavior without deprecation.","C 0000943",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"We could only call the remove `if i18n_full_message` but without checking if the class respond to `i18n_scope`.","C 0000944",1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0
"Closing this, because I now know the reason why the `.remove` had to be moved.","C 0000945",0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
"I won't claim to understand all the layers at play here, but passing information that's not in the cache key into a cached value's calculation makes me pretty nervous. As you're deeper in this code, can you point me to why this is safe? (Or, should we instead be shoving `locals` into `details` before the cache block, when such locals are supplied?)","C 0000946",0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0
"> passing information that's not in the cache key into a cached value's calculation makes me pretty nervous._x000D_
_x000D_
It is part of the cache key, just in a round-about way (unfortunately).  The details hash is [used to calculate the first `key`](https://github.com/rails/rails/blob/7a3afc9a69842ddf3e0edbdf078f8f3bf3c4b8f7/actionview/lib/action_view/lookup_context.rb#L171-L182).  If the locals change, the return value of `DetailsKey.get(user_details)` will change.  In this function `key` is `details_key`.","C 0000947",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Ahh, right. _x000D_
_x000D_
.. does that mean `details` could be removed from the `cached` call too?","C 0000948",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"It could, but it [gets passed to this decorate](https://github.com/rails/rails/blob/2799a502ad361451ba26bcab8f9039268160bdf6/actionview/lib/action_view/template/resolver.rb#L187) method.  If we can make the Template objects read-only, then we can delete the `decorate` method and then remove the parameters.","C 0000949",0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
"> Do we consider the resolver to be public API? The class isn't really documented, so I would think ""no"". If we do consider it public, I think we should make it private._x000D_
_x000D_
Yes, the resolver is part of the public API. José's idea was to make possible to people to write custom resolvers to, for example, read a template from the database (he shows an example of that in his book) We at Shopify have a custom resolver to build a list of all view paths that are possible at boot time. Why do you think it should be private?","C 0000950",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"> Why do you think it should be private?_x000D_
_x000D_
Some of the method parameters require knowledge of internals that I don't think people should have.  The main example of this is the `key` parameter and the `details` hash [here](https://github.com/rails/rails/blob/2799a502ad361451ba26bcab8f9039268160bdf6/actionview/lib/action_view/template/resolver.rb#L145).  Key and details have to do with caching.  If someone wants to write a caching resolver, they should wrap a non-caching resolver with their own caching strategy.  I guess the main issue for me is that these parameters are leaking implementation details about the class.  Since the API is public, I think it couples us to the current caching strategy._x000D_
_x000D_
TBH, I think we can maintain the API, I just want to have a gauge for how quickly it can change.  I would like to change it more quickly, so making it private would help.  But if there are real apps (like Shopify) using it, then I'll be more careful about maintaining the API.","C 0000951",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"To be fair, I think we can change this more quickly than other public APIs we have. It is not like every single developer would write a custom resolver, but I think we should keep possible to write one if they like to. If this API changes without deprecation it would not be the end of the world.","C 0000952",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"@rafaelfranca I'll pick up a copy of José's book.  I can use that to get more context, and maybe we can implement the ideas in the book but with a smaller API","C 0000953",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Thank you for the pull request but we can't use the post install message for this. even users that don't want to use this gem will have to see it, and every time you install in every machine this will also presented.","C 0000954",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"@rafaelfranca _x000D_
Hi, Thank you for the reply and I agree with you._x000D_
Can you share opinion to resolve or where we can add in Rails. I appreciate providing your time.","C 0000955",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0
"Can we change it to `~> 1.3`, `>= 1.3.6`?","C 0000956",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"sure thing! I was not sure about sqlite3 versioning. ","C 0000957",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Closes #35153","C 0000958",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0
"Am I missing something, or doesn't the underlying issue break support for the default adapter for all existing rails apps?_x000D_
_x000D_
Locally:_x000D_
_x000D_
```sh_x000D_
$ rails new sqlite_app; cd sqlite_app_x000D_
$ rails s_x000D_
# localhost:3000 produces  Error loading the 'sqlite3' Active Record adapter. Missing a gem it depends on? can't activate sqlite3 (~> 1.3.6), already activated sqlite3-1.4.0. Make sure all dependencies are added to Gemfile. (LoadError)_x000D_
```_x000D_
_x000D_
Is backporting this sufficient?","C 0000959",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Yes, backporting is sufficient._x000D_
_x000D_
And no, it doesn't break all existing applications, it only breaks new application as you can see in your example.","C 0000960",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"As for the red CI:_x000D_
- some of the failures are unrelated https://travis-ci.org/rails/rails/jobs/488684686  https://travis-ci.org/rails/rails/jobs/488684690_x000D_
- guides specs are failed due to the using source code from master.  https://travis-ci.org/rails/rails/jobs/488684700  https://travis-ci.org/rails/rails/jobs/488684701 Looks like they'll be fixed once the PR is merged_x000D_
_x000D_
E.g. https://github.com/rails/rails/blob/cc2d614e6310337a9d34ede3e67d634d84561cde/guides/bug_report_templates/active_record_migrations_gem.rb#L5-L13_x000D_
","C 0000961",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0
"I'm merging this._x000D_
_x000D_
Side note: it bothers me that if I do a new SQLite3 release it breaks tests.  Loosening up the requirements makes sense, but it seems like we should be adding the required SQLite gem version to the bug report template (if that's possible)._x000D_
_x000D_
Thanks!","C 0000962",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Hey all, we're still having the problem where running blacklight from scratch with the easy instructions (https://github.com/projectblacklight/blacklight/wiki/Quickstart) is giving us an error. Do you know why these merged changes aren't fixing the problem for us? Also, if there's a better place to post this I'm happy to post this elsewhere._x000D_
_x000D_
`Error: ActiveRecord::StatementInvalid in CatalogController#index`_x000D_
`raise(ActiveRecord::StatementInvalid, ""Could not find table '#{table_name}'"") if structure.empty?`","C 0000963",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@dronn why do you think that it's related?","C 0000964",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"@sponomarev it's related to the sqlite3 version, but I think you're right in that I should make this an issue instead of commenting here. If I'm still struggling with it I'll create an issue. Thanks!","C 0000965",0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0
"_x000D_
Encounter the same problem, ask for help! ! There is no corresponding solution in the official, there are many ways to deal with google search.","C 0000966",0,0,0,0,1,0,0,0,0,0,1,0,0,0,3,1,0,0,0
"`_x000D_
Puma caught this error: Error loading the 'sqlite3' Active Record adapter. _x000D_
Missing a gem it depends on? can't activate sqlite3 (~> 1.3.6), already activated sqlite3-1.4.0. Make sure all dependencies are added to Gemfile. (LoadError)_x000D_
`","C 0000967",1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0
"@zhenxingdev Please, check https://github.com/rails/rails/issues/35153#issuecomment-460455573","C 0000968",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks!","C 0000969",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks!","C 0000970",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
":scissors: this extra newline, please.","C 0000971",1,2,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"I have completed removing extra newline.","C 0000972",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Can you show where the generator and the doc generates the `to:` form? Those two versions don't have two inconsistent hash format, they actually have two different argument numbers. The `get 'post/:id' => 'posts#show'` only has one argument, `get 'post/:id', to: 'posts#show'` have two._x000D_
_x000D_
I'm almost sure `get 'post/:id' => 'posts#show'` is the preferred by the framework and I could not find where the generator generates the `get 'post/:id', to: 'posts#show'` form.","C 0000973",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"We don't generate this code, but I do agree the latter syntax is better so I merged.","C 0000974",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"> Can you show where the generator and the doc generates the to: form? _x000D_
_x000D_
Sorry if that was unclear: I meant the generated resourceful routes use Ruby 1.9 hash syntax.","C 0000975",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"👍 ","C 0000976",0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks!","C 0000977",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"👍 ","C 0000978",0,0,1,0,0,0,0,0,1,0,1,0,0,2,1,0,0,1,0
"Hum this change is not so naive :sweat_smile:  because it seems that the order the data is extracted from the records and the order to apply the registration matters._x000D_
_x000D_
I'm going to try to improve the extract part, measure it and see if it worths it.","C 0000979",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"The last change seems to work, at least in my dev env but the improvement is less as you can imagine. So is not worthy to apply it just for that. Sorry for the noise. _x000D_
_x000D_
Closing this PR_x000D_
","C 0000980",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0
"There is a random failure being caused by the new tests being added. Can you fix it?","C 0000981",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"👋 Thanks for opening this PR ! We are targeting HEAD in our monolith and found that this commit is breaking few of our tests._x000D_
TL;DR `Model.destroy_all` doesn't do anything when fixtures gets loaded and the parent try to destroy all children, this is because the `counter_cache_value` is 0 when fixtures gets loaded, we end up not loading the target https://github.com/rails/rails/pull/35127/files#diff-7eee2aa7b5cdbffb0bc3ef2eb7d0b76fR70_x000D_
_x000D_
Although the counter_cache value not getting set seems to be an issue only in tests, isn't it risky that if for any reasons the counter_cache is desync we can end up not deleted any records?_x000D_
_x000D_
I created a reproduction script here https://gist.github.com/Edouard-chin/df15e2f11a9129880d264c8d861a11ae","C 0000982",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0
"Thanks! ","C 0000983",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0
"What is the plan to this class? We will always have a LegacyTemplate or we plan to remove it some day?","C 0000984",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"I think we can remove it eventually.  I want to change [this call](https://github.com/rails/rails/blob/2169bd3d2a9d2f331a5dd6e41d9d638e0da6117c/actionview/lib/action_view/template.rb#L307) to pass in the view and the source.  But for backwards compatibility we need to pass an object that has a reference to the mutated source._x000D_
_x000D_
I'll follow up with another commit that deprecates arity one blocks","C 0000985",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"I changed this to not deprecate `refresh`.  I think we might be able to deprecate and remove it in the future, but right now it's not clear.  In test, we have a custom resolver that instantiates template objects that have a view path, but aren't associated with a file:_x000D_
_x000D_
  https://github.com/rails/rails/blob/2169bd3d2a9d2f331a5dd6e41d9d638e0da6117c/actionview/lib/action_view/testing/resolvers.rb#L26-L47_x000D_
_x000D_
After this PR, the common case will be to instantiate `FileTemplate` objects, so I just implemented a `refresh` on `FileTemplate` that returns itself (since it can get the source).","C 0000986",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"> I changed this to not deprecate `refresh`. I think we might be able to deprecate and remove it in the future, but right now it's not clear. In test, we have a custom resolver that instantiates template objects that have a view path_x000D_
_x000D_
Ah right. This is something we support and José's book talk about it in the ""Retrieving View Templates from Custom Stores"" chapter https://pragprog.com/book/jvrails2/crafting-rails-4-applications","C 0000987",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"While upgrading to Rails 6.0 I'm getting warning:_x000D_
```_x000D_
DEPRECATION WARNING: Single arity template handlers are deprecated.  Template handlers must_x000D_
now accept two parameters, the view object and the source for the view object._x000D_
Change:_x000D_
  >> Class#call(template)_x000D_
To:_x000D_
  >> Class#call(template, source)_x000D_
 (called from <top (required)> at /home/wojtek/Projects/some_project/config/environment.rb:5)_x000D_
```_x000D_
which is not really clear where to find it. I suspect some gem, as I don't mess with templates in the app._x000D_
Do you have a clue how to track it?","C 0000988",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"This shouldn't be necessary if you [include `ActiveJob::TestHelper`](https://github.com/rails/rails/blob/master/activejob/lib/active_job/test_helper.rb) in your test case ([see guides](https://edgeguides.rubyonrails.org/testing.html#custom-assertions-and-testing-jobs-inside-other-components)). This gives you queue adapter overriding for free spanning from setup to teardown in tests. I believe we provide the async adapter by default if you just want your jobs to run and don't care about asserting their behaviour.","C 0000989",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"Closing for reasons mentioned above. If you're testing jobs, you should be using `ActiveJob::TestHelper`. Thank you for your pull request.","C 0000990",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"Thanks! In the future, you can add `[ci skip]` to your commit message for documentation-only changes to skip the Travis build.","C 0000991",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,0
"This is fine: https://en.wiktionary.org/wiki/reraise","C 0000992",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"https://www.merriam-webster.com/dictionary/ahold","C 0000993",0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"https://www.dictionary.com/browse/useable","C 0000994",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0
"Can you keep just this and revert all other changes.","C 0000995",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"sure","C 0000996",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"@abhaynikam Thanks! In the future, please add [ci skip] to commit message for skip the Travis build.","C 0000997",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"@y-yagi : Sure. I'll keep that in mind. Thanks.","C 0000998",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Thanks @jhawthorn!!","C 0000999",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"I don't see `receiver` used in any other method docs for this class. Maybe ""Adds a foreign key _to the table using a supplied table name_"" would sound better?","C 0001000",0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0
"Good point. I'll use that.","C 0001001",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This change isn’t worth it. The other variables would have to be renamed as well. But let’s keep the git history here.","C 0001002",0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0
"@kaspth reverted this change.","C 0001003",1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,2,0,0,0
"@eileencodes I confirm the fix, it's now working as it was before._x000D_
_x000D_
Thanks for this PR and for all your amazing contributions to the Rails :tada:","C 0001004",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Thanks for following up @msdundar! And thank you for testing the Rails 6 beta so we could find and fix this issue before the final release ❤️ ","C 0001005",0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0
"How about just using `SQLCounter.log` instead of `SQLCounter.log_all`?_x000D_
","C 0001006",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"And also,  looks like `test_has_one_does_not_use_order_by` also have the same problem._x000D_
_x000D_
https://github.com/rails/rails/blob/41ffddbc8b7faec66a26bd48dfd36a9def6cc23f/activerecord/test/cases/associations/has_one_associations_test.rb#L36-L42","C 0001007",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"Thanks for the review. Updated as suggested.","C 0001008",1,0,0,0,0,0,0,0,0,1,0,0,0,0,2,2,3,1,0
"These test cases were added at b0a8ef1._x000D_
Seems that was intended to test `.firm` part, but it also covered `Client.find(3)` part._x000D_
I'd prefer to keep to cover both part as before to prevent any other regression in the future.","C 0001009",0,1,0,0,0,0,1,0,0,0,3,0,0,0,1,2,0,0,0
"Show the failed queries `""ORDER BY was used in the query: #{log_all}""` was added at 3d1ff79 to ease to find the cause._x000D_
Can you add the same change to `test_belongs_to_does_not_use_order_by` too?","C 0001010",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Thanks for the review. Removing `.last` to check at least two sql queries. ","C 0001011",1,0,0,0,0,0,0,0,0,0,3,0,0,1,0,0,1,0,0
"Let’s call the splat argument `options`, like we do in the S3 service.","C 0001012",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Hi George,_x000D_
  I have renamed that to options now_x000D_
_x000D_
Thanks for the feedback","C 0001013",0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0
"What do you think about renaming the `context` argument to `renderer` or similar?","C 0001014",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"Ya, I think we should.","C 0001015",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"If formats is `NULL`, should change the value to `nil`? _x000D_
If this is left as `NULL(Object.new)`, it will be incorrectly judged where the value is nil or not. _x000D_
_x000D_
For example, if using web-console, `NoMethodError` will be raise in lookup context. _x000D_
_x000D_
```_x000D_
DEPRECATION WARNING: ActionView::Base instances should be constructed with a view renderer,_x000D_
assigments, and a controller._x000D_
 (called from new at /home/y-yagi/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/template.rb:21)_x000D_
_x000D_
NoMethodError: undefined method `delete' for #<Object:0x000055e2e6120880>_x000D_
	from /home/y-yagi/src/rails/master_y_yagi/rails/actionview/lib/action_view/lookup_context.rb:258:in `formats='_x000D_
	from /home/y-yagi/src/rails/master_y_yagi/rails/actionview/lib/action_view/base.rb:206:in `build_renderer'_x000D_
	from /home/y-yagi/src/rails/master_y_yagi/rails/actionview/lib/action_view/base.rb:243:in `initialize'_x000D_
	from /home/y-yagi/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/template.rb:21:in `new'_x000D_
	from /home/y-yagi/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/template.rb:21:in `render'_x000D_
	from /home/y-yagi/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:37:in `block in call'_x000D_
	from /home/y-yagi/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:20:in `catch'_x000D_
	from /home/y-yagi/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:20:in `call'_x000D_
	from /home/y-yagi/src/rails/master_y_yagi/rails/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:33:in `call'_x000D_
```_x000D_
","C 0001016",0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"@y-yagi I think so. Can you commit the change?","C 0001017",0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0
"Already fixed by eda0f574f129fcd5ad1fc58b55cb6d1db71ea95c.","C 0001018",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"I don't think we can iterate over `pool.connections` here without holding the pool's lock._x000D_
_x000D_
Regardless, we don't need to clear the query cache on all connections; we only need read-your-writes consistency for the current thread. If it's acceptable for a concurrent request in another process to see stale data, it should be acceptable for a concurrent request in another thread, too._x000D_
_x000D_
```suggestion_x000D_
            pool.connection.clear_query_cache! if pool.active_connection?_x000D_
```","C 0001019",0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,2,1,0,0
":+1:_x000D_
_x000D_
Beyond it being acceptable, having one thread's wipe out every cache in the system would be not-great for hit rates / performance._x000D_
_x000D_
Along that line, I think I'd actually go further, and limit this to only the current-thread-owned connection _in the peer pools_ -- the corresponding same-named pool in other handlers -- not all pools.","C 0001020",4,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0
"Yea this clearly blows up in the tests but also @eugeneius version doesn't pass either._x000D_
_x000D_
I'm starting to get really frustrated with the query cache. It seems like it just wasn't built for multiple connections and we may need to rethink it sooner rather than later.","C 0001021",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Ok I found a fix I think and I'm not proud of it but the tests pass locally. I'm not sure what consequences to test for at this point if the tests pass on CI. ","C 0001022",1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0
"@tenderlove and I looked at this today and came up with a different solution. We've fixed the issue by adding a new method that clears the query cache for all the connections but only for the current thread._x000D_
_x000D_
The reason the thread test was failing before with @eugeneius's suggested change was because when we call `clear_active_connections!` that calls `disable_query_cache` which clears all the caches for all the connections. The previous change broke that, but we made a new change that's better and more accurate.","C 0001023",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"Can you change this to ""Support for _parameter permissions_ in combination with Active Model mass assignment.""?","C 0001024",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I think ""filtering"" might better convey what it actually does","C 0001025",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Ah, I agree. Let's go with ""Support for _parameter filtering_ in combination with Active Model mass assignment."" instead.","C 0001026",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks, reads much better!","C 0001027",0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Sorry to nitpick, but this doesn't really make sense to me. Can we go with `""allows all requests if hosts is empty""`, and `""hosts can be a single element""` below?","C 0001028",0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Sure!","C 0001029",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`""hosts can be a single element array""`","C 0001030",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"`""hosts can be a string""`","C 0001031",0,0,0,0,0,0,2,0,1,0,0,0,0,0,1,0,1,2,0
"`""hosts include .localhost in development""`","C 0001032",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"I have fixed the other references I found. Searching for `whitelist` finds other references, but they seem like class names and settings, which would be harder to change at this point._x000D_
_x000D_
For one, I cat at least play my part and remove the `whitelist` bits and settings I have in `web-console`. I won't change the settings themselves for now (so I don't break the existing installs), but at least alias them more proper wording and documented it in the README.","C 0001033",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"No worries, fixed those tests names as well. :+1:","C 0001034",0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Thanks!","C 0001035",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Should this condition match the one above? (I see it already doesn't, but I'm not sure whether that's right?)","C 0001036",0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"I think this might be one of those rare cases where a negative condition inside an `unless` actually reads better?_x000D_
_x000D_
```suggestion_x000D_
          unless @connection.supports_lazy_transactions? && lazy_transactions_enabled? && options[:lazy] != false_x000D_
```","C 0001037",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0
"Hum. That's weird indeed. It looks like it should have been part of the conditional but wasn't._x000D_
_x000D_
I'll try to figure out what this variable is for.","C 0001038",0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"Ok, it's a small optimization flag, and was indeed incorrectly set before._x000D_
_x000D_
I fixed it as well.","C 0001039",1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Maybe we should consider calling this `_lazy` or something, to flag that even though it's on a public API method, the option itself is not public API?","C 0001040",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"> Maybe we should consider calling this `_lazy` or something, to flag that even though it's on a public API method, the option itself is not public API?_x000D_
_x000D_
Indeed. I opened the PR a bit early to get a CI run._x000D_
_x000D_
IMO that option could make sense as a public API, but we don't really need it for this PR, and it's a bit late in the release cycle to introduce a new option like this._x000D_
_x000D_
I'm 👍 to rename it as `:_lazy`.","C 0001041",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"@matthewd I applied the changes you suggested, and the CI is about to go green (railties is very slow not sure why)._x000D_
_x000D_
cc @rafaelfranca ","C 0001042",0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Why version locked `""~> 3.5.1""` (version down `3.141.0` to `3.5.2`)?","C 0001043",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"That was by accident. Next time you fix it in master can you leave a note here so I don't spend time starting to fix it? 😄 Thanks! _x000D_
_x000D_
Fixed in https://github.com/rails/rails/commit/1cfa913948a5ed37eb78ab5e97552384788245c7","C 0001044",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"No worries @Edouard-chin we've all been there! ","C 0001045",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@gmcgibbon added a changelog entry, squashed and rebased.","C 0001046",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks!","C 0001047",0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Hi,_x000D_
someone reply to my PR, please ?","C 0001048",0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0
"I would like to give you @Samemura a good advice that might help hit upon a good word or an implementation for for your intention. To begin with, I must explain some grammars. In general, prepositions take objects to the right as their complements, and Adverbs to the left (like one day **ago** and **in** one day), so when we want to write code in a similar way, we have to choose a preposition for a method name (unless you want to define a DSL that enables us to place methods after an object like `1.day.earlier.`) Besides, the word `before` can be a preposition, adverb, and conjunction. To name a few, when a noun phrase follows `before`, it means time prior to some event or an object in front of something, and in both cases, before is a preposition. To indicate time prior to a specific event, We can use the conjunction `before` as well. for example, `before dinner` and `before we have dinner` mean the same. In your code example, `before` acts as a preposition, so the meaning is `time prior prior to a day`, and is ambiguous because we don't have any idea about what and when the day is, and can interpret it as a yesterday or some time before some day, except for the case we use something like `today` instead of `1.day`. So It could be that this wouldn't improve code naturalness. Chaining methods, on the other hand, can serve your purpose,  allowing us to write `1.day.before` and `1.day.ago`, which are in the completely, grammatically correct order. Have you ever given it a try? or Any other good preposition?","C 0001049",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Hi @ken-mike, thank you for the comments and agreed with you for basic grammar._x000D_
_x000D_
> (`3.days.ago`, `1.day.ago`, `1.day.from_now`, etc.)_x000D_
_x000D_
These are good readability for simple use case like,_x000D_
```_x000D_
User.where(created_at: 3.days.ago.all_day)_x000D_
```_x000D_
_x000D_
But the case to calculate date or time, not so good to me._x000D_
```_x000D_
user.created_at.ago(3.days)_x000D_
```_x000D_
_x000D_
Below syntax I like to,_x000D_
```_x000D_
user.create_at.before(3.days)_x000D_
```","C 0001050",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@Samemura Couldn't you write the below to calculate time or days prior to a user creation date?_x000D_
```ruby _x000D_
3.days.before(user.created_at) _x000D_
# or to calculate time from the creation_x000D_
3.days.after(user.created_at)_x000D_
```","C 0001051",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Sometimes we would like to write code as english and it's ideal for human point of view but might not be happened in many case._x000D_
_x000D_
Simply, these `#before` / `#after` are easier to think and remember when coding for me compared to `#since` / `#ago`._x000D_
_x000D_
Also I would like to hear the thinking from some people.","C 0001052",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks for the suggestion, but I agree that these spellings are less clear in meaning; `3.days.before(user.created_at)` and `user.created_at - 3.days` seem like better existing choices. (I agree `user.created_at.ago(3.days)` is also confusing.)","C 0001053",0,0,0,0,0,0,0,0,0,0,2,1,0,1,1,0,0,0,0
"Thanks! In the future, you can add `[ci skip]` to your commit message for documentation-only changes to skip the Travis build.","C 0001054",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0
"@kamipo Thank you! I will be sure to use `[ci skip]` for documentation-only contributions in the future. ","C 0001055",0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Build failures seem like network errors (trying to connect to Azure??). We should probably not be connecting to the network in test._x000D_
_x000D_
<img width=""755"" alt=""job 58169 5 - rails rails - travis ci 2019-01-28 13-11-57"" src=""https://user-images.githubusercontent.com/3124/51866665-67cc7180-22fe-11e9-9a32-a47cd07a6171.png"">_x000D_
","C 0001056",1,1,0,0,0,0,0,0,0,0,0,0,1,0,3,0,0,0,0
"This newline should be here, but not big deal. After the release header we always put two","C 0001057",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"Added the newline back 👍 ","C 0001058",0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"typo: missing `i` in `applcation`","C 0001059",0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"```suggestion_x000D_
    Adds a middleware that can be inserted into your application that will_x000D_
```","C 0001060",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"```suggestion_x000D_
      # The Resolver class should not be manipulated directly. If your_x000D_
```","C 0001061",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Not caused by this PR, but I'm concerned about using mixed `:writing` and `:reading` roles in the same request, since `:reading` (`replica?` is true) connection isn't clear the query cache implicitly even if the `:writing` connection of the `reading` is executed update queries._x000D_
_x000D_
Is it the user responsibility?","C 0001062",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@kamipo I'm not sure I follow. Do you mean if during a request that was a get/head we did a write to the database the query cache wouldn't get cleared for that write?  Something like this maybe_x000D_
_x000D_
```ruby_x000D_
# get /something/download_x000D_
def download_x000D_
  @file = file_download_x000D_
   ActiveRecord::Base.connected_to(role: :writing) do_x000D_
     @file.update_download_count_x000D_
   end_x000D_
_x000D_
   send_data file_x000D_
end_x000D_
```_x000D_
_x000D_
I think we have this type of code in the GitHub application and I don't think we have an issue, but let me know if that's the kind of thing you're worried about and I can try to get a test together (or we can solve this later / tell the user they should be responsible for it depending on how serious of an issue we think it is).","C 0001063",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I'm worried about the following case. I suppose that people would be confused by the staled cache, since disabling query cache makes working all things as expected. https://github.com/kamipo/rails/commit/855f59c3772e29d48d97ff650de67e2b4e3e3f79_x000D_
_x000D_
https://github.com/kamipo/query_cache_test/commit/3cb54dd88cb7bac07ee6d45765bd277065c6be35_x000D_
```diff_x000D_
diff --git a/app/controllers/posts_controller.rb b/app/controllers/posts_controller.rb_x000D_
index 90b34dd..1fa3439 100644_x000D_
--- a/app/controllers/posts_controller.rb_x000D_
+++ b/app/controllers/posts_controller.rb_x000D_
@@ -26,7 +26,19 @@ class PostsController < ApplicationController_x000D_
 _x000D_
   # PATCH/PUT /posts/1_x000D_
   def update_x000D_
+    # (2)_x000D_
+    #_x000D_
+    # The following `@post.update(post_params)` is happened on the `:writing` connection,_x000D_
+    # and then clear the cache on the `:writing` connection._x000D_
+    # The cache on the `:reading` connection is still remained._x000D_
     if @post.update(post_params)_x000D_
+      # (3)_x000D_
+      #_x000D_
+      # If use the `:reading` connection after update queries are executed on the `:writing` connection,_x000D_
+      # the query cache on the `:reading` connection is already staled,_x000D_
+      # people need to care about that case by themselves for now._x000D_
+      set_post_x000D_
+_x000D_
       render json: @post_x000D_
     else_x000D_
       render json: @post.errors, status: :unprocessable_entity_x000D_
@@ -41,7 +53,15 @@ class PostsController < ApplicationController_x000D_
   private_x000D_
     # Use callbacks to share common setup or constraints between actions._x000D_
     def set_post_x000D_
-      @post = Post.find(params[:id])_x000D_
+      # (1)_x000D_
+      #_x000D_
+      # All connection pools are enabling query cache by default._x000D_
+      # So the following `Post.find(params[:id])` makes the cache on the `:reading` connection._x000D_
+      #_x000D_
+      # https://github.com/rails/rails/blob/536a190ab3690810a3b342b897f2585c4971229d/activerecord/lib/active_record/query_cache.rb#L31-L33_x000D_
+      Post.connected_to(role: :reading) do_x000D_
+        @post = Post.find(params[:id])_x000D_
+      end_x000D_
     end_x000D_
 _x000D_
     # Only allow a trusted parameter ""white list"" through._x000D_
diff --git a/test/controllers/posts_controller_test.rb b/test/controllers/posts_controller_test.rb_x000D_
index a35e2e1..b85121d 100644_x000D_
--- a/test/controllers/posts_controller_test.rb_x000D_
+++ b/test/controllers/posts_controller_test.rb_x000D_
@@ -24,8 +24,9 @@ class PostsControllerTest < ActionDispatch::IntegrationTest_x000D_
   end_x000D_
 _x000D_
   test ""should update post"" do_x000D_
-    patch post_url(@post), params: { post: { body: @post.body, title: @post.title } }, as: :json_x000D_
+    patch post_url(@post), params: { post: { body: @post.body, title: ""Updated"" } }, as: :json_x000D_
     assert_response 200_x000D_
+    assert_match %r/""title"":""Updated""/, @response.body_x000D_
   end_x000D_
 _x000D_
   test ""should destroy post"" do_x000D_
diff --git a/test/test_helper.rb b/test/test_helper.rb_x000D_
index 0ff12e7..5d82a8b 100644_x000D_
--- a/test/test_helper.rb_x000D_
+++ b/test/test_helper.rb_x000D_
@@ -10,4 +10,11 @@ class ActiveSupport::TestCase_x000D_
   fixtures :all_x000D_
 _x000D_
   # Add more helper methods to be used by all tests here..._x000D_
+_x000D_
+  # `enlist_fixture_connections` replaces connection pools in non-default handlers_x000D_
+  # by default writer connection pool._x000D_
+  # We can't test `:reading` connection unless suppressing the effect of the method for now._x000D_
+  def enlist_fixture_connections_x000D_
+    []_x000D_
+  end_x000D_
 end_x000D_
```","C 0001064",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks for the example @kamipo. That is something users shouldn't do. You don't want to wrap the `set_post` in a reading only block because you don't know whether the replicas will be caught up or not. The request and middleware should handle that particular case for you._x000D_
_x000D_
Users should only use the reading block in their application when they know they absolutely want to send all traffic regardless of recent writes to the replicas. We do that in some places in our application as well but we're really careful about when we use it.","C 0001065",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Thanks for your explaining, I understand that using the reading block carefully is the user responsibility._x000D_
_x000D_
I was encountered the staled query cache issue in our app before. In that time, I thought that the easiest way to solve that issue is not enabling query cache._x000D_
_x000D_
But I realized that we have no official way to not enabling query cache, since the `QueryCache` does two things, removing the enabling query cache causes removing the releasing active connection to pool too._x000D_
_x000D_
https://github.com/rails/rails/blob/8309cd2c68f548987b8447475c7735a19714baaa/activerecord/lib/active_record/query_cache.rb#L31-L33_x000D_
_x000D_
https://github.com/rails/rails/blob/8309cd2c68f548987b8447475c7735a19714baaa/activerecord/lib/active_record/query_cache.rb#L41-L44_x000D_
_x000D_
So people need to care about that the query cache in the replica connections isn't cleared in a request implicitly for now.","C 0001066",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Hey @eileencodes! Thanks for the awesome idea and the implementation! Looking forward to getting it merged. Do you think that it makes sense to add out-of-the-box resolvers for MySQL and PostgreSQL which take into account actual lag between primary/replica?","C 0001067",1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"This looks pretty good, but it won't work for api calls that don't use a session, right ?_x000D_
We use something similar, but we cache last-write based on user+ip to avoid that issue,_x000D_
so would be great if it's easy to plug in a different ""decider"" later on and maybe call out this downside in the docs.","C 0001068",0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0
"@grosser the `DatabaseSelector` middleware is designed such that you can configure it with a strategy for determining ""last write"".  In your `config.ru` just provide the `DatabaseSelector` with a classes that implement the strategy you would like to use.  We just default the strategy to use the session.","C 0001069",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"Cool and highly desired feature for many projects! Great to see it being implemented inside Rails._x000D_
_x000D_
But why 5 sec is hard-coded as a constant? I'm sure many would like to be able to configure it (raising to 30 seconds or even higher).","C 0001070",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"> Cool and highly desired feature for many projects! Great to see it being implemented inside Rails._x000D_
> _x000D_
> But why 5 sec is hard-coded as constant? I'm sore many would like to be able configure it (perhaps to higher values)._x000D_
_x000D_
The default is hardcoded, but the actual value used is determined by this method:_x000D_
_x000D_
https://github.com/rails/rails/pull/35073/files#diff-40ebc1f4683641b47eb0c9a447c08998R77_x000D_
_x000D_
so one could simply write their own `Resolver` with whatever behavior is appropriate for their case, e.g.,_x000D_
_x000D_
```_x000D_
# ..._x000D_
class VeryPatientResolver < Resolver_x000D_
  def send_to_replica_wait_time_x000D_
    60.seconds_x000D_
  end_x000D_
end_x000D_
```_x000D_
_x000D_
All that's actually needed is to have your own definition of `read_from_primary?`, though, like the docs say.","C 0001071",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"@fj  thanks for the answer. Well, it's good that it can be changed without code patching, but with this way, it's still hard to change, it's not so clear._x000D_
_x000D_
I think that it would be much better if this parameter can be tuned via changing configuration files, not via coding. In big projects code changes and config changes are two very separated things.","C 0001072",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"As requested by @dhh in the Rails chat I've added configuration options for the delay timeout, and setting the resolver and operations classes._x000D_
","C 0001073",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,0
"To answer other unanswered questions here:_x000D_
_x000D_
Scope creep is real 😄 and while I think it would be awesome to have Rails calculate replica lag it's too much for this PR. This is a good base for Rails 6._x000D_
_x000D_
Improving built in switching strategies is definitely something I want to see in the future. We're also experimenting with using MySQL GTID's for switching, but we're not there yet.  We're not done improving multiple database and Active Record, and we have a lot more stuff to upstream from GitHub. ","C 0001074",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"Need to change this in [actiontext/db/migrate/201805281641_create_action_text_tables.rb](https://github.com/rails/rails/blob/master/actiontext/db/migrate/201805281641_create_action_text_tables.rb) as well?_x000D_
_x000D_
","C 0001075",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"Should unrecognized `options[:size]` raise an ArgumentError for MySQL?","C 0001076",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Equivalent to `spec[:size] ||= size.to_sym.inspect` ?","C 0001077",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"ah... you are right!","C 0001078",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0
"It is for pretty options ordering (`t.text :foo, size: :medium, default: ""default"", null: false, comment: ""comment""`).","C 0001079",0,0,0,0,1,0,0,0,0,0,4,0,0,0,1,0,0,1,0
"Changed from mediumtext (16 MiB) to longtext (4 GiB).","C 0001080",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Added an ArgumentError.","C 0001081",1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0
"hm... I've realized that `limit: 16777215` is ignored on PostgreSQL adapter, so Action Text originally work on PostgreSQL._x000D_
_x000D_
https://github.com/rails/rails/blob/5a8f0c7226b2b16c9cf1b6ef5478fe5603348e17/activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb#L553-L558_x000D_
_x000D_
I think that using `limit: 16777215` (mediumtext 16 MiB) not `limit: 4294967295` (longtext 4 GiB) is to ignore the `limit` option on PostgreSQL adapter._x000D_
So how about changing mediumtext to longtext for MySQL? 16 MiB is still too shorter than PostgreSQL's limit (1 GiB).","C 0001082",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"How the attacker could use this information? It is also present in every HTML page that has a form and considered public information, so why should we filter from logs?","C 0001083",0,0,0,0,0,1,0,2,0,0,0,0,0,0,1,2,0,0,0
"Apologies, haven't realized that.","C 0001084",0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"We already have an open PR for this: #26206_x000D_
_x000D_
Upstream discussion seems to have stalled, so perhaps we should revisit including it ourselves.","C 0001085",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"@matthewd it's not the same in two aspects:_x000D_
- Using enumerable would not work for AR because it calls `each` which would walk through all matching records, which could be 5, 10, 1000... The `limit(2)` is crucial here._x000D_
- I want to have the option to not raise if there's none","C 0001086",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"@matthewd could you reopen?","C 0001087",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"I think this is good. Can you add the CHANGELOG entry?","C 0001088",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"On the other hand, would it be better to have resets imply before_reset?_x000D_
_x000D_
If not, then perhaps we should also add a after_reset alias to resets (or the other way around) for readability.","C 0001089",0,0,0,0,0,0,0,0,0,0,2,4,0,1,1,2,0,0,0
"I thought about changing `resets` but some times you will need both so add a `after_reset` alias too would be nice.","C 0001090",0,0,0,0,1,0,0,0,0,0,2,0,0,0,11,3,0,0,0
"Thank you @rafaelfranca and @kaspth! Adding an `after_reset` alias is a good idea! I'll add that and the `CHANGELOG` entry. ","C 0001091",0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,1,0,0,0
"> I didn't find a reliable trigger to change the timezone handling (local vs. utc)._x000D_
_x000D_
The mysql adapter does the timezone check the same way for every query [here](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/mysql/database_statements.rb#L35-L37)._x000D_
_x000D_
_x000D_
","C 0001092",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"@larskanis Thanks!","C 0001093",0,0,0,0,1,1,0,0,0,0,1,0,0,2,2,1,0,0,0
"Yes, this is cosmetic change as it affects git commit history. Next time someone makes changes in these files rubocop can take care of it.","C 0001094",0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,2,0,0,0
"Thanks @vipulnsward 👍 ","C 0001095",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks @yuki24!","C 0001096",0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Thanks guys!_x000D_
Any chance that it becomes part of `v5.2` too?","C 0001097",1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0
"@SzNagyMisu In Rails 6.0, the way errors are shown in the debug view is fundamentally different from 5.2. Because of that, this change can't easily be backported to older versions. I would say wait until 6.0 is out if that's okay with you.","C 0001098",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"Got it, thanks :smile:","C 0001099",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"Does it make more sense to do `options[:locals].to_h.symbolize_keys` instead? Using AC Params, this would ensure they are permitted before being used as locals.","C 0001100",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"I've considered that also, but that has other side-effects on the object that was passed in as well._x000D_
_x000D_
Consider this:_x000D_
```ruby_x000D_
render partial: ""customer"", locals: ActionController::Parameters.new(customer: { name: 'David' }).permit!_x000D_
```_x000D_
if we were to call `.to_h.symbolize_keys` on the value that is passed it, `to_h` will convert it to `{""customer""=>{""name""=>""David""}}` and `symbolize_keys` will then convert it to `{customer: {""name""=>""David""}}`._x000D_
_x000D_
However, if the application was expecting the name using `:name` it would break._x000D_
_x000D_
Passing the object untouched allows us to keep the old behaviour. In the case of `AC::Parameters`, since it allows indifferent access, `:name` works if nothing messes with it.","C 0001101",0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0
"To be fair I prefer to revert the PR that introduced this code. I find the usage of both symbols and string keys confusing and inconsistent. Most of the places we only support symbols and opening an exception here will just cause more PRs adding support in other places._x000D_
_x000D_
Can you change the PR to revert that commit?","C 0001102",0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"@rafaelfranca Done!","C 0001103",1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0
"Thanks!","C 0001104",0,0,0,0,0,0,1,0,0,0,1,0,0,2,2,0,0,0,0
"`S3Service` needs to implement `update_metadata` like `GCSService` to cover direct uploads.","C 0001105",1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0
"Ended up checking if this was a multi db application by seeing if the handler was equivalent to the default handler and then using the original error message for a single db application since the role isn't applicable in a single db app.","C 0001106",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@colorbox Thanks!","C 0001107",0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,0,0,0
"Yay!","C 0001108",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"If we're creating anonymous subclasses, do we need the separate template container module? Can we use the subclass as the container directly?","C 0001109",0,1,0,0,2,0,0,0,0,0,0,1,0,0,2,0,0,0,0
"Seeing a decent amount of code (mostly vendored Rails; hard to exclude) that references this class directly: https://github.com/search?l=Ruby&q=detailskey&type=Code","C 0001110",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Are we checking for changes from the DetailsKey view context class because we used to be clearing `@view_context_class` entirely?","C 0001111",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Seeing this ""clear view path and fallback caches"" boilerplate repeated. Worth wrapping up so we have one spot to ask AC to start fresh?","C 0001112",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Need a deprecation-like message saying the config no longer does anything?","C 0001113",2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Public API. Deprecation message?","C 0001114",0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0
"Ya, I was thinking this too.  I just refactored in to a module since that's what we *were* doing.  I'll pull the methods up in to the class.","C 0001115",0,0,0,0,0,0,0,0,0,0,0,2,0,3,0,0,0,0,0
"That's effectively what was happening.  [This middleware](https://github.com/rails/rails/blob/52af51c08a48ea7c6e0df09e2470a66a3141087d/actionview/lib/action_view/digestor.rb#L11-L15) would cause the [cache in the resolver](https://github.com/rails/rails/blob/52af51c08a48ea7c6e0df09e2470a66a3141087d/actionview/lib/action_view/template/resolver.rb#L73) to always miss.  Meaning the templates get recompiled every request.  This maintains the same behavior, but allows us to eliminate the finalizer since the methods are thrown away.","C 0001116",0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0
"Yep, agree.  I've kept the repetition because I don't have a clear idea on what all the caches are (also, why aren't `fallbacks` part of `view_paths`?  We search both of them).","C 0001117",1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,0
"I've only been able to find vendored Rails copies referencing this.  It's been :nodoc:d forever. Do you think it's worthwhile to maintain the API?  I only moved the constant because of require order, but my plan is to move the resolver cache inside this class too (possibly those view path caches too)","C 0001118",0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"can we rename this method? `av` is too much lingo. Maybe `build_view_context_class`?","C 0001119",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Fixed here 3ea2f9958677b0df627f92cb908e11ac9260dec1","C 0001120",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"Yep.  That's a much better name. 3df7b96e38837c4880212def203c4d4fb359d99d","C 0001121",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Deprecated in 88b3c454f753c0ce85e8df01d5aacf70fcf29b91","C 0001122",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Deprecated in 88b3c454f753c0ce85e8df01d5aacf70fcf29b91","C 0001123",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"@jeremy I want to keep this repetition until the leak is fixed, then consolidate expiration and eliminate the repetitive code.","C 0001124",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Your changeling entries should probably be above the beta1 line, so they stand out in the eventual beta2 release. It would also be good to put your name on these changes 😊","C 0001125",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"The `thata` is clear: hold the extra a, just like `that` 😄","C 0001126",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Fixed, thanks. 😊","C 0001127",0,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"Fixed, thank you","C 0001128",0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"> How will devs writing new tests know to use `with_empty_template_cache` or to clear other caches beforehand?_x000D_
_x000D_
I think I can add that to the exception message when it tries to look up the compiled method location.  That should help folks migrate.  I'm not thrilled with `with_empty_template_cache` as the method name though.","C 0001129",1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0
"This sentence isn't complete. Can you change ""Action Cable allows to configure the amount of simultaneously processed threads in the worker pool"" to ""Action Cable allows the application to configure the number of simultaneously processed threads in the worker pool"". ?","C 0001130",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I know you didn't write this but I think it would be better worded to change ""The default worker pool size is set to 4, so that means you have to make at least that available"" to ""The default worker pool size is set to 4, so_x000D_
that means you have to make at least 4 database connections available.""","C 0001131",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"Appreciate @eileencodes!","C 0001132",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Hey @eileencodes, could you take a look at it once again?","C 0001133",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Can you add one more empty line here?","C 0001134",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0
"For breaking up strings, you could also use a heredoc and [squish](https://edgeapi.rubyonrails.org/classes/String.html#method-i-squish).","C 0001135",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0
"These are cosmetic changes which we don’t accept.","C 0001136",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Is this really necessary?","C 0001137",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"I’d rather keep the git history here.","C 0001138",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Yup. Can you please revert. If you want to fix typos, it is fine. If you want to change the way the code looks, please don't.","C 0001139",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I think it is fine here. That word doesn't exist 😄 ","C 0001140",0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"@kaspth @rafaelfranca I think this is good to go now. We can merge this.","C 0001141",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"Thanks for the PR._x000D_
_x000D_
This is a regression caused by 5b6daff5b6d5439e07c058718069f54b34970f93, which changed trying RangeError is caused from `nil?` to `value_for_database`._x000D_
_x000D_
I've considered whether the `value.is_a?(StatementCache::Substitute)` guard is necessary or not in 5b6daff5b6d5439e07c058718069f54b34970f93, but I missed that float case, since `integer_type.serialize(value)` which only raises RangeError is safe for the `Substitute` object by `rescue nil`._x000D_
_x000D_
https://github.com/rails/rails/blob/d1456e3ad52cdab6d2fa07ef3f239631a20a9a1f/activemodel/lib/active_model/type/integer.rb#L42_x000D_
_x000D_
We've learned that `value_for_database` still should not be called directly in visiting Arel AST if the value in `BindParam` is the `Substitute` object, so how about adding the guard in `unboundable?` instead?_x000D_
_x000D_
```diff_x000D_
diff --git a/activerecord/lib/active_record/relation/query_attribute.rb b/activerecord/lib/active_record/relation/query_attribute.rb_x000D_
index 5e0b4ac160..57d5802a47 100644_x000D_
--- a/activerecord/lib/active_record/relation/query_attribute.rb_x000D_
+++ b/activerecord/lib/active_record/relation/query_attribute.rb_x000D_
@@ -29,6 +29,8 @@ def infinite?_x000D_
       end_x000D_
 _x000D_
       def unboundable?_x000D_
+        return if value_before_type_cast.is_a?(StatementCache::Substitute)_x000D_
+_x000D_
         if defined?(@_unboundable)_x000D_
           @_unboundable_x000D_
         else_x000D_
```","C 0001142",1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0
"> how about adding the guard in `unboundable?` instead?_x000D_
_x000D_
Sure.  Done","C 0001143",0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
"> can you squash your commits in one?_x000D_
_x000D_
Sure. Done","C 0001144",1,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0
"If this method is intended to be used in app tests, it should be documented.","C 0001145",1,0,0,2,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"This method should be `#:nodoc:`ed or made private—it doesn’t seem to be used elsewhere, so preferably the latter.","C 0001146",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0
"Done._x000D_
Added a note to the change log.","C 0001147",3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Done.","C 0001148",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Let’s also rename to serialize_broadcasting. Stringify sounds JS-like.","C 0001149",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Sure._x000D_
_x000D_
> Stringify sounds JS-like._x000D_
_x000D_
Yep) I didn't like it either)_x000D_
_x000D_
Thanks!","C 0001150",0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0
"A change log entry is only for public API. Just remove this “before”.","C 0001151",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Now that this is public API, can we show an example?","C 0001152",1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"To be honest should we even expose broadcasting_for or just have this assertion call it automatically when passed a model?","C 0001153",0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,0,0,1,0
"Fixtures are a method call, not a hash lookup. Use parents instead of brackets.","C 0001154",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"We do this automatically when we're within a channel test case (has been implemented in https://github.com/rails/rails/pull/33969), but we cannot do this in other contexts, 'cause we don't know about the channel.","C 0001155",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Oops!_x000D_
Fixed in other related docs/guides too.","C 0001156",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0
"Thanks! I just realised I should have asked you to squash your commits down to 1, oh well, next time :D","C 0001157",0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0
"Confirmed this PR fixed that failure.","C 0001158",0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0
"Why should a bit of DSL be added if this is all what it actually does? You already figured out how to accomplish what you needed: an early return/guard clause in your migration.","C 0001159",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Adding the early return/guard it prevents to run the migration but when I remove the return/guard it won't try to run it again 😅 ","C 0001160",1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"I don’t understand the use case and for rails to promote running migrations in only some databases seems fraught._x000D_
_x000D_
Anyway, you can move your if and unless to within `change` and that should work. Thanks!","C 0001161",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"@kaspth the migration version is being added to `schema_migrations` even with the guard clause 😅 that's why I thought about this little DSL.","C 0001162",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Before `d126c0d` `to_s` was never called, so why do we need to call now? And, what in `d126c0d` was making this work since we didn't have `to_s`?","C 0001163",0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"I guess my commit message could have been more clear 😅 _x000D_
_x000D_
Previous implementation was using `Kernel.Float` which was implicitely calling `to_s` on the argument_x000D_
_x000D_
BigDecimal will raise a TypeError if the initial is neither Integer, Float, Rational, BigDecimal nor String. The use of BigDecimal was introduced in `d126c0d`._x000D_
_x000D_
_x000D_
The change made in https://github.com/rails/rails/pull/35010/files#diff-58f66170fe2bce77e8a8b3c69b77a0d6R109_x000D_
isn't related to the same commit, but to https://github.com/rails/rails/pull/34693","C 0001164",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0
"I tried to reproduce the `Kernel.Float` behavior and it doesn't implicitly call `to_s`._x000D_
_x000D_
```_x000D_
>> class Foo_x000D_
>>   def to_s_x000D_
>>     ""1""_x000D_
>>     end_x000D_
>>   end_x000D_
=> :to_s_x000D_
>> Kernel.Float(Foo.new)_x000D_
Traceback (most recent call last):_x000D_
        5: from /Users/rafaelfranca/.rbenv/versions/2.6.0/bin/irb:23:in `<main>'_x000D_
        4: from /Users/rafaelfranca/.rbenv/versions/2.6.0/bin/irb:23:in `load'_x000D_
        3: from /Users/rafaelfranca/.rbenv/versions/2.6.0/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `<top (required)>'_x000D_
        2: from (irb):6_x000D_
        1: from (irb):6:in `Float'_x000D_
TypeError (can't convert Foo into Float)_x000D_
```","C 0001165",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks for double checking you are right I got confused. From the Ruby doc_x000D_
_x000D_
> Kernel.Float(arg) → float_x000D_
Returns arg converted to a float. Numeric types are converted directly, the rest are converted using arg.to_f._x000D_
_x000D_
To keep compatibility, that would mean we'd have to call `BigDecimal(raw_value.to_f, Float::DIG + 1` (we can't convert a Float without a precision)_x000D_
_x000D_
That being said, to check if the raw_value is a decimal we are calling `to_s` on it already https://github.com/rails/rails/blob/3f0c7c5580e67120b2a42552c3624b4e552aa721/activemodel/lib/active_model/validations/numericality.rb#L105 _x000D_
Don't we want to keep consistency and also call `to_s` when converting to a BigDecimal ?","C 0001166",1,1,0,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0
"I was hopping by understanding how this was working in the past we could decide what is the best way to fix this. I'm not against calling to_s, but it seems like to_s was not what was used in the past.","C 0001167",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"We can remove `DECIMAL_REGEX` too._x000D_
https://github.com/rails/rails/pull/35010/files#diff-58f66170fe2bce77e8a8b3c69b77a0d6L13_x000D_
","C 0001168",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0
"How about just using `Kernel.Float(raw_value).to_d`?","C 0001169",1,0,0,2,0,0,0,1,0,0,1,12,1,5,17,1,0,0,0
"Ah yes thanks  absolutely !","C 0001170",1,0,0,0,0,2,0,2,0,0,0,0,0,0,3,1,0,2,0
"Edited PR with another implementation (commit and PR description updated)","C 0001171",0,0,0,0,0,0,0,1,0,0,0,1,2,3,7,0,1,1,0
"I think the idea is that this node inherit from NodeExpression in this commit but we forgot to do it. https://github.com/rails/arel/commit/2d78e3a160068d7a024e30b2178084d16cea9807#diff-33c3f8d4defca30f863e60a5a420579a. Can you investigate?","C 0001172",0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0
"oh... good catch.","C 0001173",0,1,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0
"Yeah I can look into pulling this in.","C 0001174",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"I've opened a new PR #35046 for this ","C 0001175",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"@vizakenjack the reason it's `min` and `sec` is because these mirror the methods on the `Time` class - I think allowing both might cause confusion. If we were going to do anything I'd probably go for raising an `ArgumentError` when passed invalid keys though there will be an overhead to that check.","C 0001176",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Looks like there are a lot of different variants for ""minute"", ""minutes"" or ""min""._x000D_
_x000D_
For example, in Ruby, .minute/second works only in DateTime, but does not work for Time:_x000D_
<img width=""562"" alt=""2019-01-22 18 28 05"" src=""https://user-images.githubusercontent.com/91447/51545674-80a6d400-1e73-11e9-9225-240f21e926fa.png"">_x000D_
_x000D_
However, there is an ActiveSupport's method "".advance"" in Time, that accepts only ""minutes"", and does not work with ""min"":_x000D_
<img width=""424"" alt=""2019-01-22 18 32 21"" src=""https://user-images.githubusercontent.com/91447/51545930-193d5400-1e74-11e9-9aa9-1ce9271002df.png"">_x000D_
_x000D_
Shouldn't it be the same?","C 0001177",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"@vizakenjack sorry for not replying sooner. Yes, there are additional aliases on `DateTime` for `min` and `sec` but since they're not defined on `Time` I wouldn't want to step on Ruby core's toes so to speak. As for the difference between `change` and `advance` I see the former as setting properties on an instance whereas the latter is more to do with `ActiveSupport::Duration` and so mirrors the names there._x000D_
_x000D_
I feel the complexity and overhead of checking multiple keys for minutes and seconds in `change` and `advance` isn't worth the small gain in consistency and may introduce other inconsistencies like what happens when you have both `min` and `minute` keys? So thanks for the PR but unless someone else from Rails Core has a strong opinion I think we'll leave things as they are.","C 0001178",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"> params[:article] does not return an ActionController::Parameters_x000D_
_x000D_
By looking at [these tests](https://github.com/rails/rails/blob/master/actionpack/test/controller/parameters/accessors_test.rb#L22-L31) I see that `params[:article] ` should return instance of `ActionController::Parameters`_x000D_
_x000D_
In the guide, above we have `render plain: params[:article].inspect` that results in `<ActionController::Parameters {""title""=>""First Article!"", ""text""=>""This is my first article.""} permitted: false>` on output, so everything should be correct?","C 0001179",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"[`ActionController::Parameters#[]`](https://github.com/rails/rails/blob/4f62e757caf608d30d46ee745f4f666fb8eba2a7/actionpack/lib/action_controller/metal/strong_parameters.rb#L567) casts value hashes to parameters. I think the guide is trying to emphasize the form fields more than all the parameters you can get from `params`. As it mentions below, `In this situation, the only parameters that matter are the ones from the form.`_x000D_
_x000D_
With that in mind, I wouldn't call it a mistake, so I'm going to close this. Thank you for your pull request.","C 0001180",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"Sure @gmcgibbon. There is one more occurrence of `webserver` [here](https://github.com/rails/rails/blob/master/actionpack/test/dispatch/live_response_test.rb#L65) replacing it.","C 0001181",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@alassek can you squash your commits into 1? thanks!","C 0001182",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"@eileencodes done!","C 0001183",0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Check out the discussion in https://github.com/rails/rails/pull/30157 to see why we do not do this. Thank you for the Pull Request.","C 0001184",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Sorry for the duplicate PR 👍 ","C 0001185",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"I think it would be smarter to display the current environment in the `if` condition. That way, it isn't lying if you run into this by some chance in test / production etc.","C 0001186",0,1,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0
"I think we don't need an `if` if we point the users to add this to the environment file (where it should be)","C 0001187",1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"In that case we should probably say this instead:_x000D_
_x000D_
```_x000D_
To allow requests to <%= @host %>, add the following to your environment configuration:_x000D_
_x000D_
config.hosts &lt;&lt; ""<%= @host %>""_x000D_
```","C 0001188",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"This sounds good to me. Does anyone have security concerns here?","C 0001189",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0
"Should there be a test? I realize it's using a `development?` check but that could possibly be mocked out in some fashion.","C 0001190",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"@gmcgibbon I've added a simple test where you suggested.","C 0001191",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"👏 ","C 0001192",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks!","C 0001193",1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0
"would be great to fix this example: `20:00:00 UTC` => `20:30:00 UTC` and the same below.","C 0001194",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"@bogdanvlviv ahh, good spot_x000D_
","C 0001195",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"So, I'm just curious about this change. Would you mind guiding me to where the default of year `2000` is being set? Does that come from Ruby or from the database server if you give them partial dates?","C 0001196",0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"> So, I'm just curious about this change. Would you mind guiding me to where the default of year `2000` is being set? Does that come from Ruby or from the database server if you give them partial dates?_x000D_
_x000D_
@sikachu It's a longstanding Rails convention - probably chosen when `Time` didn't support the range of values it does now. DBs like MySQL and PostgreSQL just return the time of day and we have to pick a date for the `Time` instance and 2000-01-01 is as good as any.","C 0001197",1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Thank you!","C 0001198",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"What errors are we swallowing here?","C 0001199",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"I think `ActiveStorage::RepresentationsController#show` needs the same treatment. Would you mind taking a look?","C 0001200",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Regardless of what happened here, I wanted to restore `ActiveStorage :: Blob.service`._x000D_
Fixed not to swallow errors.","C 0001201",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Sweet good job fixing this! Just hit this problem using beta1","C 0001202",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"I'm going to merge this since RuboCop 0.61.0 includes the fix https://github.com/rubocop-hq/rubocop/pull/6484 (https://github.com/rubocop-hq/rubocop/pull/6449) which I've requested that to @koic._x000D_
_x000D_
Related #34666.","C 0001203",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0
"Thanks!","C 0001204",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Thanks too!","C 0001205",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Could we fix this by prefixing the command with the Rails environment? Seems off that the environment handling leaks into the generate method.","C 0001206",0,0,0,0,1,0,0,0,0,0,0,2,0,0,1,0,1,0,0
"Yeah, handling env variables as arguments is a [`rake` only thing](https://github.com/ruby/rake/blob/f0a897e3fb557f64f5da59785b1a4464826f77b2/lib/rake/application.rb#L751-L762). Prefixing the command with the variable instead should work everywhere :+1:.","C 0001207",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Wait, so if I run a rake task and set an env variable at the end it’s actually not bash that makes it available in ENV, but Rake? I did not know that!","C 0001208",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Yeah, the shell assumes nothing about program's arguments, no matter whether they include an equal sign :smiley: _x000D_
_x000D_
```shell_x000D_
$ touch a.txt; cat a.txt RAILS_ENV=production_x000D_
cat: 'RAILS_ENV=production': No existe el archivo o el directorio_x000D_
```","C 0001209",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
"@deivid-rodriguez _x000D_
Thanks for your useful information. I was wondering if this feature works on Windows. By doing this, I think that rake was working as expected on Windows.  _x000D_
_x000D_
@kaspth _x000D_
In my understanding, the same fix as rake is necessary for rails command. On unix, there is no problem if you specify the environment variable before the command, but on Windows it is aware that rake and rails are necessary to provide equivalent functionality. What do you think?_x000D_
","C 0001210",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0
"@y-yagi That's a very good point :+1:._x000D_
_x000D_
Another idea would be to add support for passing env to [thor's run method](https://github.com/erikhuda/thor/blob/master/lib/thor/actions.rb#L245-L268). [`system`](https://ruby-doc.org/core-2.6/Kernel.html#method-i-system) already supports passing an env to it, and backticks would need to be replaced with [`Open3.capture2e`](https://ruby-doc.org/stdlib-2.5.3/libdoc/open3/rdoc/Open3.html#method-c-capture2e) or something similar.","C 0001211",0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0
"I suspect that `rails` might need to learn to recognise such env-like parameters, at least while we're transitioning subcommands from rake to thor, even if we mark them as deprecated along the way. (I'm a little surprised we haven't hit this yet, but imagine it'll be more noticeable as we cover more commands, that are run in more varied circumstances.)_x000D_
_x000D_
As implied by the mention of deprecation, though, I'd prefer we didn't use that as our internal mechanism. _x000D_
_x000D_
While I always prefer a many-args strategy for running subcommands, including passing env ""properly"", I'm not sure it'd work reliably here: I don't recall _when_ it comes into play, but that `#{sudo}` looks ominous. _x000D_
_x000D_
All of that said, though, if we know we're running a `rails` subcommand, might it be worth considering invoking `Rails::Command`-type stuff directly?","C 0001212",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Thanks, I think your concern is correct. _x000D_
_x000D_
Originally, `generate` action did not recognize `env` (document has no explanation). And since I can not think of a use case that needs to specify `env` when executing generator, I think there is no need to support that._x000D_
Since processing to eliminate `RAILS_ENV` is necessary, I will merge this PR first, especially if there is no objection. _x000D_
_x000D_
I would like to consider separately about the behavior when `rails` action is executed._x000D_
","C 0001213",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I think this should go above the Rails 6 beta release line, because that already happened. Eg. https://github.com/rails/rails/pull/35033/files#diff-1846d4882fa63eb5b1271541995cbfdcR1","C 0001214",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0
"Thanks - moved and force pushed.","C 0001215",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"One last thing: we add an extra newline above release lines. Can you add that here? Thanks!","C 0001216",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"Done and done!","C 0001217",0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0
"How much does this buy us?","C 0001218",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"As the result depends on the environment such as the network, the result is not stable, but this PR about to finish in about 35~37 minutes, while master now takes over 40 minutes. _x000D_
master: https://travis-ci.org/rails/rails/builds/481557872 _x000D_
PR: https://travis-ci.org/rails/rails/builds/481216646 _x000D_
_x000D_
But before (as it is probably before the Action Mailbox is imported), it took about 30 minutes to complete, so I think there are probably other problems as well. I will investigate it. _x000D_
https://travis-ci.org/rails/rails/builds/471912896_x000D_
","C 0001219",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"There are improvements I'd like to try yet, but first I'd like to merge this PR.","C 0001220",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Would this not cause warnings of unused arguments?","C 0001221",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Currently Ruby doesn't raise any warnings of unused method arguments for now._x000D_
_x000D_
https://travis-ci.org/rails/rails/jobs/481187001","C 0001222",0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0
"Why do we need to do this?","C 0001223",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Why do we need these similar overrides?","C 0001224",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0
"Should this be `supports_datetime_with_precision?`?","C 0001225",0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Just keep `db/schema.rb` as before.","C 0001226",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"It is to inject `V5_2::TableDefinition` to the table definition instance._x000D_
_x000D_
https://github.com/rails/rails/pull/34970/files#diff-2a8be25f82da6b3935cc6a41300a1b01R19`_x000D_
_x000D_
If the `change_table` is removed, the `test_timestamps_doesnt_set_precision_on_change_table` is failed._x000D_
_x000D_
https://github.com/rails/rails/pull/34970/files#diff-ec048630132cce280a9445022318906eR140","C 0001227",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"`supports_datetime_with_precision?` can't be used in the `ActiveRecord::TestCase` scope._x000D_
`subsecond_precision_supported?` is defined in the top level as a helper._x000D_
_x000D_
https://github.com/rails/rails/blob/5fcf8e98808c59bc1496a4048e133a7b32512765/activerecord/test/cases/helper.rb#L43-L45","C 0001228",0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,2,0,0,0
"I've changed to apply new default the same with Action Mailbox.","C 0001229",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"The PR was open for 7 days, why didn't you comment on it?","C 0001230",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0
"Well, It is not possible to see all the changes before they are merged. Usually, I try not to skip significant changes even if they are merged. But sometimes, when I have time, I [do code review](https://github.com/rails/rails/pull/34794) as well. Is something wrong with this PR?","C 0001231",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0
"No. The changes itself are fine, it is just that a lot of your PRs are follow-up of other changes and sometimes it looks like you are cleaning after us and that may cause a bad feeling in the original contributor. Even if you find something that needs to be improved after the PR is merged I'd still comment on the PR and give the original author the chance of making the contribution itself. Of course this would means you are making more commits, but I think your contributions are in a level where it would not be hard to you to find some other contribution to make.","C 0001232",0,0,0,0,0,0,1,0,0,0,1,0,0,1,2,0,0,0,0
"> Even if you find something that needs to be improved after the PR is merged I'd still comment on the PR and give the original author the chance of making the contribution itself. _x000D_
_x000D_
@rafaelfranca I'll try to follow this approach next time.","C 0001233",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"Can we not use `yield_self`? This make harder to backport.","C 0001234",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"Done.  Note that I needed to use different variable names from the `mapping.map` in the `else` branch to avoid ""shadowing outer local variable"" warnings.","C 0001235",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"I'd prefer using the same variable names in both path._x000D_
```suggestion_x000D_
              field_attr, aggregate_attr = mapping.first_x000D_
```","C 0001236",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Use `public_send` instead since `respond_to?` doesn't include private/protected methods by default._x000D_
_x000D_
https://ruby-doc.org/core-2.6/Object.html#method-i-respond_to-3F_x000D_
_x000D_
```suggestion_x000D_
                object.respond_to?(aggr_attr) ? object.public_send(aggr_attr) : object_x000D_
```","C 0001237",0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,0
"That causes ""shadowing outer local variable"" ruby warnings","C 0001238",1,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0
"oh... I see...","C 0001239",1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0
"Do we still need to go through `Mail::MessageIdField`?_x000D_
_x000D_
```suggestion_x000D_
        ""<#{message_checksum}@#{::Socket.gethostname}.mail>"".tap do |message_id|_x000D_
```","C 0001240",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,2,0,0,0
"That essentially verifies that we are generating a valid message id.","C 0001241",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"This change is not needed. Can you please revert?","C 0001242",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"This change is not needed. Can you please revert?","C 0001243",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"We want to keep the same API so we want `options` being passed here.","C 0001244",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"@rafaelfranca just curious to know why we prefer `[]` instead of `%w()`?","C 0001245",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,0
"It is not a question of preference, it is that the code as it was is fine and we don't accept cosmetic changes in PRs.","C 0001246",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"This one still needs to be reverted.","C 0001247",0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"cool","C 0001248",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"@rafaelfranca squashed the commits. Thanks for quick review.","C 0001249",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Should this installer still exists? Is not the idea to generate the application and already get actiontext on it like the other frameworks like actioncable?_x000D_
_x000D_
cc @dhh ","C 0001250",0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0
"I'm not sure, TBH. Active Storage needs to be installed first, which requires running `rails active_storage:install` (I think?)._x000D_
_x000D_
Any reason not to merge this in the meantime?","C 0001251",0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"I think we can make that work. Not a blocker for this PR, just asking because this may be something we need to change before the beta2.","C 0001252",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Yes, the idea is still that this requires running a task if you actually want to use it in the app. Since we do migrations and stuff. Just like active storage. But that everything is already there. Nothing to configure or setup or add dependencies for. Just a single task to run.","C 0001253",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"Should we move this into the timestamps method itself? We can define a 6.0 migration version.","C 0001254",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"I guess the precision is for MySQL 5.6+, since datetime with no precision means unlimited precision for PostgreSQL and SQLite._x000D_
If we want explicit precision for the timestamps, I'll create new PR as new migration default in Active Record.","C 0001255",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Yes, I think the precision is for MySQL. Well, if we could make it omit the precision on Postgres/SQLite and only add it on MySQL if the server supports it, that seems ideal to me.","C 0001256",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I've just implemented #34970.","C 0001257",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Perhaps this should warn if `value` is true (maybe with a message more like ""is now always true, so the setting is deprecated and will be removed""?), but raise if it's false?","C 0001258",1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,0,5,1,0
"Should we remove the default argument from `max_updated_column_timestamp`? It's private and I don't see it used anywhere else.","C 0001259",1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,2,0,0
"Ah, you did 👍","C 0001260",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Could we spare the second loop with this?_x000D_
_x000D_
```ruby_x000D_
timestamp_attributes_for_update_in_model.map { |attr| self[attr]&.to_time }.compact_x000D_
```","C 0001261",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"This deprecation added by Rails 6.0. Ref: #32058  ","C 0001262",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I reverted fa791fb8e2a718b5d0430c7ca5a454678dfc192d with eb63faaa1af7ef28ae1a716d068acc447e28c174.","C 0001263",0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"Thank you for catching that.","C 0001264",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"I've found two deprecations that should be removed as well:_x000D_
_x000D_
- https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/route_set.rb#L593-L605, those deprecations are in Rails since 5.1, see #23980_x000D_
_x000D_
- https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods.rb#L194-L204_x000D_
_x000D_
/cc @rafaelfranca ","C 0001265",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I left them by design.","C 0001266",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"I think this doesn't do what you want. `Rails.application.load_seed` will return true.","C 0001267",0,1,0,2,0,1,0,0,0,0,0,1,0,0,0,0,1,1,0
"I think these changes are safe, so I'm going to merge them.  I've got some more, possibly less safe stuff that depends on these changes, so I'll send a new PR with them.","C 0001268",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"👍 ","C 0001269",1,1,1,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0
"Many projects call this anything from decorators, cells, presenters, carriers, interactors, services, etc._x000D_
The purpose of this guide though is to explore over riding using the ""pattern"" instead of some specific naming convention._x000D_
_x000D_
I think its better to refer to them as ""Decorators"" as a pattern instead of ""Overrides"" here._x000D_
_x000D_
cc @fxn ","C 0001270",0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"@vipulnsward I'd agree with you if this kind of implementation was actually respecting the Decorator design pattern. AFAIK Decorator pattern is when you customize an instance in order to better adapt it to some context:_x000D_
_x000D_
```ruby_x000D_
class CountryDecorator < SimpleDelegator_x000D_
  def initialize(country)_x000D_
    super country_x000D_
  end_x000D_
_x000D_
  def translated_name_x000D_
    I18n.translate ""countries.#{iso}""_x000D_
  end_x000D_
end_x000D_
_x000D_
CountryDecorator.new(Country.new(iso: 'US')).translated_name #=> ""Stati Uniti d'America""_x000D_
```_x000D_
_x000D_
`class_eval` instead is basically monkeypatching. Mixing the two concepts is confusing to me, and it is especially misleading for beginners, since it implicitly teaches readers that Decorator design pattern is like that.","C 0001271",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Is there anything Action Cable can do to schedule its own worker automatically? I don't think it's that uncommon to have one or more tabs open to a site, so just theoretically it sounds like there's gains here._x000D_
_x000D_
@jeremy @javan have you explored some of this at Basecamp?","C 0001272",0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"@kaspth,_x000D_
_x000D_
Yeah, it's possible in the future that the ActionCable library itself could offer built-in support for easily running inside a worker. It might wise to wait a bit for that, though. If we start small by proceeding with these changes, we'll enable users to explore moving cables into a worker themselves, and then we'd be in a better position to see the best patterns emerge and bring them into ActionCable.","C 0001273",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"IMO, it’s too opinionated to use Shared Worker by default (btw, AFAICS, [it’s not supported](https://caniuse.com/#search=SharedWorker) by all major browsers yet)._x000D_
_x000D_
Maybe, optional support for `ActionCable.createSharedConsumer` or smth like that (e.g. consumer _adapetrization_)._x000D_
Or an ability to pass custom Socket wrapper.","C 0001274",0,0,0,1,0,0,0,0,0,0,0,1,0,0,2,1,1,0,0
">  To avoid the `document` `ReferenceError`, I've added an `if (typeof document !== ""undefined"")` guard around the statements that add or remove the `visibilitychange` event listener._x000D_
_x000D_
That condition is pretty unclear out of context. Can it be extracted to an intention revealing helper? _x000D_
_x000D_
Can the test suite be updated to simulate running in a worker scope so we don't accidentally reference `window` or `document` again in the future? What about these references? https://github.com/rails/rails/blob/a08827a90b5a9be79379019cf5b242bd7236d2e3/actioncable/app/javascript/action_cable/index.js#L25-L35","C 0001275",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"> IMO, it’s too opinionated to use Shared Worker by default (btw, AFAICS, [it’s not supported](https://caniuse.com/#search=SharedWorker) by all major browsers yet)._x000D_
> _x000D_
> Maybe, optional support for `ActionCable.createSharedConsumer` or smth like that (e.g. consumer _adapetrization_)._x000D_
> Or an ability to pass custom Socket wrapper._x000D_
_x000D_
Agreed, I wouldn't suggest we make that the default, just an option. And yeah, `SharedWorker` isn't supported everywhere, but fortunately it can fall back to a normal `Worker` which is widely supported:_x000D_
https://github.com/rmacklin/anycable_demo/blob/3e31274f5526241a67531e7940e8214ecb7677c2/app/assets/javascripts/create-worker.js.erb#L1-L3","C 0001276",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Just curious: Would ActionCable run as-is in a web worker if you stubbed out `window` and `document`? Something like:_x000D_
```js_x000D_
self.window = self.document = self;_x000D_
require(""actioncable"");_x000D_
```","C 0001277",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"> What about these references?_x000D_
_x000D_
Those references don't prevent the usage in a worker because you can pass `url` explicitly to `createConsumer` which prevents those functions from trying to reference `document`","C 0001278",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"Right, but that's far from explicit, and as a reader of the code it's not clear why we can reference `document` freely in one place and have to test for it in another.","C 0001279",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"> Can it be extracted to an intention revealing helper?_x000D_
_x000D_
Are you thinking along the lines of:_x000D_
```js_x000D_
const documentInterfaceAvailable = (typeof document !== ""undefined"")_x000D_
```_x000D_
or something else?_x000D_
_x000D_
> Can the test suite be updated to simulate running in a worker scope so we don't accidentally reference `window` or `document` again in the future?_x000D_
_x000D_
Yeah, this is something I'd like to do. I'm not sure the best way to go about it, but my first idea was to try to fork https://github.com/Joris-van-der-Wel/karma-mocha-webworker and have it use QUnit instead of mocha, since that's what the existing test suite uses. Didn't want that to hold up this PR, though","C 0001280",0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0
"> Right, but that's far from explicit, and as a reader of the code it's not clear why we can reference `document` freely in one place and have to test for it in another._x000D_
_x000D_
Yeah. Initially I started making those two functions configurable like:_x000D_
```diff_x000D_
-export function createConsumer(url) {_x000D_
+const defaultOptions = { getConfig, createWebSocketURL }_x000D_
+_x000D_
+export function createConsumer(url, options = defaultOptions) {_x000D_
   if (url == null) {_x000D_
-    const urlConfig = getConfig(""url"")_x000D_
+    const urlConfig = (options.getConfig || defaultOptions.getConfig)(""url"")_x000D_
     url = (urlConfig ? urlConfig : INTERNAL.default_mount_path)_x000D_
   }_x000D_
-  return new Consumer(createWebSocketURL(url))_x000D_
+  return new Consumer((options.createWebSocketURL || defaultOptions.createWebSocketURL)(url))_x000D_
 }_x000D_
```_x000D_
so that if you were using it in a web worker you could pass your own `getConfig` and `createWebSocketURL` that didn't rely on `document`. But after realizing those are both ignored if you explicitly pass a WebSocket url, I was thinking we could leave it and potentially just address this in the documentation._x000D_
_x000D_
What if the ActionCable guide called it out with something like: _x000D_
> If you are using ActionCable in a web worker, you'll need to pass the WebSocket `url` explicitly to `createConsumer` since the worker won't have access to the `action-cable-url` meta tag nor to `document.createElement(""a"")`_x000D_
_x000D_
We could also add a comment above those methods warning that they don't work in a web worker.","C 0001281",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Can you give https://github.com/rails/rails/pull/34941#issuecomment-454546386 a try, please? I realize this is a small change, but it has long term maintenance implications, and I'd prefer to make no changes at all if there's a simple workaround.","C 0001282",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"> Are you thinking along the lines of `const documentInterfaceAvailable = (typeof document !== ""undefined"")` or something else?_x000D_
_x000D_
Something else that reveals the intention. I'd prefer to read `if (context.isWorker) { … }` or `if (context.isWindow) { … }` or similar, where appropriate. _x000D_
_x000D_
`if (self instanceof Window) { … }` could work too.","C 0001283",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"> Can you give https://github.com/rails/rails/pull/34941#issuecomment-454546386 a try, please? _x000D_
_x000D_
Sorry, I missed that comment before._x000D_
_x000D_
> Just curious: Would ActionCable run as-is in a web worker if you stubbed out `window` and `document`? Something like:_x000D_
> _x000D_
> ```js_x000D_
> self.window = self.document = self;_x000D_
> require(""actioncable"");_x000D_
> ```_x000D_
_x000D_
This works in isolation, but I would strongly recommend against it in a real application. Modifying global state like that to fake that the worker script is running in a window context will leak into all the other code in the worker. This is dangerous because it can break other library code used by the worker by tricking it into incorrectly [assuming the worker is running in a window environment](https://github.com/axios/axios/blob/75c8b3f146aaa8a71f7dca0263686fb1799f8f31/lib/utils.js#L168-L193) and using that assumption to access interfaces that aren't actually available._x000D_
_x000D_
> I realize this is a small change, but it has long term maintenance implications, and I'd prefer to make no changes at all if there's a simple workaround._x000D_
_x000D_
I don't want to impose any long term maintenance commitment, so let's try to avoid that. How about we maintain that Rails doesn't officially support running ActionCable in a worker and that it could break at any time, while still avoiding the current `ReferenceError`s with these changes. (It's actually been great how stable the ActionCable's javascript package has been since the release, so I wouldn't be surprised if it still worked in a year, but we can avoid making any support guarantees.)_x000D_
_x000D_
> Something else that reveals the intention. I'd prefer to read `if (context.isWorker) { … }` or `if (context.isWindow) { … }` or similar, where appropriate._x000D_
> _x000D_
> `if (self instanceof Window) { … }` could work too._x000D_
_x000D_
`if (self instanceof Window) { … }` is a lot nicer to read/more self-documenting, but unfortunately would also throw a `ReferenceError` since the `Window` constructor is similarly not defined in the worker global scope. But, I just pushed up a simpler alternative which is to call `addEventListener` and `removeEventListener` without the explicit receiver. That'll still work in the window context while effectively being a no-op in the worker context because the `visibilitychange` event won't ever get triggered there. Thus, we don't need to worry about abstracting the `if (typeof document !== ""undefined"")` checks because they've been removed.","C 0001284",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"> But, I just pushed up a simpler alternative which is to call `addEventListener` and `removeEventListener` without the explicit receiver._x000D_
_x000D_
Great! That's a perfectly reasonable compromise. _x000D_
_x000D_
*For some reason I thought the [`visibilitychange`](https://developer.mozilla.org/en-US/docs/Web/Events/visibilitychange) event didn't bubble, but I was wrong!*","C 0001285",0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,1,0
"Mind updating the PR description to reflect the final change? It still describes your original approach using `if (typeof document !== ""undefined"")`. Happy to merge after that.","C 0001286",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Updated the PR description!","C 0001287",1,0,0,0,0,0,0,0,1,0,0,2,0,0,1,0,0,0,0
"Thanks @javan! By the way, are you planning to attend RailsConf this year? Would love to buy you a drink for all your help 🍻 ","C 0001288",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0
"Not 100% sure yet, but I hope to be there! 🍻","C 0001289",0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,1,0,0,0
"```suggestion_x000D_
you'll need to test both the channels and connection classes themsleves and that other_x000D_
```","C 0001290",1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"```suggestion_x000D_
Connection tests aim to check whether a connection's identifiers gets assigned properly_x000D_
```","C 0001291",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There we go, @palkan! ❤","C 0001292",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I’d probably draw the line here. These are the last two I wanted to support.","C 0001293",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"An alternative for no array allocation:_x000D_
_x000D_
```diff_x000D_
diff --git a/activesupport/lib/active_support/core_ext/date_and_time/calculations.rb b/activesupport/lib/active_support/core_ext/date_and_time/calculations.rb_x000D_
index 05abd83221..e2e11545e2 100644_x000D_
--- a/activesupport/lib/active_support/core_ext/date_and_time/calculations.rb_x000D_
+++ b/activesupport/lib/active_support/core_ext/date_and_time/calculations.rb_x000D_
@@ -134,7 +134,7 @@ def beginning_of_month_x000D_
     #   now = DateTime.current # => Fri, 10 Jul 2015 18:41:29 +0000_x000D_
     #   now.beginning_of_quarter # => Wed, 01 Jul 2015 00:00:00 +0000_x000D_
     def beginning_of_quarter_x000D_
-      first_quarter_month = [10, 7, 4, 1].detect { |m| m <= month }_x000D_
+      first_quarter_month = month - (2 + month) % 3_x000D_
       beginning_of_month.change(month: first_quarter_month)_x000D_
     end_x000D_
     alias :at_beginning_of_quarter :beginning_of_quarter_x000D_
@@ -149,7 +149,7 @@ def beginning_of_quarter_x000D_
     #   now = DateTime.current # => Fri, 10 Jul 2015 18:41:29 +0000_x000D_
     #   now.end_of_quarter # => Wed, 30 Sep 2015 23:59:59 +0000_x000D_
     def end_of_quarter_x000D_
-      last_quarter_month = [3, 6, 9, 12].detect { |m| m >= month }_x000D_
+      last_quarter_month = month + (12 - month) % 3_x000D_
       beginning_of_month.change(month: last_quarter_month).end_of_month_x000D_
     end_x000D_
     alias :at_end_of_quarter :end_of_quarter_x000D_
```","C 0001294",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@kamipo I've updated the code. It's 13% faster than constants and 20% faster than master.","C 0001295",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks!","C 0001296",0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,2,0,0,0
"Thinking about this more, changing the gemspec would require an actual release of Rails 4.2.x and considering it's almost EoL I imagine that's unlikely. Worth a shot but totally understand if you folks close this PR.","C 0001297",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"https://bundler.io/blog/2019/01/03/announcing-bundler-2.html_x000D_
_x000D_
Bundler 2.0 changelog clearly states:_x000D_
`Removed support for Ruby < 2.3`_x000D_
","C 0001298",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"Update: Removed also an example that was testing the same as another one above. Squashed commits.","C 0001299",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks, but the tests are not documentation, and I think it's important to test these particular cases -- the `false` one especially.","C 0001300",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks!","C 0001301",0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0
"Thank you for the pull requests but we prefer to not introduce new methods to our core extensions unless there are proven that the framework or a large number of applications will benefits from it. The `deep_reverse_merge` as `reverse_merge` can be done just by inverting the order of the hashes in the call, so I don't think this would be very useful._x000D_
_x000D_
In your own example `options = { size: 25, coords: { x: 2, y: -1 } }.deep_merge(options)` is easier to understand than `options = options.deep_reverse_merge(size: 25, coords: { x: 2, y: -1 })`","C 0001302",0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Does it make sense to reference `ActionMailer::Parameterized::DeliveryJob` here? I think it should just say ```specifies delivery job for sending mail. Defaults to `ActionMailer::Parameterized::DeliveryJob`.```. You can't actually specify a parameterized delivery job.","C 0001303",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"👍 Thanks, I missed mentioning `ActionMailer::Parameterized::DeliveryJob` here.","C 0001304",0,0,0,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0
"Yeah, it doesn't make sense.","C 0001305",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Agreed, I just fixed it.","C 0001306",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"I'd not even talk about web servers. This also happens with non-threaded server like unicorn. Each process will have a different locale._x000D_
_x000D_
```suggestion_x000D_
`I18n.locale` can leak into subsequent requests served by the same thread/process if it is not consistently set in every controller. For example executing `I18n.locale = :es` in one POST requests will have effects for all later requests to controllers that don't set the locale, but only in that particular thread/process. For that reason, instead of `I18n.locale =` you can use `I18n.with_locale` which does not have this leak issue._x000D_
```","C 0001307",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"```suggestion_x000D_
The default locale is used for all translations unless `I18n.locale=` or `I18n.with_locale` is used._x000D_
```","C 0001308",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The issue with the `locale` leaking into other requests if it is not consistently set in every controller is not related to thread safety, or Puma. I think that mentioning them implies that if you aren't using a threaded web server then it is not an issue you need to consider, which is not the case. _x000D_
_x000D_
Maybe something like `I18n.locale can leek into subsequent requests served by the same thread/process if it is not consistently set in every controller.`_x000D_
","C 0001309",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0
"@lsylvester yes, you are right. This Puma example is just example that I notice in my test. But I would leave it as an example since this ""localization toggling"" looks very strange when you first notice it..._x000D_
I updated explanation with provided sentence._x000D_
Feel free to close this pull request if ""multithreaded Puma"" example is too much for I18n guide.","C 0001310",0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
"@rafaelfranca yea, it is too much overhead for I18n guide to talk about web servers, so I accepted your suggestions","C 0001311",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"It’s clearer as is. Thanks!","C 0001312",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0
"I think this sort of clarification in the guides is great.","C 0001313",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Thank you!","C 0001314",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I know it’s annoying, but the trailing space on this line and the other Prefix lines below needs to be preserved.","C 0001315",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0,0
"Can you add the new route to the necessary tests [here](https://github.com/rails/rails/blob/9f1a07af0499080c9fd8815705a03a4c7e8fb506/railties/test/commands/routes_test.rb)?","C 0001316",1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0
"Closer! It looks like there are a few more tests that need updating.","C 0001317",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"Thank you!","C 0001318",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Thanks for such a quick merge :)","C 0001319",0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"I think this will give us a syntax error on 2.5.  Can you conditionalize this test so we don't get build failures on 2.5?","C 0001320",1,0,0,0,0,0,0,0,1,0,0,1,0,0,4,1,1,0,0
"Sure. The built actually failed for precisely this reason. I'll push an update tomorrow.","C 0001321",0,1,0,0,0,0,0,2,0,0,0,0,1,0,0,0,1,0,0
"@tenderlove just pushed an update.","C 0001322",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"D'oh, what I did won't work for syntax error :see_no_evil:_x000D_
_x000D_
I can either:_x000D_
_x000D_
1. Come up with something that would work for syntax errors._x000D_
2. Leave the check as it is and replace `0..` with `0..nil` (they're equivalent). In Rubyies pre-2.6 the latter results in an `ArgumentError` exception._x000D_
_x000D_
@tenderlove what do you think?","C 0001323",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"May I suggest this?_x000D_
_x000D_
```suggestion_x000D_
            node = attribute.between(eval(""0.."")) # Use eval for compatibility with Ruby < 2.6 parser._x000D_
```_x000D_
_x000D_
This way Ruby parser in version < 2.6 will just overlook it.","C 0001324",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"Great idea. Thanks!","C 0001325",0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0
"@tenderlove @sikachu thanks for comments! The build is green now. Please have another look.","C 0001326",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"As well as the packages for `activestorage` and `actiontext` now too, right?_x000D_
_x000D_
Who can the rest of the core team as owner by the way?","C 0001327",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Yeah, I'll update this list. And, I'm working with Rafael to make sure the core team are all set up with publish permissions.","C 0001328",0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0
"That's the name I was looking to hear 😄_x000D_
_x000D_
Sounds good!","C 0001329",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"> What happens when people next go to call `yarn install` and the packages have been renamed?_x000D_
_x000D_
The packages aren't being renamed, technically. They're being published as new packages with new names. So, existing applications will need to update their `package.json`s to point to the new packages.","C 0001330",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@javan shouldn't this be mentioned in the CHANGELOG and/or Release Notes?","C 0001331",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"@connorshea, yes thank you! Added here https://github.com/rails/rails/commit/e3d43333db2c70dac73d9b41ddd277dc8843ab32. ","C 0001332",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"These are semantically important (visit always replaces the collector), although I don't think there's actually any code that relies on it","C 0001333",0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,1,0,0,0
"`inject` shouldn't mutate memo; that's what `each_with_object` is for","C 0001334",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"This feels slightly uglier. Does it maybe recognize & special-case this spelling?_x000D_
_x000D_
```ruby_x000D_
local_scope = local_scope = ""foo""_x000D_
```","C 0001335",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"`local_scope = local_scope = ""foo""` would work for suppessing the ruby warning, but actually the variable is unused and the cop also regard that as useless._x000D_
_x000D_
```_x000D_
% be rubocop activesupport/test/test_case_test.rb_x000D_
Inspecting 1 file_x000D_
W_x000D_
_x000D_
Offenses:_x000D_
_x000D_
activesupport/test/test_case_test.rb:106:7: W: Lint/UselessAssignment: Useless assignment to variable - local_scope._x000D_
      local_scope = local_scope = ""foo""_x000D_
      ^^^^^^^^^^^_x000D_
activesupport/test/test_case_test.rb:106:21: W: Lint/UselessAssignment: Useless assignment to variable - local_scope._x000D_
      local_scope = local_scope = ""foo""_x000D_
                    ^^^^^^^^^^^_x000D_
_x000D_
1 file inspected, 2 offenses detected_x000D_
```","C 0001336",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Restored replacing the collector 95bf9d3a723d6d421b9bc9ce3c4eeafd25831c9e.","C 0001337",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Changed using `each_with_object` instead of `inject` 3ea3cc5edd76bf6929ebe51c10933d70ee9990a0.","C 0001338",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Actually.. is there a cop for that?","C 0001339",1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0
"AFAICS RuboCop has `Style/EachWithObject` cop, but it just check style, don't check the mutation._x000D_
https://rubocop.readthedocs.io/en/latest/cops_style/#styleeachwithobject_x000D_
_x000D_
Actually I don't know we should avoid the mutation, since we already have `inject` (default by  Hash (`{}`) or Array (`[]`)) with the mutation in many places._x000D_
_x000D_
e.g._x000D_
_x000D_
https://github.com/rails/rails/blob/0bd4894d8b1977c00f4af64947ef860eee5d2b44/activesupport/lib/active_support/values/time_zone.rb#L271-L274_x000D_
_x000D_
https://github.com/rails/rails/blob/82d184839e573b2085d3ea8007f81ab31827edd0/railties/lib/rails/source_annotation_extractor.rb#L128-L132_x000D_
_x000D_
and more.","C 0001340",0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0
"I think ```. Route helpers will also be renamed from `preview_photo_url` and `preview_photo_path` to `photo_preview_url` and `photo_preview_path`.``` would sound better.","C 0001341",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"@gmcgibbon updated. Thanks for your advice.","C 0001342",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Thanks!","C 0001343",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
"Can you add a failure test case without this change?","C 0001344",1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I wrote test case and run test while watching active-record test document._x000D_
https://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#testing-active-record_x000D_
_x000D_
[TEST CASE COMMIT](https://github.com/rails/rails/pull/34896/commits/fcd3fdb37586e880bde4b243a5b8becb337f0539)_x000D_
_x000D_
_x000D_
And [this commit](https://github.com/rails/rails/pull/34896/commits/ec7932d91a0725d8757ee4823df6e8b5081d9bd8) was reverted and I execute `$ bundle exec rake test:mysql2`. I got error for before changes._x000D_
_x000D_
<details><summary> Error </summary>_x000D_
_x000D_
```shell_x000D_
$HOME/.rbenv/versions/2.5.0/bin/ruby -w -I""lib:test"" -I""$HOME/develop/library/rails/vendor/bundle/ruby/2.5.0/gems/rake-12.3.1/lib"" ""$HOME/develop/library/rails/vendor/bundle/ruby/2.5.0/gems/rake-12.3.1/lib/rake/rake_test_loader.rb"" ""test/cases/dirty_test.rb"" ""test/cases/transaction_callbacks_test.rb"" ""test/cases/integration_test.rb"" ""test/cases/connection_pool_test.rb"" ""test/cases/coders/yaml_column_test.rb"" ""test/cases/coders/json_test.rb"" ""test/cases/serialization_test.rb"" ""test/cases/habtm_destroy_order_test.rb"" ""test/cases/primary_keys_test.rb"" ""test/cases/collection_cache_key_test.rb"" ""test/cases/associations/inverse_associations_test.rb"" ""test/cases/associations/cascaded_eager_loading_test.rb"" ""test/cases/associations/eager_test.rb"" ""test/cases/associations/has_one_associations_test.rb"" ""test/cases/associations/inner_join_association_test.rb"" ""test/cases/associations/has_many_through_associations_test.rb"" ""test/cases/associations/left_outer_join_association_test.rb"" ""test/cases/associations/nested_through_associations_test.rb"" ""test/cases/associations/bidirectional_destroy_dependencies_test.rb"" ""test/cases/associations/eager_singularization_test.rb"" ""test/cases/associations/has_many_associations_test.rb"" ""test/cases/associations/has_one_through_associations_test.rb"" ""test/cases/associations/extension_test.rb"" ""test/cases/associations/has_and_belongs_to_many_associations_test.rb"" ""test/cases/associations/belongs_to_associations_test.rb"" ""test/cases/associations/eager_load_includes_full_sti_class_test.rb"" ""test/cases/associations/eager_load_nested_include_test.rb"" ""test/cases/associations/required_test.rb"" ""test/cases/associations/callbacks_test.rb"" ""test/cases/associations/join_model_test.rb"" ""test/cases/tasks/database_tasks_test.rb"" ""test/cases/tasks/postgresql_rake_test.rb"" ""test/cases/tasks/mysql_rake_test.rb"" ""test/cases/tasks/sqlite_rake_test.rb"" ""test/cases/nested_attributes_with_callbacks_test.rb"" ""test/cases/relation/delete_all_test.rb"" ""test/cases/relation/merging_test.rb"" ""test/cases/relation/delegation_test.rb"" ""test/cases/relation/where_test.rb"" ""test/cases/relation/or_test.rb"" ""test/cases/relation/update_all_test.rb"" ""test/cases/relation/record_fetch_warning_test.rb"" ""test/cases/relation/where_chain_test.rb"" ""test/cases/relation/predicate_builder_test.rb"" ""test/cases/relation/mutation_test.rb"" ""test/cases/relation/select_test.rb"" ""test/cases/relation/where_clause_test.rb"" ""test/cases/reaper_test.rb"" ""test/cases/disconnected_test.rb"" ""test/cases/reload_models_test.rb"" ""test/cases/readonly_test.rb"" ""test/cases/json_serialization_test.rb"" ""test/cases/invertible_migration_test.rb"" ""test/cases/boolean_test.rb"" ""test/cases/cache_key_test.rb"" ""test/cases/transaction_isolation_test.rb"" ""test/cases/attribute_decorators_test.rb"" ""test/cases/associations_test.rb"" ""test/cases/i18n_test.rb"" ""test/cases/nested_attributes_test.rb"" ""test/cases/finder_respond_to_test.rb"" ""test/cases/instrumentation_test.rb"" ""test/cases/inheritance_test.rb"" ""test/cases/modules_test.rb"" ""test/cases/enum_test.rb"" ""test/cases/query_cache_test.rb"" ""test/cases/attributes_test.rb"" ""test/cases/date_test.rb"" ""test/cases/counter_cache_test.rb"" ""test/cases/finder_test.rb"" ""test/cases/ar_schema_test.rb"" ""test/cases/multiparameter_attributes_test.rb"" ""test/cases/pooled_connections_test.rb"" ""test/cases/migration_test.rb"" ""test/cases/quoting_test.rb"" ""test/cases/legacy_configurations_test.rb"" ""test/cases/scoping/named_scoping_test.rb"" ""test/cases/scoping/default_scoping_test.rb"" ""test/cases/scoping/relation_scoping_test.rb"" ""test/cases/secure_token_test.rb"" ""test/cases/log_subscriber_test.rb"" ""test/cases/type_test.rb"" ""test/cases/attribute_methods_test.rb"" ""test/cases/custom_locking_test.rb"" ""test/cases/serialized_attribute_test.rb"" ""test/cases/validations_test.rb"" ""test/cases/hot_compatibility_test.rb"" ""test/cases/result_test.rb"" ""test/cases/view_test.rb"" ""test/cases/database_statements_test.rb"" ""test/cases/schema_dumper_test.rb"" ""test/cases/validations/absence_validation_test.rb"" ""test/cases/validations/i18n_validation_test.rb"" ""test/cases/validations/uniqueness_validation_test.rb"" ""test/cases/validations/i18n_generate_message_validation_test.rb"" ""test/cases/validations/presence_validation_test.rb"" ""test/cases/validations/length_validation_test.rb"" ""test/cases/validations/association_validation_test.rb"" ""test/cases/date_time_test.rb"" ""test/cases/mixin_test.rb"" ""test/cases/filter_attributes_test.rb"" ""test/cases/touch_later_test.rb"" ""test/cases/explain_test.rb"" ""test/cases/core_test.rb"" ""test/cases/types_test.rb"" ""test/cases/statement_invalid_test.rb"" ""test/cases/binary_test.rb"" ""test/cases/defaults_test.rb"" ""test/cases/numeric_data_test.rb"" ""test/cases/type/unsigned_integer_test.rb"" ""test/cases/type/type_map_test.rb"" ""test/cases/type/date_time_test.rb"" ""test/cases/type/adapter_specific_registry_test.rb"" ""test/cases/type/string_test.rb"" ""test/cases/type/integer_test.rb"" ""test/cases/persistence_test.rb"" ""test/cases/connection_adapters/connection_specification_test.rb"" ""test/cases/connection_adapters/connection_handler_test.rb"" ""test/cases/connection_adapters/type_lookup_test.rb"" ""test/cases/connection_adapters/connection_handlers_multi_db_test.rb"" ""test/cases/connection_adapters/mysql_type_lookup_test.rb"" ""test/cases/connection_adapters/merge_and_resolve_default_url_config_test.rb"" ""test/cases/connection_adapters/adapter_leasing_test.rb"" ""test/cases/connection_adapters/schema_cache_test.rb"" ""test/cases/locking_test.rb"" ""test/cases/adapter_test.rb"" ""test/cases/column_alias_test.rb"" ""test/cases/suppressor_test.rb"" ""test/cases/migrator_test.rb"" ""test/cases/callbacks_test.rb"" ""test/cases/arel/visitors/ibm_db_test.rb"" ""test/cases/arel/visitors/sqlite_test.rb"" ""test/cases/arel/visitors/mssql_test.rb"" ""test/cases/arel/visitors/oracle12_test.rb"" ""test/cases/arel/visitors/informix_test.rb"" ""test/cases/arel/visitors/postgres_test.rb"" ""test/cases/arel/visitors/depth_first_test.rb"" ""test/cases/arel/visitors/mysql_test.rb"" ""test/cases/arel/visitors/oracle_test.rb"" ""test/cases/arel/visitors/to_sql_test.rb"" ""test/cases/arel/visitors/dot_test.rb"" ""test/cases/arel/visitors/dispatch_contamination_test.rb"" ""test/cases/arel/update_manager_test.rb"" ""test/cases/arel/collectors/sql_string_test.rb"" ""test/cases/arel/collectors/composite_test.rb"" ""test/cases/arel/collectors/bind_test.rb"" ""test/cases/arel/collectors/substitute_bind_collector_test.rb"" ""test/cases/arel/crud_test.rb"" ""test/cases/arel/nodes/ascending_test.rb"" ""test/cases/arel/nodes/node_test.rb"" ""test/cases/arel/nodes/window_test.rb"" ""test/cases/arel/nodes/bind_param_test.rb"" ""test/cases/arel/nodes/bin_test.rb"" ""test/cases/arel/nodes/descending_test.rb"" ""test/cases/arel/nodes/infix_operation_test.rb"" ""test/cases/arel/nodes/casted_test.rb"" ""test/cases/arel/nodes/sum_test.rb"" ""test/cases/arel/nodes/case_test.rb"" ""test/cases/arel/nodes/named_function_test.rb"" ""test/cases/arel/nodes/unary_operation_test.rb"" ""test/cases/arel/nodes/count_test.rb"" ""test/cases/arel/nodes/sql_literal_test.rb"" ""test/cases/arel/nodes/grouping_test.rb"" ""test/cases/arel/nodes/or_test.rb"" ""test/cases/arel/nodes/over_test.rb"" ""test/cases/arel/nodes/true_test.rb"" ""test/cases/arel/nodes/as_test.rb"" ""test/cases/arel/nodes/binary_test.rb"" ""test/cases/arel/nodes/select_core_test.rb"" ""test/cases/arel/nodes/false_test.rb"" ""test/cases/arel/nodes/extract_test.rb"" ""test/cases/arel/nodes/not_test.rb"" ""test/cases/arel/nodes/equality_test.rb"" ""test/cases/arel/nodes/and_test.rb"" ""test/cases/arel/nodes/select_statement_test.rb"" ""test/cases/arel/nodes/delete_statement_test.rb"" ""test/cases/arel/nodes/table_alias_test.rb"" ""test/cases/arel/nodes/insert_statement_test.rb"" ""test/cases/arel/nodes/update_statement_test.rb"" ""test/cases/arel/nodes/distinct_test.rb"" ""test/cases/arel/attributes_test.rb"" ""test/cases/arel/delete_manager_test.rb"" ""test/cases/arel/factory_methods_test.rb"" ""test/cases/arel/attributes/math_test.rb"" ""test/cases/arel/attributes/attribute_test.rb"" ""test/cases/arel/nodes_test.rb"" ""test/cases/arel/table_test.rb"" ""test/cases/arel/insert_manager_test.rb"" ""test/cases/arel/select_manager_test.rb"" ""test/cases/connection_specification/resolver_test.rb"" ""test/cases/relations_test.rb"" ""test/cases/timestamp_test.rb"" ""test/cases/bind_parameter_test.rb"" ""test/cases/yaml_serialization_test.rb"" ""test/cases/time_precision_test.rb"" ""test/cases/forbidden_attributes_protection_test.rb"" ""test/cases/unsafe_raw_sql_test.rb"" ""test/cases/batches_test.rb"" ""test/cases/clone_test.rb"" ""test/cases/sanitize_test.rb"" ""test/cases/calculations_test.rb"" ""test/cases/comment_test.rb"" ""test/cases/unconnected_test.rb"" ""test/cases/store_test.rb"" ""test/cases/errors_test.rb"" ""test/cases/autosave_association_test.rb"" ""test/cases/reserved_word_test.rb"" ""test/cases/null_relation_test.rb"" ""test/cases/aggregations_test.rb"" ""test/cases/fixtures_test.rb"" ""test/cases/json_attribute_test.rb"" ""test/cases/relation_test.rb"" ""test/cases/migration/references_foreign_key_test.rb"" ""test/cases/migration/column_attributes_test.rb"" ""test/cases/migration/command_recorder_test.rb"" ""test/cases/migration/logger_test.rb"" ""test/cases/migration/references_index_test.rb"" ""test/cases/migration/pending_migrations_test.rb"" ""test/cases/migration/compatibility_test.rb"" ""test/cases/migration/column_positioning_test.rb"" ""test/cases/migration/references_statements_test.rb"" ""test/cases/migration/rename_table_test.rb"" ""test/cases/migration/change_table_test.rb"" ""test/cases/migration/create_join_table_test.rb"" ""test/cases/migration/foreign_key_test.rb"" ""test/cases/migration/columns_test.rb"" ""test/cases/migration/index_test.rb"" ""test/cases/migration/change_schema_test.rb"" ""test/cases/transactions_test.rb"" ""test/cases/dup_test.rb"" ""test/cases/base_test.rb"" ""test/cases/multiple_db_test.rb"" ""test/cases/test_fixtures_test.rb"" ""test/cases/explain_subscriber_test.rb"" ""test/cases/column_definition_test.rb"" ""test/cases/connection_management_test.rb"" ""test/cases/statement_cache_test.rb"" ""test/cases/reflection_test.rb"" ""test/cases/date_time_precision_test.rb"" ""test/cases/schema_loading_test.rb"" ""test/cases/invalid_connection_test.rb"" ""test/cases/fixture_set/file_test.rb"" ""test/cases/attribute_methods/read_test.rb"" ""test/cases/adapters/mysql2/datetime_precision_quoting_test.rb"" ""test/cases/adapters/mysql2/schema_migrations_test.rb"" ""test/cases/adapters/mysql2/sql_types_test.rb"" ""test/cases/adapters/mysql2/boolean_test.rb"" ""test/cases/adapters/mysql2/mysql2_adapter_test.rb"" ""test/cases/adapters/mysql2/enum_test.rb"" ""test/cases/adapters/mysql2/table_options_test.rb"" ""test/cases/adapters/mysql2/active_schema_test.rb"" ""test/cases/adapters/mysql2/json_test.rb"" ""test/cases/adapters/mysql2/unsigned_type_test.rb"" ""test/cases/adapters/mysql2/explain_test.rb"" ""test/cases/adapters/mysql2/transaction_test.rb"" ""test/cases/adapters/mysql2/case_sensitivity_test.rb"" ""test/cases/adapters/mysql2/sp_test.rb"" ""test/cases/adapters/mysql2/bind_parameter_test.rb"" ""test/cases/adapters/mysql2/connection_test.rb"" ""test/cases/adapters/mysql2/virtual_column_test.rb"" ""test/cases/adapters/mysql2/schema_test.rb"" ""test/cases/adapters/mysql2/auto_increment_test.rb"" ""test/cases/adapters/mysql2/charset_collation_test.rb""_x000D_
Using mysql2_x000D_
Run options: --seed 17273_x000D_
_x000D_
# Running:_x000D_
_x000D_
x000D_
_x000D_
Error:_x000D_
ActiveRecord::ConnectionAdapters::MysqlTypeLookupTest#test_string_types:_x000D_
NoMethodError: undefined method `split' for nil:NilClass_x000D_
    $HOME/develop/library/rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:583:in `block in initialize_type_map'_x000D_
    $HOME/develop/library/rails/activerecord/lib/active_record/type/type_map.rb:55:in `perform_fetch'_x000D_
    $HOME/develop/library/rails/activerecord/lib/active_record/type/type_map.rb:21:in `block in fetch'_x000D_
    $HOME/develop/library/rails/vendor/bundle/ruby/2.5.0/gems/concurrent-ruby-1.1.3/lib/concurrent/map.rb:193:in `block in fetch_or_store'_x000D_
    $HOME/develop/library/rails/vendor/bundle/ruby/2.5.0/gems/concurrent-ruby-1.1.3/lib/concurrent/map.rb:172:in `fetch'_x000D_
    $HOME/develop/library/rails/vendor/bundle/ruby/2.5.0/gems/concurrent-ruby-1.1.3/lib/concurrent/map.rb:192:in `fetch_or_store'_x000D_
    $HOME/develop/library/rails/activerecord/lib/active_record/type/type_map.rb:20:in `fetch'_x000D_
    $HOME/develop/library/rails/activerecord/lib/active_record/type/type_map.rb:16:in `lookup'_x000D_
    $HOME/develop/library/rails/activerecord/test/cases/connection_adapters/mysql_type_lookup_test.rb:61:in `assert_lookup_type'_x000D_
    $HOME/develop/library/rails/activerecord/test/cases/connection_adapters/mysql_type_lookup_test.rb:30:in `test_string_types'_x000D_
```_x000D_
_x000D_
<details>","C 0001345",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"It is the result of executing the test after `git revert` again._x000D_
_x000D_
```_x000D_
Finished in 101.814030s, 64.0187 runs/s, 168.8274 assertions/s._x000D_
6518 runs, 17189 assertions, 0 failures, 0 errors, 9 skips_x000D_
_x000D_
You have skipped tests. Run with --verbose for details._x000D_
```","C 0001346",0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0
"I've confirmed that the issue also be happened on the set column._x000D_
Can you address the regex for the set too?_x000D_
_x000D_
https://github.com/rails/rails/pull/34896/files#diff-98ce5dc0cd01f8b0435ff6feac10d8a8L588","C 0001347",2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I got error._x000D_
_x000D_
<details> <summary> Error </summary>_x000D_
_x000D_
```_x000D_
Error:_x000D_
ActiveRecord::ConnectionAdapters::MysqlTypeLookupTest#test_string_types:_x000D_
NoMethodError: undefined method `split' for nil:NilClass_x000D_
    $HOME/develop/library/rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:589:in `block in initialize_type_map'_x000D_
    $HOME/develop/library/rails/activerecord/lib/active_record/type/type_map.rb:55:in `perform_fetch'_x000D_
    $HOME/develop/library/rails/activerecord/lib/active_record/type/type_map.rb:21:in `block in fetch'_x000D_
    $HOME/develop/library/rails/vendor/bundle/ruby/2.5.0/gems/concurrent-ruby-1.1.3/lib/concurrent/map.rb:193:in `block in fetch_or_store'_x000D_
    $HOME/develop/library/rails/vendor/bundle/ruby/2.5.0/gems/concurrent-ruby-1.1.3/lib/concurrent/map.rb:172:in `fetch'_x000D_
    $HOME/develop/library/rails/vendor/bundle/ruby/2.5.0/gems/concurrent-ruby-1.1.3/lib/concurrent/map.rb:192:in `fetch_or_store'_x000D_
    $HOME/develop/library/rails/activerecord/lib/active_record/type/type_map.rb:20:in `fetch'_x000D_
    $HOME/develop/library/rails/activerecord/lib/active_record/type/type_map.rb:16:in `lookup'_x000D_
    $HOME/develop/library/rails/activerecord/test/cases/connection_adapters/mysql_type_lookup_test.rb:63:in `assert_lookup_type'_x000D_
    $HOME/develop/library/rails/activerecord/test/cases/connection_adapters/mysql_type_lookup_test.rb:34:in `test_string_types'_x000D_
```_x000D_
_x000D_
</details>_x000D_
_x000D_
Next I fix this test.","C 0001348",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Fix it._x000D_
_x000D_
<details> <summary> Test result </summary>_x000D_
_x000D_
```_x000D_
Finished in 109.684752s, 59.4249 runs/s, 156.7310 assertions/s._x000D_
6518 runs, 17191 assertions, 0 failures, 0 errors, 9 skips_x000D_
_x000D_
You have skipped tests. Run with --verbose for details._x000D_
_x000D_
```_x000D_
_x000D_
</details>_x000D_
_x000D_
","C 0001349",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"> Can you squash your commits into one?_x000D_
_x000D_
Okay! I will squash and force push. _x000D_
","C 0001350",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Thanks! And congrats on your first Rails contribution 🎉 ","C 0001351",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Should `super` be called again? If it raised, it will raise again.","C 0001352",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"I guess we want to rescue this exception only the in the pace that raises it, so we know what is happening. I think it is the calls inside the `if`","C 0001353",0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"Correct. I think trying to move the existing logic in the `if` above into a private method, and then rescuing parse errors there would work better.","C 0001354",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Since this is a bugfix for an unreleased feature, I don't think a changelog is needed.","C 0001355",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Moved into a private method, I have called it `wrap` but I think it could do with a better method name? _x000D_
_x000D_
Was not sure I understood when rescuing the parse error, do we still want to call `super` or swallow the exception? Please have a look at updated code and let me know.","C 0001356",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"I think `wrap_parameters` would be a suitable name. Swallowing the exception here is preferred because it will call `super` immediately afterward in `process_action`.","C 0001357",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"@gmcgibbon would that be confusing with the class method `wrap_parameters` and the internal instance `_wrap_parameters`?","C 0001358",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Yeah that's the reason why I never named it `wrap_parameters` too... @gmcgibbon any other name you prefer?_x000D_
_x000D_
`_perform_wrap` _x000D_
`parameter_wrapping`_x000D_
`_perform_parameter_wrapping` _x000D_
","C 0001359",0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0
"My mistake. I suppose `_perform_parameter_wrapping` is better in that case.","C 0001360",1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"Done and squashed the commits too. 👍","C 0001361",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0
"When I ran the tests for the code above, initially the tests failed, I could not replicate the error with the same seed value, here are the results of that test run for context._x000D_
_x000D_
```_x000D_
vagrant@rails-dev-box:/vagrant/rails/actionpack$  bundle exec rake test_x000D_
/usr/bin/ruby2.5 -w -I""lib:test""  ""/usr/lib/ruby/vendor_ruby/rake/rake_test_loader.rb"" ""test/abstract/translation_test.rb"" ""test/abstract/collector_test.rb"" ""test/abstract/callbacks_test.rb"" ""test/dispatch/cookies_test.rb"" ""test/dispatch/ssl_test.rb"" ""test/dispatch/runner_test.rb"" ""test/dispatch/mime_type_test.rb"" ""test/dispatch/exception_wrapper_test.rb"" ""test/dispatch/debug_exceptions_test.rb"" ""test/dispatch/debug_locks_test.rb"" ""test/dispatch/url_generation_test.rb"" ""test/dispatch/host_authorization_test.rb"" ""test/dispatch/system_testing/driver_test.rb"" ""test/dispatch/system_testing/server_test.rb"" ""test/dispatch/system_testing/system_test_case_test.rb"" ""test/dispatch/system_testing/screenshot_helper_test.rb"" ""test/dispatch/live_response_test.rb"" ""test/dispatch/test_request_test.rb"" ""test/dispatch/content_security_policy_test.rb"" ""test/dispatch/prefix_generation_test.rb"" ""test/dispatch/test_response_test.rb"" ""test/dispatch/request_test.rb"" ""test/dispatch/mount_test.rb"" ""test/dispatch/request_id_test.rb"" ""test/dispatch/header_test.rb"" ""test/dispatch/routing_test.rb"" ""test/dispatch/response_test.rb"" ""test/dispatch/callbacks_test.rb"" ""test/dispatch/content_disposition_test.rb"" ""test/dispatch/show_exceptions_test.rb"" ""test/dispatch/uploaded_file_test.rb"" ""test/dispatch/request/session_test.rb"" ""test/dispatch/request/query_string_parsing_test.rb"" ""test/dispatch/request/url_encoded_params_parsing_test.rb"" ""test/dispatch/request/multipart_params_parsing_test.rb"" ""test/dispatch/request/json_params_parsing_test.rb"" ""test/dispatch/rack_cache_test.rb"" ""test/dispatch/routing/ipv6_redirect_test.rb"" ""test/dispatch/routing/inspector_test.rb"" ""test/dispatch/routing/custom_url_helpers_test.rb"" ""test/dispatch/routing/concerns_test.rb"" ""test/dispatch/routing/route_set_test.rb"" ""test/dispatch/reloader_test.rb"" ""test/dispatch/executor_test.rb"" ""test/dispatch/middleware_stack_test.rb"" ""test/dispatch/routing_assertions_test.rb"" ""test/dispatch/mapper_test.rb"" ""test/dispatch/static_test.rb"" ""test/dispatch/session/abstract_store_test.rb"" ""test/dispatch/session/cache_store_test.rb"" ""test/dispatch/session/cookie_store_test.rb"" ""test/dispatch/session/mem_cache_store_test.rb"" ""test/dispatch/session/test_session_test.rb"" ""test/assertions/response_assertions_test.rb"" ""test/journey/route/definition/scanner_test.rb"" ""test/journey/route/definition/parser_test.rb"" ""test/journey/nfa/simulator_test.rb"" ""test/journey/nfa/transition_table_test.rb"" ""test/journey/nodes/symbol_test.rb"" ""test/journey/path/pattern_test.rb"" ""test/journey/gtg/builder_test.rb"" ""test/journey/gtg/transition_table_test.rb"" ""test/journey/router_test.rb"" ""test/journey/routes_test.rb"" ""test/journey/route_test.rb"" ""test/journey/router/utils_test.rb"" ""test/controller/integration_test.rb"" ""test/controller/new_base/render_context_test.rb"" ""test/controller/new_base/render_streaming_test.rb"" ""test/controller/new_base/content_type_test.rb"" ""test/controller/new_base/render_action_test.rb"" ""test/controller/new_base/content_negotiation_test.rb"" ""test/controller/new_base/render_test.rb"" ""test/controller/new_base/bare_metal_test.rb"" ""test/controller/new_base/render_xml_test.rb"" ""test/controller/new_base/render_html_test.rb"" ""test/controller/new_base/render_file_test.rb"" ""test/controller/new_base/middleware_test.rb"" ""test/controller/new_base/render_body_test.rb"" ""test/controller/new_base/render_plain_test.rb"" ""test/controller/new_base/render_partial_test.rb"" ""test/controller/new_base/render_template_test.rb"" ""test/controller/new_base/base_test.rb"" ""test/controller/new_base/render_implicit_action_test.rb"" ""test/controller/new_base/render_layout_test.rb"" ""test/controller/send_file_test.rb"" ""test/controller/runner_test.rb"" ""test/controller/content_type_test.rb"" ""test/controller/http_basic_authentication_test.rb"" ""test/controller/webservice_test.rb"" ""test/controller/force_ssl_test.rb"" ""test/controller/http_digest_authentication_test.rb"" ""test/controller/rescue_test.rb"" ""test/controller/url_for_test.rb"" ""test/controller/params_parse_test.rb"" ""test/controller/url_for_integration_test.rb"" ""test/controller/render_test.rb"" ""test/controller/metal/renderers_test.rb"" ""test/controller/output_escaping_test.rb"" ""test/controller/action_pack_assertions_test.rb"" ""test/controller/caching_test.rb"" ""test/controller/render_xml_test.rb"" ""test/controller/log_subscriber_test.rb"" ""test/controller/render_json_test.rb"" ""test/controller/default_url_options_with_before_action_test.rb"" ""test/controller/flash_test.rb"" ""test/controller/parameter_encoding_test.rb"" ""test/controller/redirect_test.rb"" ""test/controller/resources_test.rb"" ""test/controller/routing_test.rb"" ""test/controller/metal_test.rb"" ""test/controller/renderers_test.rb"" ""test/controller/params_wrapper_test.rb"" ""test/controller/url_rewriter_test.rb"" ""test/controller/renderer_test.rb"" ""test/controller/parameters/serialization_test.rb"" ""test/controller/parameters/mutators_test.rb"" ""test/controller/parameters/log_on_unpermitted_params_test.rb"" ""test/controller/parameters/always_permitted_parameters_test.rb"" ""test/controller/parameters/accessors_test.rb"" ""test/controller/parameters/raise_on_unpermitted_params_test.rb"" ""test/controller/parameters/parameters_permit_test.rb"" ""test/controller/parameters/nested_parameters_permit_test.rb"" ""test/controller/parameters/multi_parameter_attributes_test.rb"" ""test/controller/parameters/dup_test.rb"" ""test/controller/show_exceptions_test.rb"" ""test/controller/render_js_test.rb"" ""test/controller/required_params_test.rb"" ""test/controller/api/force_ssl_test.rb"" ""test/controller/api/url_for_test.rb"" ""test/controller/api/implicit_render_test.rb"" ""test/controller/api/redirect_to_test.rb"" ""test/controller/api/data_streaming_test.rb"" ""test/controller/api/conditional_get_test.rb"" ""test/controller/api/with_cookies_test.rb"" ""test/controller/api/renderers_test.rb"" ""test/controller/api/params_wrapper_test.rb"" ""test/controller/api/with_helpers_test.rb"" ""test/controller/mime/respond_to_test.rb"" ""test/controller/mime/accept_format_test.rb"" ""test/controller/request/test_request_test.rb"" ""test/controller/request_forgery_protection_test.rb"" ""test/controller/helper_test.rb"" ""test/controller/live_stream_test.rb"" ""test/controller/localized_templates_test.rb"" ""test/controller/permitted_params_test.rb"" ""test/controller/filters_test.rb"" ""test/controller/base_test.rb"" ""test/controller/streaming_test.rb"" ""test/controller/http_token_authentication_test.rb"" ""test/controller/form_builder_test.rb"" ""test/controller/test_case_test.rb"" ""test/controller/flash_hash_test.rb"" ""test/routing/helper_test.rb"" _x000D_
/var/lib/gems/2.5.0/gems/addressable-2.5.2/lib/addressable/idna/pure.rb:154: warning: assigned but unused variable - startercc_x000D_
Run options: --seed 60076_x000D_
_x000D_
# Running:_x000D_
_x000D_
x000D_
_x000D_
Failure:_x000D_
RendererTest#test_rendering_with_a_controller_class [/vagrant/rails/actionpack/test/controller/renderer_test.rb:49]:_x000D_
Expected: ""Hello world!""_x000D_
  Actual: ""Hello world! Modified!""_x000D_
_x000D_
_x000D_
rails test vagrant/rails/actionpack/test/controller/renderer_test.rb:48_x000D_
_x000D_
x000D_
_x000D_
Failure:_x000D_
ActionControllerBaseRenderTest#test_direct_render_to_string [/vagrant/rails/actionpack/test/controller/render_test.rb:674]:_x000D_
Expected: ""Hello world!""_x000D_
  Actual: ""Hello world! Modified!""_x000D_
_x000D_
_x000D_
rails test vagrant/rails/actionpack/test/controller/render_test.rb:672_x000D_
_x000D_
x000D_
_x000D_
Finished in 10.246307s, 316.6995 runs/s, 1561.3430 assertions/s._x000D_
3245 runs, 15998 assertions, 2 failures, 0 errors, 0 skips_x000D_
rake aborted!_x000D_
Command failed with status (1): [ruby -w -I""lib:test""  ""/usr/lib/ruby/vendor_ruby/rake/rake_test_loader.rb"" ""test/abstract/translation_test.rb"" ""test/abstract/collector_test.rb"" ""test/abstract/callbacks_test.rb"" ""test/dispatch/cookies_test.rb"" ""test/dispatch/ssl_test.rb"" ""test/dispatch/runner_test.rb"" ""test/dispatch/mime_type_test.rb"" ""test/dispatch/exception_wrapper_test.rb"" ""test/dispatch/debug_exceptions_test.rb"" ""test/dispatch/debug_locks_test.rb"" ""test/dispatch/url_generation_test.rb"" ""test/dispatch/host_authorization_test.rb"" ""test/dispatch/system_testing/driver_test.rb"" ""test/dispatch/system_testing/server_test.rb"" ""test/dispatch/system_testing/system_test_case_test.rb"" ""test/dispatch/system_testing/screenshot_helper_test.rb"" ""test/dispatch/live_response_test.rb"" ""test/dispatch/test_request_test.rb"" ""test/dispatch/content_security_policy_test.rb"" ""test/dispatch/prefix_generation_test.rb"" ""test/dispatch/test_response_test.rb"" ""test/dispatch/request_test.rb"" ""test/dispatch/mount_test.rb"" ""test/dispatch/request_id_test.rb"" ""test/dispatch/header_test.rb"" ""test/dispatch/routing_test.rb"" ""test/dispatch/response_test.rb"" ""test/dispatch/callbacks_test.rb"" ""test/dispatch/content_disposition_test.rb"" ""test/dispatch/show_exceptions_test.rb"" ""test/dispatch/uploaded_file_test.rb"" ""test/dispatch/request/session_test.rb"" ""test/dispatch/request/query_string_parsing_test.rb"" ""test/dispatch/request/url_encoded_params_parsing_test.rb"" ""test/dispatch/request/multipart_params_parsing_test.rb"" ""test/dispatch/request/json_params_parsing_test.rb"" ""test/dispatch/rack_cache_test.rb"" ""test/dispatch/routing/ipv6_redirect_test.rb"" ""test/dispatch/routing/inspector_test.rb"" ""test/dispatch/routing/custom_url_helpers_test.rb"" ""test/dispatch/routing/concerns_test.rb"" ""test/dispatch/routing/route_set_test.rb"" ""test/dispatch/reloader_test.rb"" ""test/dispatch/executor_test.rb"" ""test/dispatch/middleware_stack_test.rb"" ""test/dispatch/routing_assertions_test.rb"" ""test/dispatch/mapper_test.rb"" ""test/dispatch/static_test.rb"" ""test/dispatch/session/abstract_store_test.rb"" ""test/dispatch/session/cache_store_test.rb"" ""test/dispatch/session/cookie_store_test.rb"" ""test/dispatch/session/mem_cache_store_test.rb"" ""test/dispatch/session/test_session_test.rb"" ""test/assertions/response_assertions_test.rb"" ""test/journey/route/definition/scanner_test.rb"" ""test/journey/route/definition/parser_test.rb"" ""test/journey/nfa/simulator_test.rb"" ""test/journey/nfa/transition_table_test.rb"" ""test/journey/nodes/symbol_test.rb"" ""test/journey/path/pattern_test.rb"" ""test/journey/gtg/builder_test.rb"" ""test/journey/gtg/transition_table_test.rb"" ""test/journey/router_test.rb"" ""test/journey/routes_test.rb"" ""test/journey/route_test.rb"" ""test/journey/router/utils_test.rb"" ""test/controller/integration_test.rb"" ""test/controller/new_base/render_context_test.rb"" ""test/controller/new_base/render_streaming_test.rb"" ""test/controller/new_base/content_type_test.rb"" ""test/controller/new_base/render_action_test.rb"" ""test/controller/new_base/content_negotiation_test.rb"" ""test/controller/new_base/render_test.rb"" ""test/controller/new_base/bare_metal_test.rb"" ""test/controller/new_base/render_xml_test.rb"" ""test/controller/new_base/render_html_test.rb"" ""test/controller/new_base/render_file_test.rb"" ""test/controller/new_base/middleware_test.rb"" ""test/controller/new_base/render_body_test.rb"" ""test/controller/new_base/render_plain_test.rb"" ""test/controller/new_base/render_partial_test.rb"" ""test/controller/new_base/render_template_test.rb"" ""test/controller/new_base/base_test.rb"" ""test/controller/new_base/render_implicit_action_test.rb"" ""test/controller/new_base/render_layout_test.rb"" ""test/controller/send_file_test.rb"" ""test/controller/runner_test.rb"" ""test/controller/content_type_test.rb"" ""test/controller/http_basic_authentication_test.rb"" ""test/controller/webservice_test.rb"" ""test/controller/force_ssl_test.rb"" ""test/controller/http_digest_authentication_test.rb"" ""test/controller/rescue_test.rb"" ""test/controller/url_for_test.rb"" ""test/controller/params_parse_test.rb"" ""test/controller/url_for_integration_test.rb"" ""test/controller/render_test.rb"" ""test/controller/metal/renderers_test.rb"" ""test/controller/output_escaping_test.rb"" ""test/controller/action_pack_assertions_test.rb"" ""test/controller/caching_test.rb"" ""test/controller/render_xml_test.rb"" ""test/controller/log_subscriber_test.rb"" ""test/controller/render_json_test.rb"" ""test/controller/default_url_options_with_before_action_test.rb"" ""test/controller/flash_test.rb"" ""test/controller/parameter_encoding_test.rb"" ""test/controller/redirect_test.rb"" ""test/controller/resources_test.rb"" ""test/controller/routing_test.rb"" ""test/controller/metal_test.rb"" ""test/controller/renderers_test.rb"" ""test/controller/params_wrapper_test.rb"" ""test/controller/url_rewriter_test.rb"" ""test/controller/renderer_test.rb"" ""test/controller/parameters/serialization_test.rb"" ""test/controller/parameters/mutators_test.rb"" ""test/controller/parameters/log_on_unpermitted_params_test.rb"" ""test/controller/parameters/always_permitted_parameters_test.rb"" ""test/controller/parameters/accessors_test.rb"" ""test/controller/parameters/raise_on_unpermitted_params_test.rb"" ""test/controller/parameters/parameters_permit_test.rb"" ""test/controller/parameters/nested_parameters_permit_test.rb"" ""test/controller/parameters/multi_parameter_attributes_test.rb"" ""test/controller/parameters/dup_test.rb"" ""test/controller/show_exceptions_test.rb"" ""test/controller/render_js_test.rb"" ""test/controller/required_params_test.rb"" ""test/controller/api/force_ssl_test.rb"" ""test/controller/api/url_for_test.rb"" ""test/controller/api/implicit_render_test.rb"" ""test/controller/api/redirect_to_test.rb"" ""test/controller/api/data_streaming_test.rb"" ""test/controller/api/conditional_get_test.rb"" ""test/controller/api/with_cookies_test.rb"" ""test/controller/api/renderers_test.rb"" ""test/controller/api/params_wrapper_test.rb"" ""test/controller/api/with_helpers_test.rb"" ""test/controller/mime/respond_to_test.rb"" ""test/controller/mime/accept_format_test.rb"" ""test/controller/request/test_request_test.rb"" ""test/controller/request_forgery_protection_test.rb"" ""test/controller/helper_test.rb"" ""test/controller/live_stream_test.rb"" ""test/controller/localized_templates_test.rb"" ""test/controller/permitted_params_test.rb"" ""test/controller/filters_test.rb"" ""test/controller/base_test.rb"" ""test/controller/streaming_test.rb"" ""test/controller/http_token_authentication_test.rb"" ""test/controller/form_builder_test.rb"" ""test/controller/test_case_test.rb"" ""test/controller/flash_hash_test.rb"" ""test/routing/helper_test.rb"" ]_x000D_
_x000D_
Tasks: TOP => test_x000D_
(See full trace by running task with --trace)_x000D_
```","C 0001362",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thank you all for making my first contribution to rails, a very warming experience. 👍👌✨","C 0001363",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"rause?","C 0001364",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"We might also want to add `#{const_regexp(camel_cased_word)}` to the end of this regex to ensure we're catching the right load error. Might be a good idea to test this actually raises now too seeing how CI is passing with a typo 🤔","C 0001365",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Thank you @gmcgibbon and @djberg96 _x000D_
_x000D_
- added a test to catch the `s/rause/raise/` fail (so it is properly tested)_x000D_
- added `#{const_regexp(camel_cased_word)}` to regular expression to narrow down exception from the autoloader","C 0001366",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"👍 ","C 0001367",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0
"fixed Changelog conflict..._x000D_
_x000D_
@gmcgibbon thank you so much for your help (and your patience for having to repeat that)_x000D_
@djberg96 thanks for the ping and keeping me honest","C 0001368",0,0,0,0,3,0,0,0,0,0,0,0,0,2,4,4,2,0,0
"odd collate error for mysql (that I haven't seen before)_x000D_
kicking","C 0001369",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Thanks for all the help on this PR, and rails in general. It is hard work maintaining OSS._x000D_
","C 0001370",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"Am I missing something or this test is not using `Parameters`?","C 0001371",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"🤦‍♂️ My bad, fixed now.","C 0001372",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"I thought we had deprecated exists? without arguments?","C 0001373",0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0
"> I thought we had deprecated exists? without arguments?_x000D_
_x000D_
Not that I'm aware. Why would we do that?","C 0001374",0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0
"I can't for the life of me find that discussion now via GitHub's search. I just seem to remember @matthewd and either @eugeneius and @kamipo talking about this.","C 0001375",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"Test are still broken, can you take a look?","C 0001376",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"@rafaelfranca they should be fine now, sorry about that! Since we weren't running these tests for the real adapters, some of them didn't support testing with scheduled jobs (i.e., enqueued with `enqueued_at`, that is always used when retrying jobs). I've skipped the tests for these, in the same way we were already skipping them for the `:inline` adapter (even though they weren't run for it). ","C 0001377",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0
":scissors:","C 0001378",0,0,1,0,0,0,0,0,0,0,1,2,0,1,0,0,0,0,0
"Thanks @y-yagi!_x000D_
_x000D_
Do you think it will make 5.2.x as well? I guess being it in master it will target 6.0, right?","C 0001379",0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"@rhymes I backported to 5-2-stable f32549f4d52d762263bfb9eb42ee8ec4bf31e972 :) This fix will be included in the next release.","C 0001380",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thank you for your pull request. Unfortunately, @hahmed has already asked to work on this. As Rails contributors, we should be supportive of new contributors and respect their requests to submit PRs. I'm going to close this so @hahmed can go ahead with their patch.","C 0001381",0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"🤦‍♂️ Thank you!","C 0001382",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@javan Do we need this and `actiontext/bin/webpack-dev-server` files because I see they aren't working now on the rails/rails' master branch?","C 0001383",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"I don't think this `put a dummy application inside the framework tests` scale in the rails repository. It does make sense for an external plugin but for things that are inside the rails repository we should be following the same railties tests pattern that we have for all the other frameworks. The dummy application get outdated and we will end up testing those engines against a version behind of the one that is being currently being developed.","C 0001384",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"I left it by design, but I'm not strongly opposed to remove it.","C 0001385",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0
"The build stalled during `apt-get install`... https://travis-ci.org/rails/rails/jobs/475421372","C 0001386",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Should we backport it to `5-2-stable`?","C 0001387",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"I would like that very much. The lines changed here were introduced in 5.2.","C 0001388",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Backported. :+1:","C 0001389",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Would be great to add tests for this configurations in https://github.com/rails/rails/blob/884310fdd031ed8121944f9ea07c8b7723c4e6b6/railties/test/application/configuration_test.rb","C 0001390",0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0
"The names of those tests will be invalid when Rails 6.0 is out maybe it would be better to say ""... is nil without the default configurations"" and remove `add_to_config 'config.load_defaults ""5.2""`?","C 0001391",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Could you also please add the defaults of `6.0` to this section in the guide https://edgeguides.rubyonrails.org/configuring.html#results-of-load-defaults","C 0001392",0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
"Done!","C 0001393",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Can leave this around","C 0001394",0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0
"Instead of `gsub(/\R/, "" "")` you can use [`.squish`](https://api.rubyonrails.org/classes/String.html#method-i-squish) which should give the similar result. _x000D_
_x000D_
```suggestion_x000D_
        @description = sanitizer.sanitize(@header).squish_x000D_
```","C 0001395",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0
"I'm not sure if I understand this correctly, but I would assume that `@description` would always be set since you always call `generate_description`?","C 0001396",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Good catch! thanks 😸 ","C 0001397",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Not always. For example, index.html doesn't have `@description`, so I added `ontent_for?(:description)` check.","C 0001398",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Shouldn't we remove `if content_for?(:description)` and change these lines to?:_x000D_
```diff_x000D_
-<meta name=""description"" content=""<%= yield(:description) || 'Ruby on Rails Guides' %>"" />_x000D_
-<meta property=""og:description"" content=""<%= yield(:description) || 'Ruby on Rails Guides' %>"" />_x000D_
+<meta name=""description"" content=""<%= yield(:description).presence || 'Ruby on Rails Guides' %>"" />_x000D_
+<meta property=""og:description"" content=""<%= yield(:description).presence || 'Ruby on Rails Guides' %>"" />_x000D_
```_x000D_
_x000D_
(when `content_for?(:description)` is `false` then mata tags with description won't be rendered)","C 0001399",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Oops, I forgot removing `|| 'Ruby on Rails Guides'`.😱 _x000D_
_x000D_
Okay, let's use `.prensece || ""xxx""`!_x000D_
_x000D_
","C 0001400",0,0,0,0,1,1,0,0,0,0,1,1,0,1,3,0,0,0,0
"How about adding `.presence` in the line instead of in the layout template?_x000D_
```suggestion_x000D_
        @description = sanitizer.sanitize(@header).squish.presence_x000D_
```","C 0001401",0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,0,0
"Good idea, but the problem is the file `index.html.erb` is rendered by ActionView Renderer(not `markdown.rb` renderer). So, `@description` isn't set when the `index.html` is rendered (As a result, the `description` becomes an empty string). _x000D_
_x000D_
My another suggestion is setting `description` variable in the view like existing `page_title` and `header_section `._x000D_
_x000D_
https://github.com/rails/rails/blob/86517942e469193e8624d5078d718785552c1270/guides/source/index.html.erb#L1-L9","C 0001402",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Yeah, looks good to me to treat the `description` like as the existing `page_title`.","C 0001403",0,2,0,0,0,1,0,0,1,0,3,0,0,3,5,0,2,0,0
"@kamipo Fixed! I added `description` to index.html and remove `presence` because all pages should have own description._x000D_
_x000D_
please re-review. :)","C 0001404",1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0
"Does this mean that any page has no title?","C 0001405",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"Not sure. I wrote this code same as existing code:_x000D_
_x000D_
https://github.com/rails/rails/blob/29bb990f97816f3e0fb086ec9985983c51a56a96/guides/source/layout.html.erb#L6_x000D_
_x000D_
But, as far as I saw, all page should have title. 🤔 ","C 0001406",0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0
"If so, I'd prefer to remove the redundant ` || 'Ruby on Rails Guides'`.","C 0001407",0,0,0,0,0,0,1,0,0,0,0,1,0,0,2,0,0,0,0
"🆒  I'm gonna remove it 🔪 ","C 0001408",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0
"@kamipo Did it!","C 0001409",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"_Just wondering: What does SNS-friendly means? Is there any link or reference?_","C 0001410",0,0,0,0,1,0,0,0,0,0,0,1,0,0,2,0,0,0,0
"@simi `SNS` stands for ""social network sites"", and it is a popular term use in Japan to refer to social networks (Facebook, Twitter, etc). This PR is pretty much updating the guides so that when someone adds a link to guide and post it on Twitter or Facebook it would show a nice looking logo and summary._x000D_
_x000D_
@toshimaru would you mind addressing @bogdanvlviv's comment as well? I think that's a valid point since otherwise we won't even have a meta description tag that says ""Ruby on Rails Guides"".","C 0001411",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0
"@sikachu Done! And thanks for your follow-up :)_x000D_
_x000D_
@simi Like @sikachu explained, I use the abbreviation SNS for [Social Networking Service](https://en.wikipedia.org/wiki/Social_networking_service) such as Twitter and Facebook. When I say SNS-friendly, it means providing extra meta data for SNS.","C 0001412",0,3,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0
"> Can you squash your commits into one?_x000D_
_x000D_
Sure.","C 0001413",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0
"Thanks!","C 0001414",0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0
"Just enough `value&.respond_to?(:to_d) ? value.to_d : value` or `value && value.respond_to?(:to_d) ? value.to_d : value`._x000D_
_x000D_
```suggestion_x000D_
        when ""average"" then value && value.respond_to?(:to_d) ? value.to_d : value_x000D_
```","C 0001415",0,0,0,1,0,0,2,2,0,0,0,0,0,0,3,0,0,0,0
"Thanks for the suggestion @kamipo change applied. 🙏 ","C 0001416",0,0,0,0,1,0,0,1,0,0,0,0,0,3,3,0,0,0,0
"r? @kamipo ","C 0001417",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"Returning `nil` for `average` no records is preferable to me._x000D_
_x000D_
The reason that I pasted the all operation cases in https://github.com/rails/rails/pull/34601#discussion_r238217343 was for `when ""sum""`._x000D_
_x000D_
https://github.com/rails/rails/blob/e7717ec7a09ca83f92a9819303f7a93e038a2679/activerecord/lib/active_record/relation/calculations.rb#L400-L405_x000D_
_x000D_
Databases also returns `nil` for `sum` no records, but now Active Record regards no records `sum` as `0` instead of `nil`._x000D_
_x000D_
I believe that is historical reason, but it is a good timing to discuss the odd inconsistency for no records `sum` and `average`._x000D_
","C 0001418",0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0
"I think it makes sense to `sum` return `0` and average return `nil`. For sum it doesn't make difference if there is no records or if there is many that the sum returns 0, but for average it does make a difference since you don't know if 0 is because you have no record or because you have two records with `-10` and `10` as value.","C 0001419",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0
"I don't know I get your point, you means that the difference (1) and (3) is less important than the difference (2) and (4), right?_x000D_
_x000D_
```_x000D_
root@localhost [test] > create table t (c int);_x000D_
Query OK, 0 rows affected (0.03 sec)_x000D_
_x000D_
root@localhost [test] > select sum(c) from t; -- (1)_x000D_
+--------+_x000D_
| sum(c) |_x000D_
+--------+_x000D_
|   NULL |_x000D_
+--------+_x000D_
1 row in set (0.00 sec)_x000D_
_x000D_
root@localhost [test] > select avg(c) from t; -- (2)_x000D_
+--------+_x000D_
| avg(c) |_x000D_
+--------+_x000D_
|   NULL |_x000D_
+--------+_x000D_
1 row in set (0.00 sec)_x000D_
_x000D_
root@localhost [test] > insert into t values (10), (-10);_x000D_
Query OK, 2 rows affected (0.00 sec)_x000D_
Records: 2  Duplicates: 0  Warnings: 0_x000D_
_x000D_
root@localhost [test] > select sum(c) from t; -- (3)_x000D_
+--------+_x000D_
| sum(c) |_x000D_
+--------+_x000D_
|      0 |_x000D_
+--------+_x000D_
1 row in set (0.00 sec)_x000D_
_x000D_
root@localhost [test] > select avg(c) from t; -- (4)_x000D_
+--------+_x000D_
| avg(c) |_x000D_
+--------+_x000D_
| 0.0000 |_x000D_
+--------+_x000D_
1 row in set (0.00 sec)_x000D_
```","C 0001420",0,2,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0
"Yes. I can't think in a case where I need to know the sum of all records is 0 because there are no records or because all records are 0.","C 0001421",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"I see, I agree that the difference is less important.","C 0001422",0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0
"Thanks for your PR._x000D_
Basically, PR will only be done on the master branch. After that, the committer backports that correspondence to the stable branch as necessary.  _x000D_
_x000D_
Can you change the target branch to master?  _x000D_
Also, can you add a test case to prevent regression?_x000D_
","C 0001423",0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,0,0,0,0
"Going to close this since it's against the wrong branch. When you reopen please point your PR at the master branch and add a test. Thanks!","C 0001424",0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,1,0,0,0
"Sorry but I disagree. We should talk about the default value of the configuration when no railtie code is applied. So the current documentation is correct. If we tell that the default is `true` for `config.action_controller.default_protect_from_forgery` and the user see that config being set to `true` in the application they will think it is safe to remove when it is not._x000D_
_x000D_
We could talk which configs are applied when the version defaults are set but each individual config should have its default value not depending on the `load_defaults` call._x000D_
_x000D_
Let's change this PR to specify the defaults in each rails version up to 6.0.","C 0001425",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,2,0,0
"> Let's change this PR to specify the defaults in each rails version up to 6.0._x000D_
_x000D_
@rafaelfranca Do you want me to apply this change only, right?:_x000D_
```diff_x000D_
diff --git a/guides/source/configuring.md b/guides/source/configuring.md_x000D_
index 3b21197ae4..6bb5a1e03b 100644_x000D_
--- a/guides/source/configuring.md_x000D_
+++ b/guides/source/configuring.md_x000D_
@@ -805,7 +805,7 @@ There are a few configuration options available in Active Support:_x000D_
_x000D_
 * `config.active_job.custom_serializers` allows to set custom argument serializers. Defaults to `[]`._x000D_
_x000D_
-* `config.active_job.return_false_on_aborted_enqueue` change the return value of `#enqueue` to false instead of the job instance when the enqueuing is aborted. Defaults to `false`._x000D_
+* `config.active_job.return_false_on_aborted_enqueue` change the return value of `#enqueue` to false instead of the job instance when the enqueuing is aborted. Defaults to `false` up to Rails 6.0._x000D_
```","C 0001426",2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"I'd prefer to remove those versions specifics from the config and add a new section like:_x000D_
_x000D_
```_x000D_
# Results of `load_defaults`_x000D_
_x000D_
## With '6.0':_x000D_
_x000D_
* `config.active_job.return_false_on_aborted_enqueue`: false_x000D_
* `config.foo.bar`: true_x000D_
```","C 0001427",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0
"> Sorry but I disagree. We should talk about the default value of the configuration when no railtie code is applied. So the current documentation is correct. If we tell that the default is true for config.action_controller.default_protect_from_forgery and the user see that config being set to true in the application they will think it is safe to remove when it is not._x000D_
_x000D_
Thanks for the explanation, that’s a point._x000D_
> I'd prefer to remove those versions specifics from the config and add a new section like:_x000D_
_x000D_
Good idea. I just amended this PR.","C 0001428",0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"This causes build failures, I'd reckon we should change .travis.yml to make it work?:_x000D_
<details>_x000D_
_x000D_
```diff_x000D_
diff --git a/.travis.yml b/.travis.yml_x000D_
index 7bf508b7a7..68ae82edd1 100644_x000D_
--- a/.travis.yml_x000D_
+++ b/.travis.yml_x000D_
@@ -107,6 +107,9 @@ matrix:_x000D_
         - redis-server_x000D_
         - rabbitmq_x000D_
       before_install:_x000D_
+        - ""rm ${BUNDLE_GEMFILE}.lock""_x000D_
+        - ""travis_retry gem update --system""_x000D_
+        - ""travis_retry gem install bundler""_x000D_
         - sudo sed -i -e '/local.*peer/s/postgres/all/' -e 's/peer\|md5/trust/g' /etc/postgresql/*/main/pg_hba.conf_x000D_
         - ""sudo sed -i 's/port = 5433/port = 5432/' /etc/postgresql/10/main/postgresql.conf""_x000D_
         - ""sudo service postgresql restart 10""_x000D_
@@ -120,6 +123,9 @@ matrix:_x000D_
         - redis-server_x000D_
         - rabbitmq_x000D_
       before_install:_x000D_
+        - ""rm ${BUNDLE_GEMFILE}.lock""_x000D_
+        - ""travis_retry gem update --system""_x000D_
+        - ""travis_retry gem install bundler""_x000D_
         - sudo sed -i -e '/local.*peer/s/postgres/all/' -e 's/peer\|md5/trust/g' /etc/postgresql/*/main/pg_hba.conf_x000D_
         - ""sudo sed -i 's/port = 5433/port = 5432/' /etc/postgresql/10/main/postgresql.conf""_x000D_
         - ""sudo service postgresql restart 10""_x000D_
@@ -133,6 +139,9 @@ matrix:_x000D_
         - redis-server_x000D_
         - rabbitmq_x000D_
       before_install:_x000D_
+        - ""rm ${BUNDLE_GEMFILE}.lock""_x000D_
+        - ""travis_retry gem update --system""_x000D_
+        - ""travis_retry gem install bundler""_x000D_
         - sudo sed -i -e '/local.*peer/s/postgres/all/' -e 's/peer\|md5/trust/g' /etc/postgresql/*/main/pg_hba.conf_x000D_
         - ""sudo sed -i 's/port = 5433/port = 5432/' /etc/postgresql/10/main/postgresql.conf""_x000D_
         - ""sudo service postgresql restart 10""_x000D_
@@ -142,6 +151,9 @@ matrix:_x000D_
       env: ""GEM=activerecord:mysql2""_x000D_
       sudo: required_x000D_
       before_install:_x000D_
+        - ""rm ${BUNDLE_GEMFILE}.lock""_x000D_
+        - ""travis_retry gem update --system""_x000D_
+        - ""travis_retry gem install bundler""_x000D_
         - ""sudo mysql -e \""use mysql; update user set authentication_string='' where User='root'; update user set plugin='mysql_native_password';FLUSH PRIVILEGES;\""""_x000D_
         - ""sudo mysql_upgrade""_x000D_
         - ""sudo service mysql restart""_x000D_
@@ -149,6 +161,9 @@ matrix:_x000D_
       env: ""GEM=activerecord:mysql2""_x000D_
       sudo: required_x000D_
       before_install:_x000D_
+        - ""rm ${BUNDLE_GEMFILE}.lock""_x000D_
+        - ""travis_retry gem update --system""_x000D_
+        - ""travis_retry gem install bundler""_x000D_
         - ""sudo mysql -e \""use mysql; update user set authentication_string='' where User='root'; update user set plugin='mysql_native_password';FLUSH PRIVILEGES;\""""_x000D_
         - ""sudo mysql_upgrade""_x000D_
         - ""sudo service mysql restart""_x000D_
@@ -156,6 +171,9 @@ matrix:_x000D_
       env: ""GEM=activerecord:mysql2""_x000D_
       sudo: required_x000D_
       before_install:_x000D_
+        - ""rm ${BUNDLE_GEMFILE}.lock""_x000D_
+        - ""travis_retry gem update --system""_x000D_
+        - ""travis_retry gem install bundler""_x000D_
         - ""sudo mysql -e \""use mysql; update user set authentication_string='' where User='root'; update user set plugin='mysql_native_password';FLUSH PRIVILEGES;\""""_x000D_
         - ""sudo mysql_upgrade""_x000D_
         - ""sudo service mysql restart""_x000D_
@@ -171,18 +189,27 @@ matrix:_x000D_
       env: ""GEM=activerecord:postgresql""_x000D_
       sudo: required_x000D_
       before_install:_x000D_
+        - ""rm ${BUNDLE_GEMFILE}.lock""_x000D_
+        - ""travis_retry gem update --system""_x000D_
+        - ""travis_retry gem install bundler""_x000D_
         - ""sudo sed -i 's/port = 5433/port = 5432/' /etc/postgresql/10/main/postgresql.conf""_x000D_
         - ""sudo service postgresql restart 10""_x000D_
     - rvm: 2.6.0_x000D_
       env: ""GEM=activerecord:postgresql""_x000D_
       sudo: required_x000D_
       before_install:_x000D_
+        - ""rm ${BUNDLE_GEMFILE}.lock""_x000D_
+        - ""travis_retry gem update --system""_x000D_
+        - ""travis_retry gem install bundler""_x000D_
         - ""sudo sed -i 's/port = 5433/port = 5432/' /etc/postgresql/10/main/postgresql.conf""_x000D_
         - ""sudo service postgresql restart 10""_x000D_
     - rvm: ruby-head_x000D_
       env: ""GEM=activerecord:postgresql""_x000D_
       sudo: required_x000D_
       before_install:_x000D_
+        - ""rm ${BUNDLE_GEMFILE}.lock""_x000D_
+        - ""travis_retry gem update --system""_x000D_
+        - ""travis_retry gem install bundler""_x000D_
         - ""sudo sed -i 's/port = 5433/port = 5432/' /etc/postgresql/10/main/postgresql.conf""_x000D_
         - ""sudo service postgresql restart 10""_x000D_
     - rvm: jruby-head_x000D_
```_x000D_
</details>","C 0001429",0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,1,0,0,0
"#34849 is just a revert of #34621 which tests pre-release version on our CI._x000D_
_x000D_
Is this changing Gemfile.lock any benefit for Rails developers?","C 0001430",1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0
"Don't think so. I don't want to force bundler 2 to developers just yet. Thank you for the PR.","C 0001431",0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0
"I guess it makes sense to mention the support of signed/encrypted/plain cookies API, headers, env, and session in the documentation.  ","C 0001432",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0
"`env` and `session` options are missed here. `cookies` are no more an option","C 0001433",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0
"Am I right that this example is not relevant due to the new cookies API?","C 0001434",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0
"Ditto","C 0001435",1,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0
"👍 Great to see `action-cable-testing` making its way into rails core. Thanks for your continued work @palkan!","C 0001436",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"@rafaelfranca @kaspth Hey folks! Is there any chance for get this reviewed (and, hopefully, merged for Beta 1) and thus finish the `action-cable-testing` merging?","C 0001437",1,1,0,0,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0
"I just saw the other comment and I have added this PR to my list! If all goes well, I'll get to this before  beta1 🙏","C 0001438",1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"There we go, thanks @palkan!","C 0001439",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"do we need an after_initialize here?","C 0001440",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"I think we do, since `config.active_storage.queue` may be set in an initializer.","C 0001441",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"oh, that is true. For other frameworks we use on_load but I think we don't/can't have a hook for Active Storage.","C 0001442",1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"What about setting this example as `error` instead of `info`?","C 0001443",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Makes sense. I'll change it 👍 ","C 0001444",1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Should this raise an error if we get to the else? Otherwise I think this will silently fail.","C 0001445",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"This sentence reads a little weird to me. I think ""Supported preconfigurations are"" would sound better than ""Supported for preconfiguration are""","C 0001446",1,0,1,0,0,0,0,2,0,0,1,0,0,0,0,1,1,0,0
"Agree. I'll fix it!","C 0001447",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"I don't think so, `sqlite3` and `ibm_db` have a direct adapter name to gem name mapping with no version locking. The value itself should be validated by the `#initialize` check in `ChangeGenerator`.","C 0001448",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"What do these new lines do? I've always found the `base` and `context` naming here confusing?","C 0001449",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Do we generally say DBMS elsewhere?","C 0001450",0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,2,0,0,0
"✂️ ","C 0001451",1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"Could switch to `chomp` instead of `sub` while we're here.","C 0001452",0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0
"Curiosity for another time: since 2.6 allows constants to start with non ascii characters, does that mean we could name a Rails app, say, 666?","C 0001453",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"What is this for?","C 0001454",0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0
"Seems odd to mutate it right after defining it. Maybe swap definition order and use `+`?","C 0001455",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0
"✂️ ","C 0001456",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Perhaps we should mirror the options dup and freeze done in convert_database_option_for_jruby","C 0001457",0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0
"Add a newline before and after this `if`. Could also swap to `unless`.","C 0001458",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"✂️ ","C 0001459",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Not used?","C 0001460",2,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
"`keys` instead of `map`, or perhaps `map(&:first)`? Should probably also be moved to `all_database_gems`.","C 0001461",1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"How will we have to maintain these Gemfiles going forward?","C 0001462",0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0
"Adding a newline after `output` and between the `assert_file` seems like it would increase readability in these tests.","C 0001463",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0
"For another time: seeing this deep module nesting makes me think we should consider adding something akin to Action Mailboxes' `routing` for commands.","C 0001464",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0
"Only once in a comment of `activerecord/lib/active_record/connection_adapters/abstract_adapter.rb`. I see `RDBMS` in `guides/source/active_record_basics.md` and `activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb`, but I don't think that's much better. I'll change it to `database` for now.","C 0001465",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"I'm essentially only adding `lookups << ""rails:#{base}:#{name}""` if a `base` exists. This is necessary due to the second part of the lookup code: _x000D_
```ruby_x000D_
unless base || context_x000D_
  unless name.to_s.include?(?:)_x000D_
    lookups << ""#{name}:#{name}""_x000D_
    lookups << ""rails:#{name}""_x000D_
  end_x000D_
  lookups << ""#{name}""_x000D_
end_x000D_
```_x000D_
Specifically, `lookups << ""rails:#{name}""` which limits us to looking up  single segment generator names in the toplevel rails namespace._x000D_
_x000D_
When looking up `rails g db:system:change`, `name` is the last segment (`""change""`), `base` is the namespace path (`""db:system""`), and `context` is `nil`. I think `context` is used if `name` isn't the command name, but I'm not sure why. Maybe we should change `base` to `path`?_x000D_
_x000D_
","C 0001466",1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0
"I think it was probably to minimize line length, but I agree it reads strangely at first. I'll change it.","C 0001467",0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
"Leftovers from whoever coded this function in the app generator. They must've been tired of scrolling. This isn't a problem anymore, so I'll remove the comment.","C 0001468",0,1,0,0,0,0,1,0,0,0,0,0,2,0,1,0,1,0,0
"`#gem_for_database` is used in the app generator, I just want the gem's name here though.","C 0001469",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"I tried these, but found the repeated arg destructing easier to read. I can change if you feel strongly about it.","C 0001470",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"Good question. I initially tried to generate all test apps without `--skip-gemfile`, but then rails will run `bundle install` and crash because rails 6 isn't released yet. I just noticed we have `skip_bundle` as an app generator option, so I'll try using that, and using the gem template in generator tests. ","C 0001471",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Try ""database type""? It's not brilliant, but maybe an improvement? Or ""database platform""?","C 0001472",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,2,0,0
"Using ""database system"" would match the command name and reinforce the concept. But it's perhaps not expounding on what a ""database system"" means, that meaning only comes from seeing MySQL, Postgres and the gang.","C 0001473",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"So it's possible for users to call `rails g db:system:change`? I thought this generator was internal and sufficiently called via it's class `start` method from the command?","C 0001474",1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"Forgot to ask, how are we handling cases where people who may have changed their `config/database.yml` when calling this command?","C 0001475",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"> Forgot to ask, how are we handling cases where people who may have changed their config/database.yml when calling this command?_x000D_
_x000D_
The generator will detect a configuration file already exists and gives options to overwrite, show a diff, reject the change, or merge the two files together._x000D_
_x000D_
Eg._x000D_
_x000D_
```_x000D_
rails g db:system:change --to mysql_x000D_
    conflict  config/database.yml_x000D_
Overwrite /Users/gannon/dummy/config/database.yml? (enter ""h"" for help) [Ynaqdhm] h_x000D_
        Y - yes, overwrite_x000D_
        n - no, do not overwrite_x000D_
        a - all, overwrite this and all others_x000D_
        q - quit, abort_x000D_
        d - diff, show the differences between the old and the new_x000D_
        h - help, show this help_x000D_
        m - merge, run merge tool_x000D_
Overwrite /Users/gannon/dummy/config/database.yml? (enter ""h"" for help) [Ynaqdhm]_x000D_
```","C 0001476",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I've hidden the change generator, reverted the patch to call it with `rails g`, and removed the static gemfile strings in favour of template evaluation. Let me know if there's anything else this PR needs to get shipped!","C 0001477",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Hey, Thanks for adding this!_x000D_
<del>Since this PR is merged we should close #34710, and #34732?</del>_x000D_
Also, I think we should exclude `db:change` from `commands` (`railties/lib/rails/command.rb` file) in order to not show it on `rails --help`, (we should show `db:system:change` instead)._x000D_
Sorry for the too late review._x000D_
_x000D_
Edited: Seems like `Rails::Command::Db::System::ChangeCommand.printing_commands` returns `[""db:change""]` instead of [`db:system:change`].","C 0001478",0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"cc @gmcgibbon ","C 0001479",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Thanks for pointing that out @bogdanvlviv, I'll see what I can do!","C 0001480",0,0,0,0,0,1,0,0,0,0,1,0,0,2,4,0,0,0,0
"Happy New Year!  🎉 ","C 0001481",0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0
"Active Storage now uses ImageProcessing as the backend for variants in Rails 6, so the documentation is correct. Thanks!_x000D_
_x000D_
You can also see more information in the change log 😊","C 0001482",0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
"Thanks, but it reads better as is :)","C 0001483",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0
"Minor thing, but would you mind adding a space after `image/tiff` so it will balance out the braces?","C 0001484",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0
"@sikachu done.","C 0001485",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"Given that TIFF isn’t supported by Chrome or Firefox, I don’t think we can avoid converting TIFF variants to PNG. This is a list of image formats supported by virtually *all* browsers.","C 0001486",0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0
"```suggestion_x000D_
*   Permit generating variants of TIFF images._x000D_
```","C 0001487",0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0
"Can you move this up under the `resized variation of ICO blob` test?","C 0001488",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"@georgeclaghorn done","C 0001489",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0
"@georgeclaghorn done","C 0001490",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Last thing: let’s convert the existing `racecar.jpg` fixture to TIFF instead of introducing a new document of unknown provenance. You can generate `racecar.tif` with the following ImageMagick command:_x000D_
_x000D_
```shell_x000D_
$ convert -compress none activestorage/test/fixtures/racecar.jpg activestorage/test/fixtures/racecar.tif_x000D_
```_x000D_
_x000D_
I’d just give you the resulting TIFF file, but GitHub doesn’t allow attaching it and I’m too lazy to upload it elsewhere.","C 0001491",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"@georgeclaghorn well done sir! let me know if looks good!","C 0001492",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
":wave:,_x000D_
This should be covered by https://github.com/rails/rails/pull/34812","C 0001493",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
"@bogdanvlviv feel free to cherry-pick it if you want.","C 0001494",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We can check a single blob’s key and lean on `create_blob`’s defaults:_x000D_
_x000D_
```ruby_x000D_
test ""create after upload generates a 28-character base36 key"" do_x000D_
  assert_match(/^[a-z0-9]{28}$/, create_blob.key)_x000D_
end_x000D_
```","C 0001495",0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,0
"Let’s just call this `base36`. It’s enough to document that it returns a lowercase string (as you already have).","C 0001496",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
":scissors: this empty line.","C 0001497",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
":scissors:","C 0001498",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"I know this came from the `base58` docs, but the comma after “length” is unnecessary. Can you remove it here and above?","C 0001499",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"The result *will* contain lowercase alphanumeric characters. :wink:_x000D_
_x000D_
Please add a period to the end of this sentence.","C 0001500",1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0
"This constant is no longer used.","C 0001501",0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"This has a nearly 50% chance of being unable to use the random byte and having to fall back to random number... it'd presumably be worth benchmarking before spending any real effort on it, but a quick shot at something that should be cheaper: (Someone want to check my maths?)_x000D_
_x000D_
```ruby_x000D_
idx = byte / 7_x000D_
```_x000D_
_x000D_
","C 0001502",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Might be, I would actually rewrite both base58 and base36 to use a much more pedestrian_x000D_
_x000D_
```_x000D_
n.times.map { alphabet[SecureRandom.random_number(alphabet.length) }.join_x000D_
```_x000D_
_x000D_
More method calls but probably ""less clever"" is better in this case. I didn't touch the implementation because I was thinking ""this byte trickery for obtaining bytes from a potentially-slow SecureRandom is here for a reason""_x000D_
","C 0001503",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"Just didn't want to touch it since this is not what the PR is about and this would need microbenchmarks etc.","C 0001504",0,0,0,0,0,0,0,1,0,0,2,0,0,1,1,0,0,1,0
"I was curious enough to follow through, so:_x000D_
_x000D_
Benchmark: https://gist.github.com/matthewd/6827623f4e0308943e8c82db490cc118_x000D_
_x000D_
We do generally avoid programming to microbenchmarks in high level library code, but I think the other side of that policy is being more accepting of minor ugliness when we're building lower level primitives. _x000D_
_x000D_
(As a point of comparison, it'd be entirely silly to switch to base32 just because we can generate them twice as fast. This is purely about ""there's a measurably-faster way to achieve the same thing for a similar amount of code"".)","C 0001505",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Noted, I'll open a patch for this once I'm done with #34827 ","C 0001506",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This also merits a changelog entry. Can you please add one?","C 0001507",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0
"@sikachu @georgeclaghorn thank you for your comments. `base58(k).downcase` is a cheap solution indeed, because otherwise I would have to add a base36 implementation to SecureRandom which would increase the API surface there (while not reused anywhere else). I can copy-paste the implementation for `base58` with base36 into the Blob class proper if that will be the preference._x000D_
_x000D_
@sikachu as it stands now ActiveStorage::Blob keys are not immune to collisions and this is actually a severe issue, see #34805 - but I do get your point that we should probably use the entropy source better.","C 0001508",0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0
"I think it's fine to add `base32` just for Active Storage. `base58` was added only for Active Record's secure token as well. I think making SecureRandom generate base32 will still be safer than base58 and downcase._x000D_
_x000D_
However, I'm not really sure that `base32` or `base36` should be used here. Base58 actually exclude some characters that are ambiguous, same goes with base32. We may be able to use `base32` and conform to RFC 4648, then just make sure that the length we choose is multiplication of 8 so we don't have to add padding._x000D_
_x000D_
I actually found this implementation of base32 here which is under MIT license, so I think we may be able to use as a reference: https://github.com/stesla/base32/blob/a65a6cded0b37a61d10c5a1bef400464eb353cb1/lib/base32.rb#L56-L62","C 0001509",0,1,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0
"Why would you want the key to be base64 and/or base32 conformant? It does not give you extra guarantees of uniqueness or the like, but it does force you to do bookkeeping to have N-complement key lengths (28 is 4-complement) and creates those `=`s. Base58  does omit chars that look similar (""lowercase-L versus 1"" etc) but I don't know if this has value when you are dealing with a ""bag of keys"" situation at all.","C 0001510",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Ah, I agree with you that this is a bag of key situation and hence it does not really matter. I just thought that base32 is closest to what we want to archive (single-case alphabets and numeric) and is one of the standard so adding this to the core would have a high probability of it being reused, despite this is its first usage._x000D_
_x000D_
I think I'm going to have to ask @georgeclaghorn if ""omitting the similar looking characters"" is one of the feature we want or is it just that base58 is already available so we just use it. If it doesn't matter, then maybe base36 will be fine, otherwise I think base32 will be a great addition to the core as well.","C 0001511",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0
"Base36 sounds fine to me, but the implementation as it stands now needs to move to [the SecureRandom extension](https://github.com/rails/rails/blob/a796b993ad3717f9a0b3d5be070311ab7a0c95ba/activesupport/lib/active_support/core_ext/securerandom.rb), where it can live alongside `SecureRandom.base58`.","C 0001512",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"🎉 please squash-merge since there are quite a few interim commits","C 0001513",0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"Thank you! :heart:","C 0001514",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"would something like this be simpler?_x000D_
```ruby_x000D_
normalized = normalize_detail(message, options)_x000D_
details[attribute.to_sym].any? {|e| normalized.all? {|k,v| e[k] == v} } _x000D_
```_x000D_
","C 0001515",0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0
"Well, actually it isn't the same, see an example_x000D_
_x000D_
```ruby_x000D_
person = Person.new_x000D_
person.errors.add :name, :too_long, count: 25, actual_count: 42_x000D_
# should return `false` since we are missing `actual_count: 42`,_x000D_
# but with your implementation it returns `true`_x000D_
assert_not person.errors.added? :name, :too_long, count: 25_x000D_
```_x000D_
(I've added this case to the test in order to prevent any regression in the future)","C 0001516",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"If possible, could this be worked on my branch instead? I've tried to resolve several conflicts in the past year, basically needing to re-understand the intention and re-implement the fix. Each resolve takes many hours to do.","C 0001517",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Thank you but the current behavior is the expected and the behavior in 5.2.1 was a bug.","C 0001518",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@bogdanvlviv we could also implement your PR, but that would be a change in the behavior so I don't think we should backport. What do you think? Also a new method like https://github.com/rails/rails/issues/34629#issuecomment-445373052 could make sense.","C 0001519",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"Sorry, I hadn't noticed https://github.com/rails/rails/issues/34652#issuecomment-445368949 and that https://github.com/rails/rails/commit/ad739f59aa0fd81850010cedf992b81b24da9ff1 isn't regression but a bug fix, so I do agree with you there is nothing to backport._x000D_
_x000D_
Also, I agree that behaviour now is expected since `added?` should reflect  method call `add`, and our docs clearly explain that `If the error message requires an option, then it returns +true+ with the correct option, or +false+ with an incorrect or missing option.`:_x000D_
_x000D_
```ruby_x000D_
person.errors.add(:name, :greater_than, count: 5)_x000D_
person.errors.added?(:name, :greater_than) # false_x000D_
person.errors.added?(:name, :greater_than, count: 5) # true_x000D_
```_x000D_
_x000D_
> Also a new method like #34629 (comment) could make sense._x000D_
_x000D_
Yeah, it is a good idea to add `def of_kind?(attribute, message = :invalid)`. I'll do it in separate PR._x000D_
_x000D_
Thanks!","C 0001520",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"> Currently, we do not generate Action Mailbox files_x000D_
_x000D_
This is the reason I didn’t add it myself.","C 0001521",0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Gotcha. @georgeclaghorn  probably make sense to add this test from this PR to master?_x000D_
```ruby_x000D_
  def test_generator_skips_action_mailbox_when_skip_active_record_is_given_x000D_
    run_generator [destination_root, ""--skip-active-record""]_x000D_
    assert_file ""#{application_path}/config/application.rb"", /#\s+require\s+[""']action_mailbox\/engine[""']/_x000D_
  end_x000D_
```","C 0001522",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"That’d be great. Can you open a new PR with that test, please?","C 0001523",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"I just opened a new PR with that test https://github.com/rails/rails/pull/34820","C 0001524",0,0,0,0,3,0,0,0,0,0,0,0,0,0,2,0,0,1,0
"```suggestion_x000D_
* How to test incoming emails._x000D_
```","C 0001525",0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0
"```suggestion_x000D_
* How to generate and route emails to a mailbox._x000D_
```","C 0001526",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"I know this is fussy, but *setup* is a noun. *Set up* is the verb form._x000D_
_x000D_
```suggestion_x000D_
Install migrations needed for `InboundEmail` and ensure Active Storage is set up:_x000D_
```","C 0001527",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This came from the README, but can we go with “Configuration” here?_x000D_
_x000D_
```suggestion_x000D_
## Configuration_x000D_
```","C 0001528",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"```suggestion_x000D_
Then set up a mailbox:_x000D_
```","C 0001529",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"Thank you for the review! :bowing_man: I just fixed the mentioned typos.","C 0001530",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"Hey @summera thanks for taking the time to open a PR! Unfortunately we don't generally accept new features into Active Support. Sometimes if a feature seems applicable to a large number of applications we accept AS PRs but I don't think this PR meets that requirement. Thanks again, hope you contribute in the future!","C 0001531",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"It's fewer lines, but I don't find that easier to read.","C 0001532",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"Do we still need these lines?  Can not be specified in service?","C 0001533",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Removed packages from the global section and moved to the matrix where they are required.","C 0001534",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0
"Is this still need?","C 0001535",0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,1,0
"Using `ruby-head` caused this error without these lines. Then added these 3 lines to 2.6.0 and 2.5.3 to make these configuration consistent._x000D_
_x000D_
```ruby_x000D_
    $ bundle install --jobs 3 --retry 3_x000D_
    Traceback (most recent call last):_x000D_
            2: from /home/travis/.rvm/rubies/ruby-head/bin/bundle:30:in `<main>'_x000D_
            1: from /home/travis/.rvm/rubies/ruby-head/lib/ruby/2.7.0/rubygems.rb:302:in `activate_bin_path'_x000D_
    /home/travis/.rvm/rubies/ruby-head/lib/ruby/2.7.0/rubygems.rb:283:in `find_spec_for_exe': Could not find 'bundler' (1.17.2) required by your /home/travis/build/rails/rails/Gemfile.lock. (Gem::GemNotFoundException)_x000D_
    To update to the latest version installed on your system, run `bundle update --bundler`.\nTo install the missing version, run `gem install bundler:1.17.2`\n_x000D_
```_x000D_
_x000D_
Let me remove these lines from 2.6.0 and 2.5.3.","C 0001536",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I'm wondering if these 3 lines should be removed from ruby-head. _x000D_
@y-yagi Would you let me know your thoughts?","C 0001537",0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Sorry to be confused. I was concerned about whether the `sudo sed -i -e '/local.*peer/s/postgres/all/' -e 's/peer\|md5/trust/g' /etc/postgresql/*/main/pg_hba.conf` line is still needed. Is this related to that error?_x000D_
","C 0001538",1,0,0,0,0,0,1,0,0,0,2,1,0,0,1,0,0,0,0
"I see. Removed `sudo sed -i -e '/local.*peer/s/postgres/all/' -e 's/peer\|md5/trust/g' /etc/postgresql/*/main/pg_hba.conf` and all CIs are running fine.","C 0001539",0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0
"Is this restart necessary?","C 0001540",1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"I thik yes. But let me double check.","C 0001541",1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0
"Removing this line causes this error.  Added `postgresql: 10` to the each matrix also starts up PostgreSQL server, I think it is better than ""sudo service postgresql restart 10"" because 'restart"" does not make sense._x000D_
_x000D_
https://travis-ci.org/rails/rails/jobs/481991504#L1220-L1226_x000D_
_x000D_
```ruby_x000D_
psql: could not connect to server: No such file or directory_x000D_
	Is the server running locally and accepting_x000D_
	connections on Unix domain socket ""/var/run/postgresql/.s.PGSQL.5432""?_x000D_
psql: could not connect to server: No such file or directory_x000D_
	Is the server running locally and accepting_x000D_
	connections on Unix domain socket ""/var/run/postgresql/.s.PGSQL.5432""?_x000D_
Cannot run integration tests for que. To be able to run integration tests for que you need to install and start postgresql._x000D_
```","C 0001542",1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I see, thanks for the cheking.","C 0001543",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0
"Similar thing with ""sudo service postgresql restart 10"", `mariadb: 10.3` in the addons won't resolve the upgrade and the restart?","C 0001544",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Unfortunately, It does not work._x000D_
_x000D_
https://travis-ci.org/rails/rails/jobs/482004355#L1218_x000D_
_x000D_
```_x000D_
/home/travis/.rvm/gems/ruby-2.5.3/gems/mysql2-0.5.2/lib/mysql2/client.rb:131:in `_query': Mysql2::Error: Column count of mysql.proc is wrong. Expected 21, found 20. Created with MariaDB 50724, now running 100312. Please use mysql_upgrade to fix this error (ActiveRecord::StatementInvalid)_x000D_
````_x000D_
","C 0001545",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0
"MySQL 5.7 is running https://travis-ci.org/rails/rails/jobs/472491848#L92-L93_x000D_
_x000D_
```ruby_x000D_
mysql version_x000D_
mysql  Ver 14.14 Distrib 5.7.24, for Linux (x86_64) using  EditLine wrapper_x000D_
```_x000D_
_x000D_
","C 0001546",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0
"Will investigate these failures._x000D_
_x000D_
https://travis-ci.org/rails/rails/jobs/472496760#L2138_x000D_
_x000D_
```ruby_x000D_
Cannot run integration tests for sneakers. To be able to run integration tests for sneakers you need to install and start rabbitmq._x000D_
```_x000D_
_x000D_
https://travis-ci.org/rails/rails/jobs/472496749#L2155-L2173_x000D_
_x000D_
```ruby_x000D_
....F_x000D_
Failure:_x000D_
ActiveStorage::Analyzer::VideoAnalyzerTest#test_analyzing_a_rotated_video [/home/travis/build/rails/rails/activestorage/test/analyzer/video_analyzer_test.rb:27]:_x000D_
Expected: 5.227975_x000D_
  Actual: 5.001705_x000D_
rails test /home/travis/build/rails/rails/activestorage/test/analyzer/video_analyzer_test.rb:20_x000D_
.F_x000D_
Failure:_x000D_
ActiveStorage::Analyzer::VideoAnalyzerTest#test_analyzing_a_video [/home/travis/build/rails/rails/activestorage/test/analyzer/video_analyzer_test.rb:16]:_x000D_
Expected: 5.166648_x000D_
  Actual: 5.168239_x000D_
rails test /home/travis/build/rails/rails/activestorage/test/analyzer/video_analyzer_test.rb:9_x000D_
```","C 0001547",0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0
"I am able to reproduce these two errors https://travis-ci.org/rails/rails/jobs/472496749#L2155-L2173 in my local environment running Ubuntu 16.04. _x000D_
_x000D_
It may be related to ffmpeg version installed on Ubuntu 16.04. let me investigate further.","C 0001548",1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0
"Created a separated issue for Active Storage failures https://github.com/rails/rails/issues/34921","C 0001549",0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0
"#34921 has been addressed and now CI are green.","C 0001550",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"` actionmailbox`  `actionpack`  `actiontext`  `activejob` `activerecord` labels need removed, which has been added by the incorrect rebase.","C 0001551",1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"Leaving these commits separately so far to make it easiler to understand what each commit changes. Will squash them once reviewed.","C 0001552",1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"The xenial build supports PostgreSQL 10 by default._x000D_
https://docs.travis-ci.com/user/reference/xenial/#databases-and-services _x000D_
_x000D_
This mean, only need to specify `postgresql: ""10""` to use PostgreSQL 10. So I think that it is unnecessary to install the packages. Also, using DB that installed by default, since the port is 5432, I think that the replacement of the port is unnecessary.  Did not it work?_x000D_
","C 0001553",0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,1,0,0
"Thanks for the review._x000D_
_x000D_
`postgresql-10` and `postgresql-client-10` packages are installed only for `dist: trusty` because RabbitMQ requires setuid, which is not supported by Ubuntu Xenial at Travis CI. Changing port number from 5433 to 5432 is also only for `dist: trusty`._x000D_
","C 0001554",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0
"Did some more testing if `postgresql: ""10"" ` itself is necessary and found removing `postgresql: ""10""` runs PostgreSQL 9.6, well again it adds unnecessary `activereord` label.","C 0001555",0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0
"OK. It seems that there is a misunderstanding that RabbitMQ can not be used for Xenial build._x000D_
It is not installed by default, but seems can install via apt. I tested with following travis.yml. _x000D_
https://github.com/y-yagi/travis-test/blob/8fd6bd0d1a872e94de5c86166a6515694c7b48ba/.travis.yml   _x000D_
_x000D_
RabbitMQ server starts as expected._x000D_
https://travis-ci.org/y-yagi/travis-test/builds/479634242#L296 _x000D_
https://travis-ci.org/y-yagi/travis-test/builds/479634242#L693 _x000D_
https://travis-ci.org/y-yagi/travis-test/builds/479634242#L932-L973 _x000D_
_x000D_
Can you try?_x000D_
","C 0001556",0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0
"Thanks for the useful information. Added `rabbitmq-server` to `services:` and `packages:` section. It looks like it is working fine on Ubuntu Xenial.","C 0001557",0,2,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
"Not able to reproduce this failure yet, although I do not think this failure is related to this pull request change._x000D_
_x000D_
https://travis-ci.org/rails/rails/jobs/482006816#L741-L747_x000D_
_x000D_
```ruby_x000D_
Failure:_x000D_
Mysql2ConnectionTest#test_mysql_connection_collation_is_configured [/home/travis/build/rails/rails/activerecord/test/cases/adapters/mysql2/connection_test.rb:107]:_x000D_
Expected: ""utf8mb4_unicode_ci""_x000D_
  Actual: ""utf8_general_ci""_x000D_
rails test home/travis/build/rails/rails/activerecord/test/cases/adapters/mysql2/connection_test.rb:106_x000D_
````","C 0001558",0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,3,0,0,0
"Increasing the /var/tamfs did not help. Let me take some more look at PostgreSQL failures with isolation._x000D_
```_x000D_
""[[ $GEM != 'ar:postgresql' ]] || sudo mount -o remount,size=50% /var/ramfs""_x000D_
```","C 0001559",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0
"Can you add the following lines to the end of travis.yml for debugging?_x000D_
_x000D_
```_x000D_
after_failure:_x000D_
  - sudo cat /var/log/postgresql/postgresql-*-main.log_x000D_
  - sudo df -k_x000D_
```_x000D_
","C 0001560",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Looks like /var/ramfs file system size does not change. _x000D_
_x000D_
none              786432   786000       432 100% /var/ramfs_x000D_
_x000D_
Opened https://travis-ci.community/t/extending-var-ramfs-size-on-xenial/1997","C 0001561",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"PostgreSQL error has been addressed because the environment value changed to `activerecord:postgresql` since https://github.com/rails/rails/commit/a5b2fff64ca0c1fa7be5124f40a251d991c10a85#diff-354f30a63fb0907d4ad57269548329e3","C 0001562",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"Builds are green with isolation now._x000D_
https://travis-ci.org/rails/rails/builds/484628679?utm_source=github_status&utm_medium=notification","C 0001563",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Reset changes to run with isolation for pull requests.","C 0001564",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"The UJS tests don’t cover any Ruby code, so they don’t need to run against all supported Ruby versions.","C 0001565",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
"Is this filling matrix worth for us?_x000D_
Originally sqlite3_mem and mariadb intentionally run tests without latest ruby to suppress running isolated tests._x000D_
#28740","C 0001566",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
"I see. I thought that we were missing these build for the latest stable Ruby, unintentionally. Seems like adding those builds for `ruby-head` still makes sense, right?","C 0001567",2,0,0,0,0,0,0,1,0,0,1,0,0,0,2,0,2,0,0
"IMO no. sqlite3_mem and mariadb are for just exercising the difference sqlite3/sqlite3_mem and mysql/mariadb._x000D_
I'd say the filling matrix for them is expensive for that purpose._x000D_
_x000D_
","C 0001568",0,0,0,0,0,0,0,1,0,0,0,0,0,2,2,0,1,0,0
"Gotcha. I'm closing this PR for now. (Thanks for the digging into the git history)","C 0001569",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0
"The test failures demonstrate why we need this.","C 0001570",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Ah, I see. I returned it back for now.","C 0001571",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
"This is the test for the `defined?` call 😅","C 0001572",0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0
"Try adding this test to ` test/template/url_helper_test.rb` for testing the URL helper change:_x000D_
_x000D_
```ruby_x000D_
def test_button_to_without_protect_against_forgery_method_x000D_
  self.class.undef_method(:protect_against_forgery?)_x000D_
  assert_dom_equal(_x000D_
    %{<form method=""post"" action=""http://www.example.com"" class=""button_to""><input type=""submit"" value=""Hello"" /></form>},_x000D_
    button_to(""Hello"", ""http://www.example.com"")_x000D_
  )_x000D_
ensure_x000D_
  self.class.define_method(:protect_against_forgery?) { request_forgery }_x000D_
end_x000D_
```_x000D_
_x000D_
As for the CSRF helper change, I don't see a test case for that yet. You can use this [gist](https://gist.github.com/gmcgibbon/3289ad86f0dc39458c8437ec00e95d1e).","PR 000001",0,0,0,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Thanks for the review and tests @gmcgibbon! ","PR 000002",1,0,0,0,0,0,0,1,0,0,1,0,1,1,2,0,0,0,0
"Thanks for fixing this! _x000D_
_x000D_
It's fine for this PR, but in general though we don't use changelogs for small bug fixes. It's usually for features and bug fixes that result in major changes.","PR 000003",0,1,0,0,1,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"Lovely fix, thank you!","PR 000004",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Backported to 5-2-stable @ 4b6a24ce83","PR 000005",0,1,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0
"Since we haven't excluded all cops for `activestorage/test/dummy/**/**`, probably we should consider turning on all the cops for `actionmailbox/test/dummy/**/*` to keep consistency? We can just run `rubocop -a` to fix all offenses under the `dummy` directory.","PR 000006",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"I don't think these examples are much clear than their counterparts written with `name` and `name_was`. When there's only 2 items in the array I prefer the fully written out version._x000D_
_x000D_
```ruby_x000D_
# First examples_x000D_
name_changed?(to: 'Bob') || name_changed?(to: 'Bill')_x000D_
name_changed? && name.in? %w( Bob Bill )_x000D_
_x000D_
# Second example_x000D_
name_changed?(from: 'Pete', to: 'Bob') || name_changed?(from: 'Bill', to: 'Bob')_x000D_
name_changed?(to: 'Bob') && name_was.in? %w( Pete Bill )_x000D_
```_x000D_
_x000D_
The bottom line is that I don't think this usage of `*_changed?` is that common and I don't think we should burden it further. It's diminishing returns at this point. Thanks!","PR 000007",0,0,0,0,5,0,0,0,0,0,0,0,0,0,7,0,1,0,0
"I thought that was clearer and could be useful with more than two items in the array._x000D_
Anyway, thanks for your feedback and examples, @kaspth!","PR 000008",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"Appreciate the suggestion! It's not always easy to know where the line is unless asking, so thanks 😉","PR 000009",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"if i could i’d merge this myself ","PR 000010",0,0,0,0,1,0,0,0,0,0,3,0,0,2,7,1,1,0,0
"Rails is already Facebook free. We don't have a Facebook page and we don't do any advertising on Facebook._x000D_
_x000D_
If ""Facebook-free"" meant striking every occurence of the word Facebook, then it should've been named differently 🤓_x000D_
_x000D_
However, I'll merge this because Twitter was built on Rails, so let's champion that platform instead ✌️","PR 000011",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"> If ""Facebook-free"" meant striking every occurence of the word Facebook, then it should've been named differently 🤓_x000D_
_x000D_
That was a pun as the PR makes Rails codebase literally Facebook-free 😉","PR 000012",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Is not `FrozenError` here?","PR 000013",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Rebased incorrectly. Let me address it.","PR 000014",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Rebased.  Because of my previous incorrect rebase, these labels should be removed. _x000D_
_x000D_
`actioncable`  `actionmailer`  `actionpack`  `actionview`  `activejob`  `activemodel` ","PR 000015",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"I dig it, thanks!","PR 000016",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"How did you measure the new stack? `for` is just a quirky spelling of `each`, so you should still see two more entries (for `each` and the block) than you describe. _x000D_
_x000D_
While I don't love this implementation, I can see alternative versions that could be acceptable... but `inject` is the natural tool for this problem, so I think I'd like to understand a bit more about your use case before we sacrifice readability for it. At a glance, my stack can handle a good 1000+ of the above recursions -- is your query _that_ complex? If so, does it need to be? is AR constructing it poorly? ","PR 000017",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"The original stack was from an actual stack trace for a `SystemStackError` we ran into. The new stack was my assumption, which is probably wrong from what you're saying. In that case, it would only remove 3 stack frames, not 5 (the implicit `#each` and block frames would still be there)._x000D_
_x000D_
The case that triggered this for us looked like this:_x000D_
_x000D_
```ruby_x000D_
relation = compound_ids.map do |id1, id2|_x000D_
  Model.where(id1: id1, id2: id2)_x000D_
end.reduce(&:or)_x000D_
```_x000D_
_x000D_
When I looked into the stack that triggered the `SystemStackError`, as well as the output of `relation.to_dot` for smaller `compound_ids` lists, I noticed a couple of stack-related inefficiencies._x000D_
_x000D_
First was the large number of stack frames from `inject_join`, which I'm attempting to address here._x000D_
_x000D_
The next was the fact that `WhereClause` always adds an `Arel::Nodes::And` node, even if there is only a single predicate in the `WHERE` clause (cf. https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/where_clause.rb#L64-L66). There were also some `Arel::Nodes::Grouping` nodes that seemed to be getting added because Arel isn't aware of SQL operator precedence and adds them just in case. Neither of those are addressed here, but I think they were also a contributing factor on the size of the queries we're able to construct._x000D_
_x000D_
As for the implementation, I think the `i` counter variable can be avoided if it's possible to treat the `list` parameter destructively. In that case, the method can do `return collector if list.empty?` first, then do `collector = visit(list.shift, collector)` before iterating the rest of the list. This would change the loop logic from appending the `join_str` on all but the last element to prepending the `join_str` to every element in `list`, post `#shift`.","PR 000018",0,0,0,0,5,0,0,0,0,0,0,0,0,2,6,2,0,0,0
"To comment directly on `#inject`, it adds an extra stack frame for `#each`:_x000D_
_x000D_
```_x000D_
> [1].inject([]) { raise }_x000D_
Traceback (most recent call last):_x000D_
        5: from /usr/local/var/rbenv/versions/2.5.2/bin/irb:11:in `<main>'_x000D_
        4: from (irb):3_x000D_
        3: from (irb):3:in `inject'_x000D_
        2: from (irb):3:in `each'_x000D_
        1: from (irb):3:in `block in irb_binding'_x000D_
```_x000D_
_x000D_
This is on top of whatever it has been chained with. If you call, `[1].each_with_index.inject([]) { raise }`, the stack trace looks like this in Ruby 2.5.2:_x000D_
_x000D_
```_x000D_
> [1].each_with_index.inject([]) { raise }_x000D_
Traceback (most recent call last):_x000D_
        7: from /usr/local/var/rbenv/versions/2.5.2/bin/irb:11:in `<main>'_x000D_
        6: from (irb):1_x000D_
        5: from (irb):1:in `inject'_x000D_
        4: from (irb):1:in `each'_x000D_
        3: from (irb):1:in `each_with_index'_x000D_
        2: from (irb):1:in `each'_x000D_
        1: from (irb):1:in `block in irb_binding'_x000D_
```_x000D_
_x000D_
You can cut one frame out of this by using `with_object` instead of `inject`, but I'm not sure what the minimum Ruby version is that supports that:_x000D_
_x000D_
```_x000D_
> [1].each.with_index.with_object([]) { raise }_x000D_
Traceback (most recent call last):_x000D_
        6: from /usr/local/var/rbenv/versions/2.5.2/bin/irb:11:in `<main>'_x000D_
        5: from (irb):2_x000D_
        4: from (irb):2:in `with_object'_x000D_
        3: from (irb):2:in `with_index'_x000D_
        2: from (irb):2:in `each'_x000D_
        1: from (irb):2:in `block in irb_binding'_x000D_
```_x000D_
_x000D_
","PR 000019",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I can write up an actual test case that narrows down how many `#or` iterations lead to a stack-related failure.","PR 000020",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I also want to respond to the ""is AR costructing it poorly"" part._x000D_
_x000D_
Here's the loop in question:_x000D_
_x000D_
```ruby_x000D_
relation = compound_ids.map do |id1, id2|_x000D_
  Model.where(id1: id1, id2: id2)_x000D_
end.reduce(&:or)_x000D_
```_x000D_
_x000D_
In SQL terms, the `WHERE` clause in each iteration needs just an `AND`. When we combine those queries with `#or`, we should expect an `OR` to be added to the query._x000D_
_x000D_
Given that `AND` has a higher precedence than `OR`, the reduced query *could* be constructed with no parentheses. I'm not sure how great that is for readability._x000D_
_x000D_
I think the main problem in terms of AR/Arel constructing a bad query is that `Or` is a `Binary` node instead of being combinable with other `Or` nodes into a single node with multiple children (similar to `And`).","PR 000021",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I think the ideal AST for our query would look like the following. And the `ToSql` visitor would be smart enough to parenthesize according to precedence, eliminating the need for `Grouping` nodes to be blindly added in cases where they may not be needed._x000D_
_x000D_
```_x000D_
Or_x000D_
|-- And_x000D_
|   `-- Equality_x000D_
|       |-- Identifier_x000D_
|       `-- BindParam_x000D_
|-- And_x000D_
|   `-- Equality_x000D_
|       |-- Identifier_x000D_
|       `-- BindParam_x000D_
|-- And_x000D_
|   `-- Equality_x000D_
|       |-- Identifier_x000D_
|       `-- BindParam_x000D_
|-- And_x000D_
|   `-- Equality_x000D_
|       |-- Identifier_x000D_
|       `-- BindParam_x000D_
|-- And_x000D_
|   `-- Equality_x000D_
|       |-- Identifier_x000D_
|       `-- BindParam_x000D_
|-- And_x000D_
|   `-- Equality_x000D_
|       |-- Identifier_x000D_
|       `-- BindParam_x000D_
|-- And_x000D_
|   `-- Equality_x000D_
|       |-- Identifier_x000D_
|       `-- BindParam_x000D_
|-- And_x000D_
|   `-- Equality_x000D_
|       |-- Identifier_x000D_
|       `-- BindParam_x000D_
|-- And_x000D_
|   `-- Equality_x000D_
|       |-- Identifier_x000D_
|       `-- BindParam_x000D_
`-- And_x000D_
    `-- Equality_x000D_
        |-- Identifier_x000D_
        `-- BindParam_x000D_
```","PR 000022",0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0
"```ruby_x000D_
# frozen_string_literal: true_x000D_
_x000D_
require ""bundler/inline""_x000D_
_x000D_
gemfile(true) do_x000D_
  source ""https://rubygems.org""_x000D_
_x000D_
  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }_x000D_
_x000D_
  # Activate the gem you are reporting the issue against._x000D_
  gem ""activerecord"", ""5.2.0""_x000D_
  gem ""sqlite3""_x000D_
end_x000D_
_x000D_
require ""active_record""_x000D_
require ""minitest/autorun""_x000D_
require ""logger""_x000D_
_x000D_
# This connection will do for database-independent bug reports._x000D_
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")_x000D_
ActiveRecord::Base.logger = Logger.new(STDOUT)_x000D_
_x000D_
ActiveRecord::Schema.define do_x000D_
  create_table :imported_records, force: true do |t|_x000D_
    t.integer :id1, null: false_x000D_
    t.integer :id2, null: false_x000D_
    t.string :data, null: false_x000D_
_x000D_
    t.index %w[id1 id2], unique: true_x000D_
  end_x000D_
end_x000D_
_x000D_
class ImportedRecord < ActiveRecord::Base_x000D_
end_x000D_
_x000D_
class BugTest < Minitest::Test_x000D_
  def test_stack_limits_x000D_
    1.upto(5_000) do |limit|_x000D_
      puts ""Testing limit=#{limit}""_x000D_
_x000D_
      relation = 1.upto(limit).map do |n|_x000D_
        ImportedRecord.where(id1: n, id2: n)_x000D_
      end.reduce(&:or)_x000D_
_x000D_
      relation.to_sql_x000D_
    end_x000D_
  end_x000D_
end_x000D_
```","PR 000023",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Using that test, I get to around 780-790 compound ID combinations before hitting a `SystemStackError` on `master`. _x000D_
_x000D_
Using my branch, it gets to about 1,100 `#or` iterations. I realize that things like bind value limits might start coming into play, so at a certain point you have to either chunk up these queries or insert the compound ID combinations into a temporary table first. For background, these id combinations are coming from an external API over HTTP._x000D_
_x000D_
(I can also confirm from testing against my branch that we're only saving 3 stack frames, not 5)","PR 000024",0,1,0,0,1,0,0,0,0,0,1,0,0,0,4,0,0,0,0
"> I think the ideal AST for our query would look like the following_x000D_
_x000D_
I agree... I wonder how easily we can achieve something close to that. (i.e. a multi-armed Or seems likely to be sufficient for practical purposes, even with more enthusiastic-than-necessary Grouping.)_x000D_
_x000D_
In comparison, any constant-factor reduction in stack size feels more like we're rearranging deckchairs, tbh._x000D_
_x000D_
---_x000D_
_x000D_
As a quick thought to alleviate your immediate issue, maybe this would work?_x000D_
_x000D_
```ruby_x000D_
relations = compound_ids.map do |id1, id2|_x000D_
  Model.where(id1: id1, id2: id2)_x000D_
end_x000D_
relations = relations.each_slice(2).map { |l, r| r ? l.or(r) : l } while relations.size > 1_x000D_
relation = relations.first_x000D_
```","PR 000025",0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Balancing out the AST like that makes huge difference in terms of stack usage. After making your suggested change, I was able to increase the `limit` to `100_000`. At that point, just running `#to_sql` was taking seconds, so we're definitely in the realm of needing to chunk things better for other reasons._x000D_
_x000D_
It would clearly be better if we had a flattened, precedence-aware `Or` structure in this case instead of a balanced tree of `Or` nodes, but this is a great step in the right direction.","PR 000026",0,0,0,0,0,0,0,0,0,0,3,0,0,1,3,0,1,0,0
"Could you please review?","PR 000027",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I'd rather keep the git history here. It's easy enough to understand by context from the test code.","PR 000028",0,1,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0
"I'm curious about what is the meaning the rescuing LoadError._x000D_
_x000D_
The rescue was added at https://github.com/rails/rails/commit/dc677f7665e5ec74b5a313ba656bba19dc0f853d#diff-5729a03dfd2edf582f8f35a6bacda619R7._x000D_
_x000D_
Does this mean that ignoring LoadError even if loading any component is failed?","PR 000029",0,0,0,0,1,0,0,0,0,0,0,0,0,2,3,0,0,0,0
"I remember that [we once decided  not to spread any rubocop's comments in the code base](https://github.com/rails/rails/pull/32381#discussion_r205212331), and [exclude Cops for specific file/s via `.rubocop.yml` file](https://github.com/rails/rails/pull/33441) if needed:_x000D_
```diff_x000D_
diff --git a/.rubocop.yml b/.rubocop.yml_x000D_
index 96e2ad76d0..3c85378dc0 100644_x000D_
--- a/.rubocop.yml_x000D_
+++ b/.rubocop.yml_x000D_
@@ -189,6 +189,8 @@ Style/ParenthesesAroundCondition:_x000D_
_x000D_
 Style/RedundantBegin:_x000D_
   Enabled: true_x000D_
+  Exclude:_x000D_
+    - 'railties/lib/rails/all.rb'_x000D_
_x000D_
 Style/RedundantReturn:_x000D_
   Enabled: true_x000D_
diff --git a/railties/lib/rails/all.rb b/railties/lib/rails/all.rb_x000D_
index 7f4c625b39..f5dccd2381 100644_x000D_
--- a/railties/lib/rails/all.rb_x000D_
+++ b/railties/lib/rails/all.rb_x000D_
@@ -1,7 +1,5 @@_x000D_
 # frozen_string_literal: true_x000D_
_x000D_
-# rubocop:disable Style/RedundantBegin_x000D_
-_x000D_
 require ""rails""_x000D_
_x000D_
 %w(_x000D_
```_x000D_
_x000D_
Should we follow that approach in this case?","PR 000030",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Yes -- the intention is that if you only have a subset of component gems available, `rails/all` will only load the ones your Gemfile pulls in. See also #31307, which this reminds me I never merged. 🙈 ","PR 000031",0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"IMO no. Configured exclusions make sense when it's structural (""this rule doesn't apply to tests""), whereas comments work better when it's contextual (""this particular instance is an exception to the rule""). Putting the latter in the config makes the config noisy, plus it moves the definition of the exception away from the context that makes it exceptional._x000D_
_x000D_
We definitely don't want such comment-exceptions in places where we just feel the rule is making a bad choice: that implies we don't agree with the rule, so warrants deeper consideration... ""this file ignores the rule to remain syntactically compatible with older Rubies"" is enough of a special case to me._x000D_
_x000D_
(If the path to the version check had required more than one instance of the comment, then things might've balanced out differently.)","PR 000032",0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0
"@eileencodes good idea! I’m curious what error message you get instead now? Because as far as I understand it the app still wouldn’t boot on 2.4, no?","PR 000033",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Yea the error then told me to install Ruby 2.5. ","PR 000034",0,1,0,0,0,1,0,0,0,0,0,0,1,0,2,0,0,0,0
"Bad commit wording. It doesn't fix app boot but it doesn't fail spectacularly 😄 ","PR 000035",0,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0
"Haha, gotcha! 😄","PR 000036",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Why do we need to share the writing connection pool for all handlers?_x000D_
_x000D_
I've found the change when creating the example at https://github.com/rails/rails/pull/35073#issuecomment-458519770, since the `TestFixtures` is included in the `ActiveSupport::TestCase`, the overwriting connection pool by the writing connection pool is happened in the `before_setup`, so it is hard to testing replica connections in their apps._x000D_
_x000D_
https://github.com/rails/rails/blob/bf42e1506be85c0c977038ae334548f5699f7afd/railties/lib/rails/test_help.rb#L23-L29_x000D_
_x000D_
Unless suppressing the effect of `setup_shared_connection_pool`, the following test won't be passed._x000D_
_x000D_
```diff_x000D_
diff --git a/test/test_helper.rb b/test/test_helper.rb_x000D_
index 0ff12e7..5d82a8b 100644_x000D_
--- a/test/test_helper.rb_x000D_
+++ b/test/test_helper.rb_x000D_
@@ -10,4 +10,11 @@ class ActiveSupport::TestCase_x000D_
   fixtures :all_x000D_
 _x000D_
   # Add more helper methods to be used by all tests here..._x000D_
+_x000D_
+  # `enlist_fixture_connections` replaces connection pools in non-default handlers_x000D_
+  # by default writer connection pool._x000D_
+  # We can't test `:reading` connection unless suppressing the effect of the method for now._x000D_
+  def enlist_fixture_connections_x000D_
+    []_x000D_
+  end_x000D_
 end_x000D_
```_x000D_
_x000D_
```diff_x000D_
diff --git a/test/models/post_test.rb b/test/models/post_test.rb_x000D_
index 6d9d463..f2523ce 100644_x000D_
--- a/test/models/post_test.rb_x000D_
+++ b/test/models/post_test.rb_x000D_
@@ -1,6 +1,11 @@_x000D_
 require 'test_helper'_x000D_
 _x000D_
 class PostTest < ActiveSupport::TestCase_x000D_
+  test ""replica?"" do_x000D_
+    pool = Post.connection_handlers[:reading].connection_pool_list.first_x000D_
+    assert pool.connection.replica?_x000D_
+  end_x000D_
+_x000D_
   # test ""the truth"" do_x000D_
   #   assert true_x000D_
   # end_x000D_
```","PR 000037",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"If we don't combine them, then one connection will be inside the fixture transaction and see the fixtures (& any changes to them), and the other will see empty tables.","PR 000038",0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0
"I see... so for now probably people need to restore (re-overwrite) pools in handlers if their app uses read-write-splitting or sharding and want to test that explicitly.","PR 000039",0,0,0,0,1,0,0,0,0,0,0,0,0,2,1,0,0,0,0
"I haven't checked, but I think we should only do this when transactional fixtures are enabled -- so the right way to properly test splitting would be to disable that. Then your writes will really hit your database, and the reads in the other connection will be able to see them. ","PR 000040",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Yeah, that approach sounds good to me.","PR 000041",0,1,0,0,1,1,0,0,0,0,0,0,0,1,2,1,0,0,0
"I fixed the sqlite memory tests by creating a temporary connection pool. This isn't necessary for the other adapters but the sqlite memory ones break if I create new connection handlers and connections while running. I didn't want to skip sqlite memory for this because it's kind of hacky and I'd like all adapters to be testing it. The temp connection pool is the same method the query cache tests use. ","PR 000042",0,0,0,0,1,0,0,0,0,0,0,0,1,0,3,0,0,0,0
"How this works in a multi-tenant environment? The two connections needs to have different data. In the tenant 1, user A should exist but in the tenant 2, only user B should exists._x000D_
_x000D_
Does the solution here makes harder to implement a multi-tenant approach to fixtures like https://github.com/rails/rails/pull/34246?","PR 000043",0,1,0,0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"A multi-tenant environment would have different specification names for tenant 1 and tenant 2 right? This only ties a primary and replica together if they have the same connection specification name. _x000D_
_x000D_
So a case where we need multiple directories for fixtures is still broken but this at least fixes the fact that a replica can't see a primary in tests. ","PR 000044",0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Thanks, that makes sense. In the multi-tenant case we would have multiple primaries, so we still need to solve that problem. I'll see with @gmcgibbon what is missing now that the API is defined.","PR 000045",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This also can keep behavior that specified an invalid value between Ruby 2.6 and before versions._x000D_
_x000D_
```_x000D_
$ ruby -v -rbigdecimal -rbigdecimal/util -e 'p ""123,003"".to_d; p BigDecimal(""123,003"")'_x000D_
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]_x000D_
0.123e3_x000D_
0.123e3_x000D_
``` _x000D_
_x000D_
``` _x000D_
$ ruby -v -rbigdecimal -rbigdecimal/util -e 'p ""123,003"".to_d; p BigDecimal(""123,003"")'_x000D_
ruby 2.6.0dev (2018-12-21 trunk 66474) [x86_64-linux]_x000D_
0.123e3_x000D_
Traceback (most recent call last):_x000D_
	1: from -e:1:in `<main>'_x000D_
-e:1:in `BigDecimal': invalid value for BigDecimal(): ""123,003"" (ArgumentError) _x000D_
```_x000D_
","PR 000046",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Fantastic! Now we can just put the `ensure` at the top level. That always bothered me before.","PR 000047",0,0,0,0,1,0,0,0,0,0,0,1,0,0,2,0,1,0,0
"Could switch to `tap` while we're here.","PR 000048",0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0
"Huh, I would've thought this begin could also be removed and the `rescue` could be lined up with `else`.","PR 000049",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"> Could switch to `tap` while we're here._x000D_
_x000D_
Modified to use `tap`.","PR 000050",0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0
"This `begin` is to rescue an exception raised by `commit_transaction` (`commit_transaction` is called when a transaction block is succeeded)._x000D_
_x000D_
https://github.com/rails/rails/blob/49f9dff9b6ba1451d8c85927d5f75327bd2322d9/activerecord/test/cases/transactions_test.rb#L572-L585_x000D_
_x000D_
This `begin` couldn't be removed since a begin could be ommited only when toplevel in methods and do-end blocks, but here is in if-else block.","PR 000051",0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0
"Cool, thanks!","PR 000052",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Does rubocop have anything to remove `send` on the now public define_method and others? Or passing the block as a param instead of using yield like we did for _read_attribute?","PR 000053",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"Unfortunately any cop doesn't exist for now._x000D_
_x000D_
```_x000D_
% cat send_and_block_param.rb_x000D_
Object.send(:define_method, :foo) {}_x000D_
Object.send(:remove_method, :foo)_x000D_
_x000D_
def foo1_x000D_
  bar { yield }_x000D_
end_x000D_
_x000D_
def foo2(&block)_x000D_
  bar(&block)_x000D_
end_x000D_
_x000D_
def bar_x000D_
  yield_x000D_
end_x000D_
_x000D_
% be rubocop send_and_block_param.rb_x000D_
Inspecting 1 file_x000D_
._x000D_
_x000D_
1 file inspected, no offenses detected_x000D_
```","PR 000054",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I tried to reproduce your issue, but not reproduced. _x000D_
The scaffold controllers generator generates codes as follows. _x000D_
_x000D_
```ruby _x000D_
format.html { redirect_to @post, notice: 'Post was successfully created.' }_x000D_
``` _x000D_
_x000D_
Can you provide a reproducing application your issue?_x000D_
","PR 000055",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Sorry, I did not want to close this, it was an accident._x000D_
I did not explain myself sufficiently. This happens when I generate a scaffold controller in a rails plug-in, but not in a rails app._x000D_
```_x000D_
 rails g scaffold_controller Blog --model-name=post_x000D_
```","PR 000056",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks for your detail. I understood. _x000D_
As test fails, should not stop using `redirect_resource_name`._x000D_
Can you fix the process of generating `redirect_resource_name`?_x000D_
","PR 000057",0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I made another pull request to fix this bug.","PR 000058",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"@kaspth Fixed and changed the title and the description of the PR.","PR 000059",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0
"Can we change to `assert_equal ""<1234@mikel.me.com>""` rather than making the brackets optional?","PR 000060",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"it would fail on mail 2.7.1","PR 000061",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"I can't imagine a breaking change in Action Mailer that will break only Mail master. If that situation happens it should be probably fixed in the Mail gem that suppose to have very stable api between versions._x000D_
https://github.com/mikel/mail/pull/1303 will definitely help to catch failures earlier, but I don't think that a new stage in Rails will justify longer builds._x000D_
one of the goals of https://github.com/rails/rails/pull/34754 is to reduce the number of jobs and this goes against it, eventually we can do the same for other other dependencies like Sprockets, Puma, Redis etc...","PR 000062",0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0
"That's fair. In that case, let's use a different header in these tests whose decoded value is the same on Mail 2.7 and Mail 2.8. Or just remove the second In-Reply-To header since the first header demonstrates the behavior under test.","PR 000063",0,1,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"this way it'll pass on both versions","PR 000064",0,1,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Please remove the above `We unset temporary bundler variables to load proper bundler and Gemfile._x000D_
` comment.","PR 000065",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Comment removed.","PR 000066",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Related to #22991.","PR 000067",0,3,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0
"I tried to reproduce step(described in #6318) with `Bundler.with_original_env`, but not reproduced. I assume this already fixed with bundler side, and no need to use `with_clean_env`._x000D_
","PR 000068",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@marcotc Thanks!","PR 000069",0,0,0,0,0,0,0,1,0,0,0,0,0,0,4,0,0,0,0
"Well, that's helpful rails-bot 😂 — @gmcgibbon are you up for tuning the auto-labeling?","PR 000070",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
":+1: for not logging personal data when it’s not needed. Can we log the `Message-ID` instead, so that outbound emails in application logs can still be correlated with mail server logs?","PR 000071",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"I'm not fond of the `Delivered mail` text as thats not actually what happened.  The app has sent the email but it isn't responsible for delivering it or knowledgable if it has been delivered._x000D_
_x000D_
Yes the mail is part of a delivery but to call it `delivered` is not accurate imo._x000D_
_x000D_
Everything else about this change however is spot on.  Love the removal of private info from logs.  _x000D_
","PR 000072",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"> 👍 for not logging personal data when it’s not needed. Can we log the `Message-ID` instead, so that outbound emails in application logs can still be correlated with mail server logs?_x000D_
_x000D_
Good idea! Took me a while to get around to this though. I've also run into (and fixed) a bug where auto-generated message ids are not included in the payload. (It seems they aren't generated until you call `Mail::Message#encoded`.)_x000D_
_x000D_
> I'm not fond of the `Delivered mail` text as thats not actually what happened. The app has sent the email but it isn't responsible for delivering it or knowledgable if it has been delivered._x000D_
> _x000D_
> Yes the mail is part of a delivery but to call it `delivered` is not accurate imo._x000D_
> _x000D_
> Everything else about this change however is spot on. Love the removal of private info from logs._x000D_
_x000D_
I get where you're coming from but there's also another perspective: Rails has 'delivered' the mail to the subsystem responsible for the next step towards delivery. And it's now consistent with the event name.","PR 000073",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"What about removing `delegate :streams, to: :subscription` from the TestCase class? Since we have specific assertions we probably don't need to expose `streams` anymore","PR 000074",0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"I agree. I thought about it too. It makes sense to do it earlier before too many people start using it in their tests.","PR 000075",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0
"Done! https://github.com/rails/rails/pull/34740/commits/4633affd6ecf9f2a647853758aa996f3d6b75e86#diff-6969e19230d7e29a55b9de21f5379867L170","PR 000076",0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0
"Very nice. Thank you!","PR 000077",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Break up the rats nest! Thanks 😄","PR 000078",0,0,0,0,4,0,0,0,0,0,0,0,0,0,7,0,0,0,0
"Was this ever documented to be supported? Seems weird to pass in nil directly.","PR 000079",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"> Was this ever documented to be supported? Seems weird to pass in nil directly._x000D_
_x000D_
This is a good point ☝️ _x000D_
_x000D_
Before creating this pull request, I read this comment line and interpreted it as `nil` can be directly passed as `params`:_x000D_
_x000D_
https://github.com/rails/rails/blob/2f6456cbe1da73c13b37e23720caa8716df85e78/actionpack/lib/action_controller/test_case.rb#L377","PR 000080",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"It sounds like it's a leftover from when we had positional parameters `get :index, nil, { 'CONTENT_TYPE' => '…' }`. Ref: https://github.com/rails/rails/commit/baf14ae513337cb185acf865e93dfc48f3aabf6a#diff-600d5368b55e46ed961abb4295977ac3L498_x000D_
_x000D_
Except there's also the `:body` option, which requires that `:params` can be nil._x000D_
_x000D_
Thanks! Unfortunately, 5.1 no longer receives bug fixes, so I'll only backport this to 5.2.","PR 000081",0,0,0,0,3,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Do we need to require the whole thing here?","PR 000082",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Seems like a good idea just to require `""concurrent/utility/processor_counter""`","PR 000083",0,0,0,0,1,1,0,0,0,0,2,0,0,1,2,0,0,0,0
"If we're making the default an ""it just works"" value like this, does it make sense to still include it here? If most people don't need to override it, maybe this line can just be a plain `parallelize`?","PR 000084",0,0,0,1,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0
"I thought that it would be better to keep this in this form since it would be easier for users to figure out that their tests use the actual core count as a number of workes. I suppose we should either simplify this to `parallelize` and `parallelize(with: :threads)`(a few lines above), or extend it to `parallelize(workers: :number_of_processors, with: :processes)` to emphasize that users' tests use ""fork approach"".","PR 000085",0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0
"I guess [tests failed](https://travis-ci.org/rails/rails/jobs/469281088#L2352) because the physical core count of the Travis' server is equal to 1._x000D_
I could reproduce those failures on my VM only by running those tests with `PARALLEL_WORKERS=1`._x000D_
I think we should change `parallelize(workers: :number_of_processors)` to `parallelize(workers: 2)` for those tests by [the similar approach we do there](https://github.com/rails/rails/blob/master/railties/test/application/test_runner_test.rb#L545).","PR 000086",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"💪❤️","PR 000087",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"I like it spelling out as well 👍

> On Dec 19, 2018, at 00:55, Bogdan <notifications@github.com> wrote:
> 
> @bogdanvlviv commented on this pull request.
> 
> In railties/lib/rails/generators/rails/app/templates/test/test_helper.rb.tt:
> 
> >  <%- else -%>
> -  parallelize(workers: 2)
> +  parallelize(workers: :number_of_processors)
> I thought that it would be better to keep this in this form since it would be easier for users to figure out that their tests use the actual core count as a number of workes. But I don't have strong opinions. I think that we should either simplify this to parallelize and parallelize(with: :threads)(a few lines above), or extend it to parallelize(workers: :number_of_processors, with: :processes) to emphasize that test suit run use ""fork approach"".
> 
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub, or mute the thread.
","PR 000088",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"It is expected that instance of `ActiveSupport::TimeZone` be passed to `zones`. _x000D_
Since `ActiveSupport::TimeZone` has a `=~` method, so this warning should not normally show._x000D_
https://github.com/rails/rails/blob/0fa5b5510c6faefc33ab3715e08b2604195a1063/activesupport/lib/active_support/values/time_zone.rb#L331-L335 _x000D_
_x000D_
The reason why this happens in the test is that the `=~` is not defined in the Fake class used in the test, so let's add the `=~` to the Fake class to deal with it._x000D_
","PR 000089",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Thanks for the assistance! That did the trick.","PR 000090",0,0,0,0,0,0,0,0,0,0,1,1,0,0,4,0,0,0,0
"The problematic test does not assume that this check is done correctly (it is checked by other tests). _x000D_
Therefore, the test has failed with this fix. _x000D_
https://travis-ci.org/rails/rails/jobs/469956828#L1748-L1760 _x000D_
_x000D_
Can you fix it so as not to check as follows? _x000D_
_x000D_
```diff _x000D_
diff --git a/actionview/test/template/form_options_helper_test.rb b/actionview/test/template/form_options_helper_test.rb_x000D_
index a2d1474..4ccd3ae 100644_x000D_
--- a/actionview/test/template/form_options_helper_test.rb_x000D_
+++ b/actionview/test/template/form_options_helper_test.rb_x000D_
@@ -36,6 +36,7 @@ def secret_x000D_
   module FakeZones_x000D_
     FakeZone = Struct.new(:name) do_x000D_
       def to_s; name; end_x000D_
+      def =~(_re); end_x000D_
     end_x000D_
```_x000D_
","PR 000091",0,1,0,0,0,0,0,0,0,0,1,0,0,0,2,0,1,0,0
"@y-yagi thanks for guidance! Wanted to contribute on this one, but was having a hard time figuring out the expected behavior for that particular test.","PR 000092",0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0
"Test failure: https://travis-ci.org/rails/rails/jobs/469101728#L1463-L1475_x000D_
```_x000D_
Failure:_x000D_
FormOptionsHelperTest#test_time_zone_select_with_priority_zones_is_not_implemented_with_grep [/home/travis/build/rails/rails/actionview/test/template/form_options_helper_test.rb:1282]:_x000D_
Expected: <select id=""firm_time_zone"" name=""firm[time_zone]""><option value="""" disabled=""disabled"">-------------</option>_x000D_
<option value=""A"">A</option>_x000D_
<option value=""B"">B</option>_x000D_
<option value=""C"">C</option>_x000D_
<option value=""D"" selected=""selected"">D</option>_x000D_
<option value=""E"">E</option></select>_x000D_
Actual: <select name=""firm[time_zone]"" id=""firm_time_zone""><option value=""A"">A</option>_x000D_
<option selected=""selected"" value=""D"">D</option><option value="""" disabled=""disabled"">-------------</option>_x000D_
<option value=""B"">B</option>_x000D_
<option value=""C"">C</option>_x000D_
<option value=""E"">E</option></select>_x000D_
```","PR 000093",0,0,0,0,4,0,0,0,0,0,0,0,0,0,3,1,0,0,0
"@jeremy I see...I looked into it and I'm having some trouble understanding why there would be a deprecation warning._x000D_
_x000D_
[This] line seems to be throwing the warning, but I thought the ```=~``` method was overridden [here]. Using to_s or grabbing the TimeZone's name breaks the same test._x000D_
_x000D_
Any ideas on the path forward for this one?_x000D_
_x000D_
[This]: https://github.com/rails/rails/blob/528c5bb224a2f9ea6eee7b15ef5de5e9d17bf309/actionview/lib/action_view/helpers/form_options_helper.rb#L583_x000D_
[here]: https://github.com/rails/rails/blob/528c5bb224a2f9ea6eee7b15ef5de5e9d17bf309/activesupport/lib/active_support/values/time_zone.rb#L333","PR 000094",0,2,0,0,2,0,0,0,0,0,0,1,1,0,6,1,2,0,0
"@vinistock Thanks!","PR 000095",0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"Guides aren't really meant to have a timeline in them. They're a record of what has happened, not what is going to be happen._x000D_
_x000D_
Let's wait for Action Text and Action Mailbox to be merged into Rails before we write about them. Thanks!","PR 000096",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"> Guides aren't really meant to have a timeline in them. They're a record of what has happened, not what is going to be happen._x000D_
_x000D_
When I type ""rails 6"" in Google, the link https://edgeguides.rubyonrails.org/6_0_release_notes.html is second in a list. The article is linked from many other Rails 6 articles. The point is that this is not an obscure text somewhere on The Dark Web - it is a text that many people read in order to see details about Rails 6. I was one of those people. And I was totally confused by the information presented. Imagine the typical confusions of a normal person (who is not active in Rails development/community):_x000D_
- ""Why so little info? Oh, apparently Rails 6 is not released yet... So why can't this article clearly say on the very top of the page that Rails 6 and this documentation are a work-in-progress? It's irritating having to Google separately for this info!""_x000D_
- ""Ok, the Rails 6 is a work in progress, the list of features is not yet complete - I understand all that. But why can't this article have at least something - even some simple mentions on what is upcoming, on what features were already decided to be included?""_x000D_
- ""Rails 6 is work in progress. But why isn't here any info about the timeline in the main document that describes this milestone? Until the release, info about the dates are the most important info one needs (the need for features/compatibility documentation comes after the need for a timeline; everything else becomes important even later on). Do I really have to be an active part of the Rails development community in order to get a simple answer? Do I really need to start reading blogs just to see some glimpses and guestimations about the possible release dates? Looks totally excessive... I wish this important info was right here and there would be a volunteer, who would bother to make such changes...""_x000D_
_x000D_
_x000D_
Rails 6 will be one of the biggest releases yet. Cool changes to Rails should be actively promoted (it's not like Rails has been winning the Web competition even against Python). The documentation page is an essential part of Rails's marketing. It should be used to the fullest, even if the info written is there only temporarily and will be deleted after the release. The fact that this info will be there for a year, informing the very people interested in the release, is more than enough to make an effort to make proposed changes worth it._x000D_
_x000D_
If you still disagree, then [this page](https://edgeguides.rubyonrails.org/6_0_release_notes.html) should be closed from public view. I would prefer not to, but for the sake of consistency this must be done. The link should start working publicly only after the release since the article should tell only about stuff that has already happened. If I will make this suggestion can I count on your approval/support?_x000D_
_x000D_
_x000D_
> Let's wait for Action Text and Action Mailbox to be merged into Rails before we write about them. _x000D_
The decision to include both was already made:_x000D_
- https://weblog.rubyonrails.org/2018/10/3/introducing-action-text-for-rails-6/_x000D_
- https://weblog.rubyonrails.org/2018/12/13/introducing-action-mailbox-for-rails-6/_x000D_
Both posts were written by the DHH himself, on Rails's official web site. This is as close to the actual merge as one gets._x000D_
_x000D_
The Release Notes page for Rails 6 are 'Work in progress'. So why isn't work on it allowed?_x000D_
![](https://user-images.githubusercontent.com/2521942/50098587-e8d71a00-0224-11e9-9d46-2e2b85fbdb65.png)_x000D_
_x000D_
So why to wait? Why to leave things until the last moment? Why to leave it until the crunch time? I am sure that during the release window there will be plenty of other important things to do (admittedly much more technically difficult than what I am doing here; so why not let competent people do the difficult stuff, while I am helping with this kind of important ""minutiae""). Why can't I help a little bit, now that I have time and motivation, to help other people (here and now) that are searching for the relevant information?_x000D_
_x000D_
Marketing = selling ideas to people. This usually means having to go where the people/customers are. Rails is in a very fortunate situation that it has people who come to the aforementioned page in order to be ""sold"" (the idea that Rails 6 will be an awesome release, that Rails is in good hands and is a viable option for development). This opportunity is not used. I had a modest proposal of at least closing the most glaring hole and getting at least some kind of benefit from all the current visitors (who at this moment and until the release will simply waste their time visiting the page and learn absolutely nothing about the main topic of the article)._x000D_
_x000D_
_x000D_
I sincerely hope that you will reconsider your decision._x000D_
_x000D_
Regardless, please do have a nice day! :-)","PR 000097",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks for elaborating! I did not expect ""to those interested"" would be expanded to all that and I definitely didn't anticipate your Google search results point, good idea! 😄_x000D_
_x000D_
This sparked a discussion in Core and we're looking into doing something to leverage this, as you've suggested. Most of us want something other than to add this info wholesale into this guide, so that still hasn't changed._x000D_
_x000D_
We've discussing the release timeline internally and we hope to announce that on the blog when it's ready. So that'll be our immediate fix. Once that's out, feel free to chime in with the search results status on your end too! Thanks again 😊","PR 000098",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"@kaspth _x000D_
I guess [this link](https://weblog.rubyonrails.org/2018/12/20/timeline-for-the-release-of-Rails-6-0/) is what you meant? Thank you for having a separate post about the timeline of Rails! Now my only request would be to put this link at the top of the documentation page. :-)_x000D_
_x000D_
Almost 3 weeks have passed, but this timeline link is not on the first page of Google search results (""rails 6""). I am sure that it could be somewhat easily found by changing the search query, but that doesn't really change my overall points:_x000D_
1. This would require more work from the user. If something can be done to improve ""usability"" (generally speaking), it should be done._x000D_
2. (all the stuff I already wrote about the importance of marketing and use of opportunities like when ""the customer"" is already here to consume relevant information)_x000D_
3. Internet is a linked system. Without links the main purpose of Internet/pages is defeated. One should link important pages with each other. This not only improves the ""usability"" of the web page (those who are interested, can go and read more), but also improves the standing in search engines (a link from the major Rails 6 page would make not only the specific Rails 6 Timeline post more visible and relevant, but would improve the overall standing of the whole Rails blog)._x000D_
_x000D_
Could you please put a link to the Timeline blog post at the top of the documentation page (with a short mention that Rails 6 has not been release yet)? That would really improve the informational value of the documentation page!","PR 000099",0,0,0,0,1,2,0,0,0,0,2,0,2,9,16,0,0,0,0
"Thanks, I'll pass on working on this 👍","PR 000100",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"The documentation page is tied to releases. Even if we add a link for the post in the documentation it would be only accessible and easy to find in a Google search at the time that Rails 6 is released, so doing that would not help much._x000D_
_x000D_
I just tried a good search with ""rails 6"" on google and that post was the first result. For the future, the timeline will be always the same, always releasing on April. I plan to write a documentation page about our general release engineering some time before the rails 6 release.","PR 000101",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"These are correct as they are.","PR 000102",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Why is ff0af71 (and 48d1c48) necessary?","PR 000103",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The deprecation warning should not be happened in the next stable release.","PR 000104",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"Removed this deprecation warning as far as I understand this file will not be removed in 5.2.x.","PR 000105",0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,0,0,0
"Can you fix CHANGELOG entry too?_x000D_
https://github.com/rails/rails/pull/34720/files#diff-4be3c90df95ede75a8d48016f370c0d9R7","PR 000106",0,1,0,0,0,0,0,0,0,0,0,0,0,0,4,0,3,0,0
"Updated the changelog entry.","PR 000107",0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Looks like this pull request includes something not available for Ruby 2.2 and 2.3. Let me correct them.","PR 000108",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Reverted https://github.com/rails/rails/pull/34720/commits/e8237d18f3f756e49d4db91e4a69bc9166f604a5 since only Ruby 2.4 or higher supports `Regexp#match?`. Now the remaining failures at 5-2-stable are #32938 and #34719.","PR 000109",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Regexp#match? is supported https://github.com/rails/rails/blob/5-2-stable/activesupport/lib/active_support/core_ext/regexp.rb#L8 but String#match? isn't_x000D_
_x000D_
I don't see a reason why https://github.com/rails/rails/pull/32695 should be backported. It's a performance optimization and warnings are from rubocop. It's not related to Ruby 2.6 compatibility at all._x000D_
","PR 000110",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks for the reviews._x000D_
_x000D_
I have dropped #32695, ff0af71 and 48d1c48 from this pull request changing .rubocop.yml_x000D_
Also backported #32938 to 5-2-stable to support Ruby 2.6 new Range behavior._x000D_
","PR 000111",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks!","PR 000112",0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Cool, @palkan. Could you share the motivation/pressures behind running a separate cable server in the engine, vs using a single server and providing channels within the engine?","PR 000113",0,1,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"> Could you share the motivation/pressures behind running a separate cable server in the engine, vs using a single server and providing channels within the engine?_x000D_
_x000D_
Separate cable server allows you to:_x000D_
- use a different set of identifiers_x000D_
- use a different authentication strategy (we perform **authentication** within a Connection class and **authorization** within a Channel class)._x000D_
_x000D_
My particular use-case is the following: I'm building a Admin Console engine for the app, I'd like to add real-time functionality in the future, but I don't want to worry about whether the main app has its own cable, will there be any conflicts, etc.._x000D_
_x000D_
So, I want an isolated, plug-n-play, way to add real-time functionality to the app: just drop a gem and that's it. ","PR 000114",0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,0
"> So, I want an isolated, plug-n-play, way to add real-time functionality to the app: just drop a gem and that's it._x000D_
_x000D_
That's an interesting idea! Would be interested in hearing how it turns out.","PR 000115",0,4,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"@kaspth could you please put this one on your list too?)","PR 000116",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"Looks good! We'll just need a changelog entry and then squash your commits to 1, thanks!","PR 000117",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@kaspth Done! 🙂","PR 000118",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"@kaspth Just a friendly reminder) Rebased and ready to be merged","PR 000119",0,0,0,0,0,2,0,0,0,0,5,0,0,0,6,0,0,0,0
"On Wed, Feb 13, 2019 at 7:22 Vladimir Dementyev <notifications@github.com>
wrote:

> @kaspth <https://github.com/kaspth> Just a friendly reminder) Rebased and
> ready to be merged
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/rails/rails/pull/34714#issuecomment-462960602>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ALpCsPjBEtgUFnTVUO3nqRJvQBjrbO0gks5vMz6hgaJpZM4ZUgja>
> .
>
-- 
—
name_en: “Yuzuru Nakamura”
name_ja: ""中村 譲”
mail: ""shnsprk@gmail.com""
","PR 000120",0,1,0,0,0,0,0,1,0,0,0,0,0,0,4,0,1,0,0
"Hey-oh!! I thought there was something I needed to look into with this, which is why I kept procrastinating, but nope, it's all good! 😄❤️","PR 000121",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"Closing as duplicate of #34712_x000D_
","PR 000122",0,1,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0
"This is not a duplicate of #34712. They are two separate classes. Would you like them combined into one PR?","PR 000123",0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,1,0,0
"> They are two separate classes. Would you like them combined into one PR?_x000D_
_x000D_
Apologies they looked the same and had the same wording. I think it's better as one PR, at least until we have decided whether we want to accept the change into Rails.","PR 000124",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"> Apologies they looked the same and had the same wording. I think it's better as one PR, at least until we have decided whether we want to accept the change into Rails._x000D_
_x000D_
Ok, do I modify #34712, or do I close and republish it? I am not sure how to modify, and existing PR.","PR 000125",0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,1,0,0
"ES6 has a nicer shorthand for functions as object keys:_x000D_
```js_x000D_
{_x000D_
  received(data) {_x000D_
    // …_x000D_
  },_x000D_
_x000D_
  received(data) {_x000D_
    // …_x000D_
  },_x000D_
}_x000D_
```","PR 000126",0,0,0,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Need to declare variables with `const` or `let`","PR 000127",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Would be great to drop jQuery from the examples too!","PR 000128",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Don't need to wrap the return value in `()`s","PR 000129",0,0,0,0,1,0,0,0,0,0,0,0,0,2,3,0,0,0,0
"Here's how I'd write the above example using my feedback above and adjusting the formatting a bit:_x000D_
```js_x000D_
consumer.subscriptions.create({ channel: ""ChatChannel"", room: ""Best Room"" }, {_x000D_
  received(data) {_x000D_
    this.appendLine(data)_x000D_
  },_x000D_
_x000D_
  appendLine(data) {_x000D_
    const html = this.createLine(data)_x000D_
    const element = document.querySelector(""[data-chat-room='Best Room']"")_x000D_
    element.insertAdjacentHTML(""beforeend"", html)_x000D_
  },_x000D_
_x000D_
  createLine(data) {_x000D_
    return `_x000D_
      <article class=""chat-line"">_x000D_
        <span class=""speaker"">${data[""sent_by""]}</span>_x000D_
        <span class=""body"">${data[""body""]}</span>_x000D_
      </article>_x000D_
    `_x000D_
  }_x000D_
})_x000D_
```","PR 000130",0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"Unrelated to your conversion, this example could use some freshening up. Here's a more realistic version extracted from Basecamp:_x000D_
<details>_x000D_
_x000D_
```js_x000D_
// app/javascript/cable/subscriptions/appearance_channel.js_x000D_
import consumer from ""./consumer""_x000D_
_x000D_
consumer.subscriptions.create(""AppearanceChannel"", {_x000D_
  // Called once when the subscription is created._x000D_
  initialized() {_x000D_
    this.update = this.update.bind(this)_x000D_
  },_x000D_
  _x000D_
  // Called when the subscription is ready for use on the server._x000D_
  connected() {_x000D_
    this.install()_x000D_
    this.update()_x000D_
  },_x000D_
_x000D_
  // Called when the WebSocket connection is closed._x000D_
  disconnected() {_x000D_
    this.uninstall()_x000D_
  },_x000D_
_x000D_
  // Called when the subscription is rejected by the server._x000D_
  rejected() {_x000D_
    this.uninstall()_x000D_
  },_x000D_
_x000D_
  update() {_x000D_
    this.documentIsActive ? this.appear() : this.away()_x000D_
  },_x000D_
_x000D_
  appear() {_x000D_
    // Calls `AppearanceChannel#appear(data)` on the server._x000D_
    this.perform(""appear"", { appearing_on: this.appearingOn })_x000D_
  },_x000D_
_x000D_
  away() {_x000D_
    // Calls `AppearanceChannel#away` on the server._x000D_
    this.perform(""away"")_x000D_
  },_x000D_
_x000D_
  install() {_x000D_
    window.addEventListener(""focus"", this.update)_x000D_
    window.addEventListener(""blur"", this.update)_x000D_
    document.addEventListener(""turbolinks:load"", this.update)_x000D_
    document.addEventListener(""visibilitychange"", this.update)_x000D_
  },_x000D_
_x000D_
  uninstall() {_x000D_
    window.removeEventListener(""focus"", this.update)_x000D_
    window.removeEventListener(""blur"", this.update)_x000D_
    document.removeEventListener(""turbolinks:load"", this.update)_x000D_
    document.removeEventListener(""visibilitychange"", this.update)_x000D_
  },_x000D_
_x000D_
  get documentIsActive() {_x000D_
    return document.visibilityState == ""visible"" && document.hasFocus()_x000D_
  },_x000D_
  _x000D_
  get appearingOn() {_x000D_
    const element = document.querySelector(""[data-appearing-on]"")_x000D_
    return element ? element.getAttribute(""data-appearing-on"") : null_x000D_
  }_x000D_
})_x000D_
```_x000D_
_x000D_
</details>","PR 000131",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Let's bump this line up like in the other examples: _x000D_
```js_x000D_
const chatChannel = consumer.subscriptions.create({ channel: ""ChatChannel"", room: ""Best Room"" }, {_x000D_
  received(data) {_x000D_
    // data => { sent_by: ""Paul"", body: ""This is a cool chat app."" }_x000D_
  }_x000D_
}_x000D_
```","PR 000132",0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"This ""Client-Server Interaction"" list could use more freshening up. Many of the items still refer to the old CoffeeScript-based syntax.","PR 000133",0,1,0,0,0,0,0,0,0,0,0,1,0,0,2,0,2,0,0
"@javan should we consider the people reading this guide to know JS well? Because I was definitely confused by this `bind`. It's fine example of a quirk though._x000D_
_x000D_
```js_x000D_
initialized() {_x000D_
  this.update = this.update.bind(this)_x000D_
}_x000D_
```_x000D_
_x000D_
I'm also a little curious as to what you store in the `data-appearing-on` attribute?","PR 000134",0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"I'm not sure what the target experience level is for this guide. `bind`ing that function allows the event listeners to be installed and uninstalled correctly, something that was done in the previous iteration using [jQuery's ""namespaced"" event syntax](http://api.jquery.com/on/#event-names), which I also find confusing and requires some level of jQuery expertise to grok._x000D_
_x000D_
<img width=""524"" alt=""screen shot 2019-01-03 at 10 48 08 am"" src=""https://user-images.githubusercontent.com/5355/50647247-17a00080-0f46-11e9-852d-ff1ad34ab9f8.png"">","PR 000135",0,1,0,0,0,0,0,0,0,1,2,3,0,3,5,0,0,0,0
"I believe we store a GlobalID in `data-appearing-on` corresponding to the primary DB record on the page, e.g. a `Todo` or `Message`.","PR 000136",0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0
"True, that jQuery isn't exactly easier to understand. Let's just keep the `bind` and see how it goes 👍 ","PR 000137",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"There was also a snippet below the list that was still coffee syntax. I think that's all of them now, thanks! ","PR 000138",0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0
"Thanks for reviewing, @javan! I think I've addressed all your comments. 😀 ","PR 000139",0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"💖","PR 000140",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"<tt>ActiveRecord::LogSubscriber</tt> exposes _a_ simple interface","PR 000141",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thx @gmcgibbon, this is now fixed -- it's always good to have some native speaker's feedback in PRs like this one. Anyway, this also made me realize that we should refer to `ActiveSupport::LogSubscriber` rather than `ActiveRecord::LogSubscriber`","PR 000142",0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"I would also change this to ""instrumented code _raises_ an exception""","PR 000143",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@gmcgibbon I applied your suggestions. Let me know if something else needs updating before this one can be merged","PR 000144",0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"When testing the code sample, I don't see the subscriber actually output anything. This is because we're not calling any logging methods and just returning the strings, which is wrong. This is also present in the previous example, so I'd rather be consistently wrong for now. I'll fix this in a followup PR.","PR 000145",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Can you clarify this value to `Object ID of the connection object`?","PR 000146",0,1,0,1,1,0,0,1,0,0,0,0,0,1,6,0,1,0,0
"Can you change this value to `SQL statement name`?","PR 000147",0,0,0,0,0,0,0,0,0,0,1,1,0,0,4,1,1,0,0
"Try this:_x000D_
```_x000D_
{_x000D_
  sql: ""SELECT \""posts\"".* FROM \""posts\"" LIMIT ?"",_x000D_
  name: ""Post Load"",_x000D_
  connection_id: 70161465984040,_x000D_
  connection: #<ActiveRecord::ConnectionAdapters::SQLite3Adapter:0x00007f9f7a838850>,_x000D_
  binds: [#<ActiveModel::Attribute::WithCastValue:0x00007fe19d15dc00>],_x000D_
  type_casted_binds: [11],_x000D_
  statement_name: nil,_x000D_
}_x000D_
```","PR 000148",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks, updated!","PR 000149",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0
"@gmcgibbon sorry for the late response ... xmas business :christmas_tree: _x000D_
_x000D_
Updated your suggestions. Although not sure about the example as I wasn't able to reproduce meaningful values in my rails project.","PR 000150",0,1,0,0,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0
"Closing in favor of 287920ca7d06c8f51198ec750d65ba703835b257.","PR 000151",0,0,0,0,2,0,0,0,0,0,2,0,0,1,4,0,1,0,0
"@kamipo is not that commit only taking care of the tests? This PR also changes the code.","PR 000152",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"hmm... This PR changes the code, but I heard the intent of this PR in person at a meetup in Tokyo._x000D_
He tried to run Rails test suite on the docker-compose and then found the problem._x000D_
So I thought that the intent of this PR would be solved by that commit._x000D_
_x000D_
https://blog.agile.esm.co.jp/entry/rails-oss-patch-meetup-20190124_x000D_
_x000D_
https://blog.unasuke.com/2018/run-rails-test-on-docker-compose/_x000D_
_x000D_
","PR 000153",0,0,0,0,0,0,0,0,0,0,2,0,0,2,7,0,0,0,0
"I see. So it is fine","PR 000154",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Let's illuminate this a bit, e.g. fetch_multi(*names) returns its results in the same order as the *names requested, rather than returning cache hits followed by cache misses.","PR 000155",0,1,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0
"Tried grokking this over multiple attempts, but I find the two maps quite confusing since we seem to do similar yet different processing._x000D_
_x000D_
What if we kept some of the old flow ala this?_x000D_
_x000D_
```ruby_x000D_
instrument :read_multi, names, options do |payload|_x000D_
  reads = read_multi_entries(names, options)_x000D_
  payload[:hits] = reads.keys_x000D_
  payload[:super_operation] = :fetch_multi_x000D_
_x000D_
  writes  = {}_x000D_
  ordered = names.each_with_object({}) do |name, hash|_x000D_
    hash[name] = reads.fetch(name) { writes[name] = yield name }_x000D_
  end_x000D_
_x000D_
  write_multi writes, options_x000D_
  ordered_x000D_
end_x000D_
```_x000D_
_x000D_
(Probably ends up needing to be `yield(name)`. Psst, also a nice case for `index_with`, but we can't use core extensions here.)","PR 000156",0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0
"By default it will also create migration file with add_column line. We could have another migration action (in the generator) such as 'add_indexed' to generate only 'add_index' section (in the migration file). This saves time and pointless typing if you need just to index a column in a table ","PR 000157",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`/^(add_index)_to_(.*)_on_(.*)/` might make sense for that use case. To me, `add_indexed_column_to_table` infers adding a new column too.","PR 000158",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I agree. `/^(add_index)_to_(.*)_on_(.*)/` reads better. 'index' can also be used as a verb: `rails generate migration index_table_on_column`. What do you think?","PR 000159",0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Thinking further on this, I believe `add_column_index_to_table` or `remove_column_index_from_table` makes the most sense. The problem I'm having with justifying this feature is we don't want to step on the existing standards of the migration generator._x000D_
_x000D_
This means two things:_x000D_
_x000D_
- Placing the column name first and the table name second is expected._x000D_
- Adding code to the migration without specifying a column parameter is unexpected._x000D_
_x000D_
Column parameters already have a syntax to include indices, so I don't see a good way to make this work.","PR 000160",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thank you Gabbon for the clarification and your time. I'll close this pull request. ","PR 000161",0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,1,0,0
"Can you add parenthesis to the lambda parameter and remove the extra spacing on the array to be consistent with the rest of the page?","PR 000162",0,0,0,1,0,0,0,0,0,0,4,0,0,0,3,0,0,0,0
"I don’t think “try to avoid this to keep things simple” cuts it for a guide, then we may as well just leave this to the documentation on the CollectionCache module.","PR 000163",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"In that case, we can probably just remove the `try to avoid this to keep things simple` part.","PR 000164",0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,1,0,0
"I'm also trying to get at a larger point. Guides are meant to present an overall concept, like a kind of story, and not just every obscure feature under the sun._x000D_
_x000D_
I'm leaning towards no for this inclusion. @fxn usually knows more about the Guides voice, so I'd like to hear his opinion too.","PR 000165",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Updated!_x000D_
_x000D_
Ok, I get your point. But could you point me to a better place to get this better documented / exposed? I really had trouble to find the documentation about it ... :cry: ","PR 000166",0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0
"Yep, it was difficult to document in the first place. I added it to the CollectionCache module or the cache helper docs and I think I did mention the callable cache option. Feel free to suggest a better place to keep those docs 🖖","PR 000167",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"I think this should be commented and I'd explain why you should not deploy with this just after the upgrade.","PR 000168",0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Also, should not the Parameterized job keep enqueing with the old job when this config is false? Otherwise the Rails 5.2 app will not be able to run the new job if it a old worker gets it.","PR 000169",0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0
"Oh, that's right. I think I can add a conditional to fix that in the parameterized message delivery class.","PR 000170",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Don't we have a `config.action_mailer.delivery_job` scope? Seems odd and off that we resort to `on_load` here.","PR 000171",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0
"For another PR: this should probably also be commented out.","PR 000172",0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This message seems needlessly shouty. Perhaps we could borrow the wording from the cookies with metadata setting:_x000D_
_x000D_
```_x000D_
 # Embed purpose and expiry metadata inside signed and encrypted_x000D_
 # cookies for increased security._x000D_
 #_x000D_
 # This option is not backwards compatible with earlier Rails versions._x000D_
 # It's best enabled when your entire app is migrated and stable on 6.0._x000D_
```_x000D_
_x000D_
Or perhaps we should add a section for ""toggle once upgrade is stable""/""backwardsincompatible""-configs.","PR 000173",0,0,0,0,2,0,0,0,0,0,0,0,1,0,3,0,0,0,0
"I thought `config.action_mailer.delivery_job =` didn't work for some reason in my sample app, but it appears to now. Probably `spring` playing tricks on me.","PR 000174",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I've combined the wording and tried to make it sound less like I'm yelling 😛 ","PR 000175",0,0,0,0,1,0,0,0,0,0,0,0,0,3,3,0,0,0,0
"This is making ActiveJob be loaded on boot. Can we set the name as string and transform in a constant in the `on_load` hook of `action_mailer`?","PR 000176",1,1,0,0,0,0,0,0,0,0,1,0,0,0,3,0,1,1,0
"✂️ ","PR 000177",0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"It’s not obvious reading this as a user to understand why I’d want to switch. This option is also different from the other ps in that we intend to remove the old job in Rails 6.1, no?_x000D_
_x000D_
It should also be commented out by default.","PR 000178",0,0,0,0,2,0,0,0,0,0,0,0,0,0,4,1,0,0,0
"I've commented it out, and I've added that the standard delivery job will be removed in 6.1. Is that and the deprecation warning when mail jobs are performed is enough?","PR 000179",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Great, thanks!","PR 000180",0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,0,0,0,0
"No reason to keep the initialize method after this.","PR 000181",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"~~Also, can you add a test case?~~ ah my comment is duplicated with the above.","PR 000182",0,0,0,0,1,0,0,0,0,0,0,0,0,0,5,1,1,0,0
"Makes sense! Will do!","PR 000183",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Not sure how to feel about this. But well, go ahead.","PR 000184",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"consider https://help.github.com/articles/creating-a-commit-with-multiple-authors/ ?","PR 000185",0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"@abhisheksarka it's great that you want to contribute, but unfortunately you've hit a somewhat unspoken truth in open source: it's not just about the code, but also how the code gets contributed._x000D_
_x000D_
Which brings us to how to attribute credit to a change. And sidestepping @tbuehlmann after @rafaelfranca specifically asked him to open a PR, copying his suggested patch without at least an attempt to also give credit leaves a sour taste for the PR context._x000D_
_x000D_
As such, I've decided to let @tbuehlmann take over in his own PR first and should that stall we can put it up for grabs. Thanks!","PR 000186",0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"@tbuehlmann Go ahead man, my bad to begin with. @kaspth Just started with the rails source code and thought of taking up the small stuff so came across this PR. Did not give a lot of thought to how it is being contributed. Will keep this in mind going forward","PR 000187",0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0
"What is the intent of the test? It is the duplicated name with L12 and the duplicated assertions with L68-L74.","PR 000188",0,1,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0
"🤦‍♂️ My mistake, I forgot to remove this.","PR 000189",0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
"missing the `-` before the `%>`","PR 000190",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Is this a public API method? If yes, it needs to be documented.","PR 000191",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Sign codeclimate. We use assert_not over refute, can you update?  https://codeclimate.com/github/rails/rails/pull/34680","PR 000192",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Built patch against master, new PR at https://github.com/rails/rails/pull/34679","PR 000193",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"I think this should be a constant.","PR 000194",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"@gmcgibbon _x000D_
_x000D_
> Please add tests and a changelog entry. _x000D_
_x000D_
Thanks, will do_x000D_
_x000D_
> You should also be submitting PRs to master._x000D_
_x000D_
I also submitted a patch for 5-2-stable (https://github.com/rails/rails/pull/34675), should I just make this change in master instead and close these two PRs?_x000D_
_x000D_
","PR 000195",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"We can backport the original commit if it looks the same. You should be able to [change the base branch](https://help.github.com/articles/changing-the-base-branch-of-a-pull-request/) of this PR to master and close the other one.","PR 000196",0,0,0,0,3,0,0,0,0,0,0,0,1,1,6,1,1,0,0
"OK - the relevant file https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/where_clause.rb changes from 5.1 to 5.2, so my 5-2-stable patch (https://github.com/rails/rails/pull/34675) is closer.  _x000D_
_x000D_
I changed its base branch to master, but now it says 562 changed files instead of my 3, is that expected?_x000D_
_x000D_
Sorry for all the questions, first time trying to submit a patch._x000D_
_x000D_
","PR 000197",0,1,0,0,1,0,0,0,0,1,1,0,0,0,4,0,0,0,0
"On second thought, that's probably because I built the patch off of 5-2-stable.  I should do it over based on master, correct?","PR 000198",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Built patch against master, new PR at #34679_x000D_
_x000D_
","PR 000199",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Hmm, I created my branch off of 5-1-stable, and I only changed one file:  activerecord/lib/active_record/relation/where_clause.rb_x000D_
_x000D_
Did I do the PR wrong?_x000D_
_x000D_
","PR 000200",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"Created PR against wrong branch","PR 000201",0,3,0,0,1,0,0,0,0,0,0,0,0,0,3,0,1,0,0
"@rafaelfranca Should I also update the `Discarding Files Stored During System Tests` section? It is somewhat different, in that it is defining methods in `ApplicationSystemTestCase`, not overriding methods in `ActionDispatch::SystemTestCase`_x000D_
_x000D_
> Discarding Files Stored During System Tests_x000D_
> -------------------------------------------_x000D_
> _x000D_
> System tests clean up test data by rolling back a transaction. Because destroy is never called on an object, the attached files are never cleaned up. If you want to clear the files, you can do it in an `after_teardown` callback. Doing it here ensures that all connections created during the test are complete and you won't receive an error from Active Storage saying it can't find a file._x000D_
> _x000D_
> ```ruby_x000D_
> class ApplicationSystemTestCase < ActionDispatch::SystemTestCase_x000D_
>   driven_by :selenium, using: :chrome, screen_size: [1400, 1400]_x000D_
> _x000D_
>   def remove_uploaded_files_x000D_
>     FileUtils.rm_rf(""#{Rails.root}/storage_test"")_x000D_
>   end_x000D_
> _x000D_
>   def after_teardown_x000D_
>     super_x000D_
>     remove_uploaded_files_x000D_
>   end_x000D_
> end_x000D_
> ```_x000D_
_x000D_
Alternatively, rather than prepend onto `IntegrationTest`, we could follow this pattern and define an `ApplicationIntegrationTest` or similar. Either way, I'm just concerned about the dissonance between them.","PR 000202",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"That one is correct since it is defining a method in the subclass.","PR 000203",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"I'm wondering if isolation tests will run for pull requests._x000D_
_x000D_
https://github.com/rails/rails/blob/e8cd301118f83a31e091746b4d2589666d3e8989/ci/travis.rb#L161https://github.com/rails/rails/commit/c7f0cd6a79e6ee060df982dc0834365b63e53a2c","PR 000204",0,2,0,0,0,0,0,0,0,0,1,0,0,2,5,0,0,0,0
"Since the isolation test is not executed in PR, please remove that line temporarily. _x000D_
(I have verified it like that before https://github.com/rails/rails/pull/33858/commits/1f5ce315d9c154748b14abcdb95272ec51dff9b5#diff-27e95f7635d95669e2d17c7b6a1bfb93L161 )_x000D_
","PR 000205",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"GEM=ar:postgresql with Ruby2.5.1 isolation tests also have passed https://travis-ci.org/rails/rails/jobs/466265155_x000D_
_x000D_
Let me revert ac7dbaf611b60007451deb5b4f6dd140dda43d4e","PR 000206",0,1,0,0,0,0,0,0,0,0,0,0,0,0,5,1,0,0,0
"Thanks, the current version is correct. Its speaking about the submit helper and not the headings.","PR 000207",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This seems to break record marshalling. I think we can't have a mutex instance as ivars of `ActiveRecord::Base` instances.","PR 000208",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Fix #34615","PR 000209",0,1,0,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Rails don't support sharing the same instance of ActiveRecord::Base between two threads. This can't be safe since any state inside that object would need to have need a mutex.","PR 000210",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I think you can do `to_h.blank?` here instead. They perform roughly the same:_x000D_
_x000D_
```_x000D_
Warming up --------------------------------------_x000D_
           each_pair    25.234k i/100ms_x000D_
                to_h    25.415k i/100ms_x000D_
Calculating -------------------------------------_x000D_
           each_pair    286.275k (± 8.6%) i/s -      1.438M in   5.056711s_x000D_
                to_h    319.401k (±26.5%) i/s -      1.398M in   5.090246s_x000D_
_x000D_
Comparison:_x000D_
                to_h:   319400.8 i/s_x000D_
           each_pair:   286274.9 i/s - same-ish: difference falls within error_x000D_
```","PR 000211",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This is probably why we don't include `OpenStruct`, `ostruct` isn't required by default. In order to use `#blank?`, we now have to load `OpenStruct` only to monkey patch it. ","PR 000212",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Struct and OpenStruct are both subclasses of object so they already respond to `present?` and `blank?`. As such, changing the return values of these methods is a breaking change — one that doesn't have enough benefit to go through with. _x000D_
_x000D_
Besides, it doesn't make sense to me that `OpenStruct` should be treated like a hash. OpenStruct is a short circuit for a class, not just a hash wrapper._x000D_
_x000D_
Thanks for the consideration!","PR 000213",0,0,0,0,3,0,0,0,0,0,1,1,0,3,6,0,0,0,0
"Please forgive my initial omission of the `[ci skip]` decoration on the commit message.","PR 000214",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Hi, we just ran into the issue in https://github.com/rails/rails/issues/34646 after upgrading an app to 5.2.2_x000D_
_x000D_
I'm glad to see that it's fixed in the upcoming 6.0 release, but just wanted to ask if 5.2.x is closed for changes, or if there will be another patch release in the 5.2.x series. If there will be another 5.2.x patch release, could it include a backport of this PR?","PR 000215",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"It seems that @y-yagi is already working on this.","PR 000216",0,0,0,2,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"How about expanding it for all classes?_x000D_
_x000D_
Originally we had two class evals for `%w{ Symbol Slash Literal Dot }` and `%w{ Cat Group Star Or }`._x000D_
https://github.com/rails/journey/blob/0dfe8ba78e9ab31a985412c2275781a0c0376553/lib/journey/nodes/node.rb_x000D_
_x000D_
But now one class eval for `%w{ Cat Group Star Or }` is already expanded at https://github.com/rails/journey/commit/bc37b94050c09f13b6bd782d551f59ba492feebc._x000D_
_x000D_
The remaining one class eval for `%w{ Slash Dot }` is over meta programming to me.","PR 000217",0,0,0,0,1,0,0,1,0,0,0,0,0,0,3,0,0,0,0
"I think it is a great suggestion, I'm definitely applying this! Changes done and squashed.","PR 000218",0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0
"`# :nodoc:`","PR 000219",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"ditto.","PR 000220",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"OMG, so true, thanks for double checking 🙏 ","PR 000221",0,2,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"CI failure seems related to webpack installation and not to this PR's code.","PR 000222",0,1,0,0,3,0,0,0,0,0,1,1,0,1,5,0,0,0,0
"I'll make these test method names longer.","PR 000223",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"Perhaps this is a mistaken approach?_x000D_
`String.to_f` does strip trailing non numeric parts of a string, but also truncates it to `Float::DIG` (Usually 15 by default) which probably goes against the reason we'd use `BigDecimal` or `:to_d` in the first place._x000D_
If so, it would be better to let `BigDecimal` and `:to_d` do their thing and only modify the test to check `str.respond_to?(:to_d)` and handle accordingly?_x000D_
And if so, #34612 should be reverted and modified in the same way.","PR 000224",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Closing this since #34719 is fixed by https://github.com/ruby/ruby/commit/ccdba542d3f765895a23f32fd2905add935b7a19._x000D_
_x000D_
https://bugs.ruby-lang.org/issues/15426","PR 000225",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@javan may I ask you to take a look at this?","PR 000226",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"lgtm!","PR 000227",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"I am finding that the text from `disable_with` is not reverting to the `a` text for a successful Ajax response e.g. `disable_with: 'Working...'` is remaining as `Working...` regardless of outcome.","PR 000228",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"If you could open an issue with reproduction steps feel free to tag me and I'll take a look :+1: ","PR 000229",0,0,0,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Apologies, my project was locked on an older version of rails-ujs. Works as expected.","PR 000230",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"This would make nested calls to `while_preventing_writes` surprising..._x000D_
_x000D_
(OTOH, if the existing behaviour is worth preserving, I guess it'd also be worth a test.)","PR 000231",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In GH's version we actually pass in true/false as an argument to the method which I thought was weird. Now I'm thinking that maybe it's not weird. Will revert this change and work on some tests to figure out what behavior I actually want.","PR 000232",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`InvalidWriteOnReader` maybe?","PR 000233",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Maybe just `ReadOnlyError`?  Or `PermissionDeniedError`?_x000D_
_x000D_
```_x000D_
$ irb_x000D_
irb(main):001:0> require ""fileutils""_x000D_
=> true_x000D_
irb(main):002:0> FileUtils.touch ""test.txt""_x000D_
=> [""test.txt""]_x000D_
irb(main):003:0> FileUtils.chmod 0444, ""test.txt""_x000D_
=> [""test.txt""]_x000D_
irb(main):004:0> File.write ""test.txt"", ""hello""_x000D_
Traceback (most recent call last):_x000D_
        5: from /Users/aaron/.rbenv/versions/ruby-trunk/bin/irb:23:in `<main>'_x000D_
        4: from /Users/aaron/.rbenv/versions/ruby-trunk/bin/irb:23:in `load'_x000D_
        3: from /Users/aaron/.rbenv/versions/ruby-trunk/lib/ruby/gems/2.6.0/gems/irb-0.9.6/exe/irb:11:in `<top (required)>'_x000D_
        2: from (irb):4_x000D_
        1: from (irb):4:in `write'_x000D_
Errno::EACCES (Permission denied @ rb_sysopen - test.txt)_x000D_
irb(main):005:0> _x000D_
```","PR 000234",0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0
"`ReadOnlyError` is good to me.","PR 000235",0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,1,0,0,0
"+1 `ReadOnlyError`_x000D_
_x000D_
```_x000D_
% irb_x000D_
[1] pry(main)> """".freeze << """"_x000D_
FrozenError: can't modify frozen String_x000D_
from (pry):1:in `<main>'_x000D_
```","PR 000236",0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Thank you for the pull request but this seems to be a feature to Ruby, not Rails. Have you tried to request there?","PR 000237",0,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0
"Hello,_x000D_
I think `Object#extend` works exactly in the same  way  as your `include` method,_x000D_
see http://ruby-doc.org/core-2.5.3/Object.html#method-i-extend","PR 000238",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@rafaelfranca I'd love to, but it seems contributing to Ruby isn't quite as simple as dropping a PR on their github repo, so I'm not sure where to start with that.","PR 000239",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@bogdanvlviv Not exactly. It does pretty much the same thing, but it calls `extended` instead of `included`, which means Concerns don't work the same (see my example in the description). This is also another reason why I thought it would be best to add it to Rails instead of Ruby, because the utility is mainly for using it with Concerns","PR 000240",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"For consistency, how about moving the new gsub to `quote_table_name`?_x000D_
_x000D_
https://github.com/rails/rails/blob/647665110f49935b30e29ac09ecfca3701e76041/activerecord/lib/active_record/relation/query_methods.rb#L1057-L1058_x000D_
https://github.com/rails/rails/blob/647665110f49935b30e29ac09ecfca3701e76041/activerecord/lib/active_record/connection_adapters/mysql/quoting.rb#L11-L13","PR 000241",0,1,0,0,2,0,0,0,0,0,0,0,0,0,4,0,1,0,0
"Done! Good catch","PR 000242",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I think calling it `GZipping your assets` might be best, and then adding some text below the code block addressing how to actually serve gzipped assets. Something like `Refer to your web server's documentation for instructions on how to serve gzipped assets.` maybe?","PR 000243",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Yes, this sounds good to me. I will make a change and push it today :)","PR 000244",0,1,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"@gmcgibbon Just squashed the commits :)","PR 000245",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"What is `Storage`? And, presuming `Storage` exists somehow, how do the token and email values get defined?_x000D_
_x000D_
<img width=""362"" alt=""screen shot 2018-12-05 at 9 43 55 am"" src=""https://user-images.githubusercontent.com/5355/49520929-4d33ca00-f872-11e8-9366-6b1e692e6792.png"">_x000D_
 ","PR 000246",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"> When using the actioncable javascript package, if you want to pass an authorization token you need to do so when creating the cable consumer._x000D_
_x000D_
When would you use an authorization token instead of the Rails session?","PR 000247",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Hey uh, so it looks like he pretty much copy and pasted my example code https://github.com/rails/rails/issues/33064_x000D_
_x000D_
in my code I have a custom wrapper over `window.localStorage` that uses a polyfill for older browsers and I call it `Storage`.. I appreciate the initiative but this solution is not extensible, is using a hardcoded value for token and email, and is modifying the object prototype which is pretty hacky. This is a measure I took in my codebase to add this functionality since it wasn't in Rails itself. We could likely find a much better solution than my little hack._x000D_
_x000D_
I am happy to submit a PR to actually add this functionality now that the codebase is in JS, but I guess I will ask first if @evexoio wants to fix this first?","PR 000248",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"@audiolion please take on this issue 🙌_x000D_
_x000D_
It was an old issue so I decided to take it on 🙈","PR 000249",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0
"How about using String to manage `direction` and remove `to_sym` call?  _x000D_
We treat other env values as String, and it seems that the more consistent it is._x000D_
","PR 000250",0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"LGTM. Could you please squash your commits into a single commit?_x000D_
","PR 000251",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@ysksn Thanks!","PR 000252",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"Those are fine since they are in the `test_helper.rb` and it is after the `require_relative '../config/environment'`. Only gems and code that is loaded before that require that needs to use the `on_load`.","PR 000253",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This documentation is wrong because we are overriding the `after_teardown` defined by `IntegrationTest`. We need to define a module and prepend on `ActionDispatch::IntegrationTest`.","PR 000254",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This one is also fine.","PR 000255",0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"@rafaelfranca Based on your review, it seems like these are all correct and should **not** be changed to use `on_load`._x000D_
_x000D_
I guess this PR can just be closed then? 😅 ","PR 000256",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I'd fix the guides/source/active_storage_overview.md since it is wrong.","PR 000257",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Ahh, I see. I misunderstood._x000D_
_x000D_
Closing in favour of https://github.com/rails/rails/pull/34670, since the change proposed in this PR won't be happening.","PR 000258",0,3,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,0,0
"I think we can just name this `monotonic`","PR 000259",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0
"Does it make sense to name this `ProcessClock`?","PR 000260",0,2,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0
"This doesn't return `Process::CLOCK_PROCESS_CPUTIME_ID`, so I'd rather name this something else. Maybe `process_time`? I think [this](https://stackoverflow.com/a/7506987) breaks down the difference between constants correctly.","PR 000261",0,5,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0
"Yeah, seems It'll be better to name it `ProcessClock`","PR 000262",0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,0
"Don’t think adding a top level file/constant is needed. Let’s just revert this change.","PR 000263",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Can we use a CPU clock here given we may be waiting for IO?","PR 000264",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"Yes, you can.","PR 000265",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are right, those changes are unnecessary. It might make sense only if we have at least two cases where we use `Process.clock_gettime(Process::CLOCK_PROCESS_CPUTIME_ID)`.","PR 000266",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks for the review!_x000D_
_x000D_
I like the idea of preventing spreading conditions that provides support for other platforms in the codebase, but I'm not sure whether extending of `Time` class is a good idea, I think would be better just to create a private module with methods that would work on platforms we want to support._x000D_
_x000D_
Please let me know what do you think about https://github.com/rails/rails/pull/34618/commits/dc424fd37beaa169d80423d3e8bbd63c61981e02?","PR 000267",0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0
"👍 Please squash your commits ","PR 000268",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Sure, I just squashed them.","PR 000269",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"> 1. `Time.now` is a lot more readable than `Process.clock_gettime(Process::CLOCK_MONOTONIC)`. Would it be a good idea to add a new method to `Time` instead of typing this everywhere?_x000D_
_x000D_
We could also use `Concurrent.monotonic_time` which is already used in Active Record._x000D_
_x000D_
https://github.com/rails/rails/pull/31221/files#diff-c226a4680f86689c3c170d4bc5911e96R108","PR 000270",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
"> We could also use `Concurrent.monotonic_time` which is already used in Active Record._x000D_
_x000D_
Since we already use `Concurrent.monotonic_time`, it looks like a better idea. Thanks for the tip.","PR 000271",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I think this is a step in the right direction! It's silly for newbies (and grizzled vets, for that matter) to fight with this behavior that is a predominantly production security concern while developing an app locally. I've updated my `raise` by default PR #32206, hopefully it makes it into 6, too. ","PR 000272",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Why not `BigDecimal(0)`?","PR 000273",0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"`BigDecimal(""0"")` returns the same value as `BigDecimal(0)`: `0.0`. If this is what we want, we can tweak the test._x000D_
_x000D_
I understand from the [test](https://github.com/rails/rails/blob/master/activesupport/test/xml_mini_test.rb#L285) that we expect `BigDecimal(""123,003"")` to return `123.0`, and to do that we need to pass it a cleaned-up string.","PR 000274",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Ok. I got it. Before `BigDecimal(""123,003"")` did not raise and now it does.","PR 000275",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"Exactly._x000D_
Thank you.","PR 000276",0,1,0,1,0,0,0,0,0,0,2,0,0,0,2,1,0,0,0
"`@association.destroy_all` returns records, not count._x000D_
How about using `@association.destroy_all.tap { reset_scope }` to not care about what is returning?","PR 000277",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"`@association.delete_all(dependent)` doesn't return count (not guaranteed, almost nil)._x000D_
How about using `@association.delete_all(dependent).tap { reset_scope }` to not care about what is returning?","PR 000278",0,0,0,0,2,1,0,0,0,0,0,0,1,2,3,1,0,0,0
"any suggestions on how to refactor this line.. _x000D_
couldn't think of anything cleaner","PR 000279",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I think you can just do `enum_scopes.nil? || enum_scopes`","PR 000280",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"This probably doesn't need to be here. 😄 ","PR 000281",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`""scopes can be disabled""`?","PR 000282",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Better to change this to `if enum_scopes != false`","PR 000283",0,1,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"ok.. will do","PR 000284",0,0,0,0,1,1,0,0,0,0,0,0,0,0,7,0,0,0,0
"Shouldn't this be `klass.proposed` ? which is the scope? _x000D_
_x000D_
","PR 000285",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"fixed it.. 😄 ","PR 000286",0,4,0,0,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0
"i just gave this a try.. @rafaelfranca kindly check this out and maybe i can work on making some changes if necessary","PR 000287",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"This looks correct to me but we should have a test I think, that way we can confirm it will not regress, params with the name `_enum` etc. end up being prime candidates long term for removal cause they do not feel quite right starting with `_` is usually reserved for ignored vars. ","PR 000288",0,0,0,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"@SamSaffron added a test.. Not sure if that would suffice. Actually caught a case which i missed which would be the default case while adding the test. ","PR 000289",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Sure.. just a min","PR 000290",0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"should i add this to the CHANGELOG?","PR 000291",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"👍 for a changelog entry","PR 000292",0,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"Thank you so much!","PR 000293",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"congrats @alfie-max on getting your first Rails PR done! Thanks ","PR 000294",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0
"thanks @SamSaffron  😄 ","PR 000295",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0
"@guizmaii @rafaelfranca Just an FYI, I'm not sure whether this is supposed to be a breaking change for Rails 6, but 3rd party libraries that serialize `ActiveSupport::Notification` events do actually have issues serializing the `sql.active_record` event because the `:connection` value (a complex Adapter object) doesn't serialize well, particularly with JSON._x000D_
_x000D_
Easiest way to replicate this is with `rails new test_app`:_x000D_
_x000D_
Generate a model with `rails g model Article title:string`, then `rake db:create`, `rake db:migrate`._x000D_
_x000D_
Set the following in the Gemfile, then `bundle install`:_x000D_
_x000D_
```ruby_x000D_
gem 'rails', github: 'rails/rails', ref: '6d1c9a9b23579d13b7cbdd3217ed2cfcc300e06e'_x000D_
# A 3rd party library that attempts to serialize `sql.active_record` to JSON_x000D_
gem 'meta_request'_x000D_
```_x000D_
_x000D_
Then run in `bundle exec rails c`:_x000D_
_x000D_
```ruby_x000D_
2.5.1 :001 > Article.count_x000D_
Traceback (most recent call last):_x000D_
        1: from (irb):1_x000D_
SystemStackError (stack level too deep)_x000D_
```_x000D_
_x000D_
Which comes from calling `to_json` against `#<ActiveRecord::ConnectionAdapters::SQLite3Adapter:0x000055a9e6e28a98>`, which is the value for `:connection` in the `sql.active_record` event per this PR._x000D_
_x000D_
Stack trace looks like:_x000D_
_x000D_
```_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:171:in `block in as_json'_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:171:in `each'_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:171:in `map'_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:171:in `as_json'_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:56:in `as_json'_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:171:in `block in as_json'_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:171:in `each'_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:171:in `map'_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:171:in `as_json'_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:56:in `as_json'_x000D_
/activesupport-5.2.2/lib/active_support/json/encoding.rb:35:in `encode'_x000D_
/activesupport-5.2.2/lib/active_support/json/encoding.rb:22:in `encode'_x000D_
/activesupport-5.2.2/lib/active_support/core_ext/object/json.rb:41:in `to_json'_x000D_
/meta_request-0.6.0/lib/meta_request/event.rb:42:in `block in json_encodable'_x000D_
```_x000D_
_x000D_
If the consensus is ""non-serializable objects are permitted in these args, 3rd party libraries have to change accordingly"" then we can probably ignore this as a breaking change.","PR 000296",0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0
"This assertion actually would be failed without Ruby 2.6.0 if bigdecimal 1.4.0.pre.20181130a is used._x000D_
_x000D_
https://github.com/rails/rails/blob/e7717ec7a09ca83f92a9819303f7a93e038a2679/activerecord/lib/active_record/relation/calculations.rb#L400-L405_x000D_
_x000D_
How about checking `nil.respond_to?(:to_d)`?_x000D_
_x000D_
```diff_x000D_
--- a/activerecord/test/cases/calculations_test.rb_x000D_
+++ b/activerecord/test/cases/calculations_test.rb_x000D_
@@ -57,8 +57,12 @@ def test_should_return_integer_average_if_db_returns_such_x000D_
     assert_equal 3, value_x000D_
   end_x000D_
 _x000D_
-  def test_should_return_nil_as_average_x000D_
-    assert_nil NumericData.average(:bank_balance)_x000D_
+  def test_should_return_nil_to_d_as_average_x000D_
+    if nil.respond_to?(:to_d)_x000D_
+      assert_equal BigDecimal(0), NumericData.average(:bank_balance)_x000D_
+    else_x000D_
+      assert_nil NumericData.average(:bank_balance)_x000D_
+    end_x000D_
   end_x000D_
 _x000D_
   def test_should_get_maximum_of_field_x000D_
```","PR 000297",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0
"Makes sense, Thanks for helping out 🙌","PR 000298",0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,1,0,0,0
"Can you investigate why `NumericData.average` with Ruby 2.6 returns 0.0?","PR 000299",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"@kamipo Sure, that's what I'm doing right now._x000D_
_x000D_
https://github.com/rails/rails/issues/34600#issuecomment-443649497","PR 000300",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0
"@kamipo This should be the commit that caused this issue. https://github.com/ruby/ruby/commit/a0e438cd3c28d2eaf4efa18243d5b6edafa14d88#diff-6b866d482baf2bdfd8433893fb1f6d36R144_x000D_
_x000D_
What's the right action to take right now?","PR 000301",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I think this should still return `nil`. Can someone fix it?","PR 000302",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0
"I'm on it @rafaelfranca ","PR 000303",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"I think ""loading the schema _into_ the database for each process"" might read slightly better here.","PR 000304",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"I'm not sure `NewDeliveryJob` is the best name. We don't want users to have to change the constant name back after we fully remove `DeliveryJob` (and after a few years `NewDeliveryJob` will be a strange name cause it's not new anymore). What about a name that better describes the roll of this job AND has the new code like `MailDeliveryJob`?","PR 000305",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Sorry missed this on the first round of review - I think `params` should be `nil` by default right? Since parameter jobs are a special kind of job?","PR 000306",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Since `Parameterized::DeliveryJob` isn't released yet can we instead deprecate just `DeliveryJob` and then recommend the new one? If you need the `params` key then you should use the new one.","PR 000307",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"My plan was to deprecate `NewDeliveryJob` and rename to `DeliveryJob` in `6.2` or `7.0` but that will also cause problems for people that upgrade multiple versions at a time. I'll rename to `MailDeliveryJob`!","PR 000308",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I removed `Parameterized::DeliveryJob` from the warning, but the warning will still happen for parameterized delivery jobs because its a subclass. I assume this is good enough?","PR 000309",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I was thinking that `Parameterized::DeliveryJob` has never been released so we can delete the code that supported `Parameterized::DeliveryJob` and anyone who needs a `Parameterized::DeliveryJob` would use the new `MailDeliveryJob` instead. ","PR 000310",0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0
"I think it is released in all versions since [`5.1.0`](https://github.com/rails/rails/blob/v5.1.0/actionmailer/lib/action_mailer/parameterized.rb#L146)","PR 000311",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0
"Ah I see I was thinking of this PR https://github.com/rails/rails/commit/251b9d4bd62bfc076969bd0751fa4cc6e95a4f33 which is only in master. ","PR 000312",0,1,0,0,3,1,0,0,0,0,0,0,0,0,2,0,0,0,0
"This should say `MailDeliveryJob` now. Also let's add back in the Paramertized deprecation since I was wrong about when it was added.","PR 000313",0,0,0,0,0,0,0,0,0,0,1,0,0,1,3,1,0,0,0
"It looks like this one mention of `NewDeliveryJob` stuck around even though most others were updated to `MailDeliveryJob` instead?","PR 000314",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"Fixed. Thanks","PR 000315",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Don't we need to add back `Parameterized::DeliveryJob`? Otherwise it will fail if a Rails 6 worker get a job enqueued in Rails 5.2.","PR 000316",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Ah, just saw it.","PR 000317",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"> I think if the code isn't deprecated until 6.1 and the jobs work in 6.0 then we don't need a backport._x000D_
_x000D_
I'm fairly certain that (depending on the number of job workers you have, and your infrastructure) there can be big delays in waiting for all workers to be updated to the latest deployed version of an app. I believe I've seen an old job worker pickup a job enqueued from a new web worker before. Doesn't this mean we should backport `MailDeliveryJob` to a 5.x release?","PR 000318",0,0,0,0,1,1,0,0,0,0,0,0,0,0,2,1,0,0,0
"Do these tests need to reset `ActionCable.adapters.WebSocket` to its original value?","PR 000319",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"I believe that's handled by the `testDone` hook that you added in https://github.com/rails/rails/commit/410a32ffbdfa45aeee2c8ec0137201d3b95a33ff#diff-3f28927c13290f07f1f5db8933b6f74c:_x000D_
https://github.com/rails/rails/blob/aa1ba9cb244b1e03d36aaa941ae4e91c6713b77e/actioncable/test/javascript/src/test_helpers/index.js#L9-L10_x000D_
or am I misunderstanding?","PR 000320",0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"Oh right, glad I thought of that already. 🤦‍♂️","PR 000321",0,1,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0
"👌 This is the correct way to use Yarn Workspaces, AFAIK. We have the same setup for https://github.com/stimulusjs/stimulus: a single `yarn.lock` at the root, and individual `package.json`s for each workspace.","PR 000322",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Let's make sure `yarn.lock` is up to date and CI is happy now that https://github.com/rails/rails/pull/34370 is merged. Can you please rebase and run `yarn install` once more? ","PR 000323",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"https://github.com/rails/rails/pull/34370 didn't add any dependencies, so there are no changes when I rebase and run `yarn install`. Do you want me to push that anyway?","PR 000324",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Yes, please. I want to make sure actioncable's tests still pass on CI. Can't hurt to rebase.","PR 000325",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Sounds good. It's rebased and passing","PR 000326",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"When I run `yarn install`, I get a pretty big `yarn.lock` diff: https://gist.github.com/javan/1e3b5d9805a5ac072ee9c12ea0bc43e6","PR 000327",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Hmm, do you know what these entries are for in the workspaces configuration:_x000D_
https://github.com/rails/rails/blob/aa1ba9cb244b1e03d36aaa941ae4e91c6713b77e/package.json#L7-L9_x000D_
After running_x000D_
```_x000D_
rm -r tmp/templates/app_template railties/test/fixtures/tmp_x000D_
```_x000D_
to delete those directories and rerunning `yarn install`, I get a diff as well (wasn't able to get a diff before doing that)._x000D_
_x000D_
It seems like these directories are also untracked by git which means that you could have stale files in there which cause the root `yarn.lock` to be generated differently. I'm inclined to think they shouldn't be configured as workspaces, but I don't have all the context to know for sure._x000D_
_x000D_
For now, I'll push the `yarn.lock` that was generated after removing those directories from my local environment.","PR 000328",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"It seems to have originated from this commit:_x000D_
https://github.com/lsylvester/rails/commit/b801b0817ddaf20f28fbc3dec2fb9a3f867e7d36 (part of https://github.com/rails/rails/pull/33640, a sub-PR of the larger https://github.com/rails/rails/pull/33079)._x000D_
_x000D_
@lsylvester commented in https://github.com/rails/rails/pull/33640#issuecomment-422645699 about some tests potentially requiring the workspaces configuration, but I'm not sure if that included these lines https://github.com/rails/rails/blob/aa1ba9cb244b1e03d36aaa941ae4e91c6713b77e/package.json#L7-L9_x000D_
or if https://github.com/rails/rails/blob/aa1ba9cb244b1e03d36aaa941ae4e91c6713b77e/package.json#L4-L6_x000D_
is sufficient._x000D_
_x000D_
@lsylvester, if you're able to provide more context that'd be great. Otherwise, I would suggest we try removing the `tmp` directories from the workspaces configuration and see if the tests pass.","PR 000329",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"+1 for removing those entries. Test / tmp directories shouldn't be workspaces.","PR 000330",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"HI @javan, @rmacklin,_x000D_
_x000D_
I can provide some context as to why I added the tmp directories into the workspaces._x000D_
_x000D_
At the time - we were getting errors in the railties tests that generated applications and then needed to compile the assets as the versions that the were being required (which were based on the `Rails::VERSION` hadn't been published._x000D_
_x000D_
I added in the yarn workspaces in order to allow the Rails application that were generated in the tmp directory visibility of the different required packages. Without the tmp directories in workspace the generated rails applications didn't have visibility of the unpublished packages._x000D_
_x000D_
Since then, the version of the packages that is required was relaxed (https://github.com/rails/rails/pull/33079/commits/fbd45978effd8d83a29f95493c59e3e715ceca76) to  include published versions. This was done after a discussion about the differences in the versioning schemes between npm and ruby gems where `Rails::VERSION::STRING` could not be directly used._x000D_
_x000D_
I am not sure what version of the packages was being used in the tests prior to this being merged (ie latest on npm or alpha version that is in the rails repo) but I think that without the tmp directories in the workspace, it will be the 5.2.X versions. I don't know if this is an issue as long as any issues get picked up in the prerelease. All the railties tests are doing are ensuring that the packages can compile, so I think this is unlikely to be an issue unless something is seriously broken._x000D_
_x000D_
I don't think that the workspaces are currently providing any value, but expect that that might change once ActionText is merged, as it depends on the ActiveStorage package._x000D_
_x000D_
I hope that that clears some things up._x000D_
_x000D_
","PR 000331",0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Thanks a bunch for the context! Given that: _x000D_
_x000D_
> Since then, the version of the packages that is required was relaxed ([fbd4597](https://github.com/rails/rails/commit/fbd45978effd8d83a29f95493c59e3e715ceca76)) to include published versions. This was done after a discussion about the differences in the versioning schemes between npm and ruby gems where `Rails::VERSION::STRING` could not be directly used._x000D_
_x000D_
it seems like you agree that we can remove the tmp directories from the workspaces. I opened a PR to do that here: https://github.com/rails/rails/pull/34630_x000D_
_x000D_
I agree  that the workspaces should provide value when ActionText is merged, so I did _not_ remove the workspaces configuration for the real `actioncable`, `actionview`, and `activestorage` packages.","PR 000332",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@marceloperini Thanks!","PR 000333",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Could you explain what benefit these provide? They seem like something that should already be there inherited from the upstream base config?","PR 000334",0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0
"This changes some of the default Descriptions from https://github.com/rubocop-hq/rubocop/blob/master/config/default.yml. Is that desirable? I don't quite see the benefit._x000D_
_x000D_
Edit: Oh I didn't see Matthew's question. I have the same question.","PR 000335",0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,0,0,0
"I think you guys have a good point. Let's close this PR for now. Thanks for the comments 👍 ","PR 000336",0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,1,0,0
"Nitpick: Code examples in the changelog should have backticks for markdown code blocks.","PR 000337",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"I am triggering a form submit with javascript after a button click, and_x000D_
_x000D_
```_x000D_
document.querySelector('form').dispatchEvent(new Event('submit'));_x000D_
```_x000D_
works perfectly fine with chrome and safari in terms of rails-ujs, but with firefox I get a full page request after the ajax request. _x000D_
_x000D_
Will this also fix this issue? ","PR 000338",0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,0,0
"@grant-roy This doesn't fix that, but `Rails.fire(form, 'submit');` should work. See https://github.com/rails/rails/issues/29546","PR 000339",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,0
"@gmcgibbon I've tried that in several different configurations, but I always get Rails not defined on the page.  I've read through all the advice and issues with Webpack (which this issue seems to be related to) and nothing works.  I've upgraded everything and still Rails is undefined clientside, even when I can see it in the on page js.  ","PR 000340",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@grant-roy If you can reproduce it on a dummy rails app, feel free to open a separate issue. Maybe its a minification issue?","PR 000341",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@gmcgibbon I added tests around click events on links and buttons._x000D_
If I should add more I'm happy to so, but I'd like to hear your feedback.","PR 000342",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"CI fail was related to a timeout because the connection to the ujs server couldn't be established._x000D_
_x000D_
> [Travis CI] actionview_x000D_
Running command: bundle exec rake test:ujs_x000D_
Timed out after 5 seconds_x000D_
_x000D_
I am not sure why that would happen especially since I don't think editing the changelog affected that. :laughing: The tests themselves are very similar to the ones checking the ctrl-click behavior, I doubt they introduced the issue. :confused: If I missed something I'd gladly accept hints.","PR 000343",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"The implementation here looks reasonable in that it follows existing conventions, but—pardon the following rant—they are not good conventions. For example, this should not be implemented as 7 separate event listeners:_x000D_
https://github.com/rails/rails/blob/ef4ea9aded4e92467cd437da6df69412d37134db/actionview/app/assets/javascripts/rails-ujs/start.coffee#L38-L44_x000D_
And, ""ignoring"" an event should not cancel it or stop it from propagating: https://github.com/rails/rails/blob/ef4ea9aded4e92467cd437da6df69412d37134db/actionview/app/assets/javascripts/rails-ujs/features/remote.coffee#L85-L90_x000D_
_x000D_
Instead, there should be a single listener for a given event type + selector that  first tests the event for things like mouse button and meta key before acting on it. Here's a rough sketch using [a helper borrowed from Turbolinks](https://github.com/turbolinks/turbolinks/blob/c340c42e2ece8c057aec611074971462a6e76c71/src/turbolinks/controller.coffee#L209-L218):_x000D_
```coffee_x000D_
delegate document, Rails.linkClickSelector, 'click', (event) ->_x000D_
  if clickEventIsSignificant(event)_x000D_
    handleConfirm(event)_x000D_
    handleRemote(event)_x000D_
    handleMethod(event)_x000D_
_x000D_
clickEventIsSignificant = (event) ->_x000D_
  not (_x000D_
    event.defaultPrevented or_x000D_
    event.target.isContentEditable or_x000D_
    event.which > 1 or_x000D_
    event.altKey or_x000D_
    event.ctrlKey or_x000D_
    event.metaKey or_x000D_
    event.shiftKey_x000D_
  )_x000D_
```_x000D_
That 👆 probably won't work as-is, but I suspect it's not far off.","PR 000344",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I'm gonna hand this one off to you, @guilleiguaran.","PR 000345",0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,1,0,0
"@javan Would you like to see that refactoring within this PR?_x000D_
_x000D_
E: I'm open to adding this onto this PR, but I'd prefer to do that seperately.","PR 000346",0,2,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0
"@WoH, perhaps you could start by combining your `handleNonPrimaryClick()` handler with the existing `handleMetaClick()` (and renaming them appropriately). That way we're not adding yet another event listener. ","PR 000347",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I incorporated feedback as far as the combining the two methods goes. Since we don't really handle anything except stopping propagation, using prevent in the method name sounded reasonable to me._x000D_
We can use insignificant as a combination of non-primary + some meta-clicks here aswell, so I 'borrowed' that name :laughing: ","PR 000348",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Unless the patch is completely different we will apply the original commit manually without need for other PR. Thanks","PR 000349",0,2,0,0,1,0,0,0,0,0,0,0,0,0,5,2,0,0,0
"We don't accept changes in Rails 4 anymore. I'm pretty sure this also happens on master. Care to change the branch to point to master?","PR 000350",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"My question for the Rails expert here: why pass `connection_id` and not `connection` in this event? If someone wants to get the connection object, then they have to use `ObjectSpace._id2ref(connection_id)` which isn't performant or supported by platforms like JRuby._x000D_
_x000D_
If possible, I'd like to see a change like this that exposes the connection object directly.","PR 000351",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"The id is just an identifier. We prefer to not pass complex objects in the instrumentation system since it can be distributed. Most apps don't use a distributed backend but passing complex objects in the framework make it harder._x000D_
_x000D_
I think we should pass the connection name so the subscriber can use it to grab a new connection in for the same pool. I find it difficult that you need the exact same instance of the connection for an instrumentation.","PR 000352",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"cc @tenderlove @matthewd I think we discussed something related to this before._x000D_
_x000D_
BTW we have a similar implementation to get the connection name in our app but we don't use `_id2ref`, we loop through all connections to find the right now.","PR 000353",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"@rafaelfranca Wasn't aware of the distributed nature, but that's a good consideration._x000D_
_x000D_
You're right though, at least in our use case, we don't use the connection object itself, we just want the connection so we can get its connection configuration (so we can extract `host`, `port`, `database`, `adapter`, etc.)","PR 000354",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Can't we use something like `ActiveRecord::Base.connection_handler` to access to these connection configuration ?_x000D_
_x000D_
<img width=""1243"" alt=""screenshot 2018-11-30 10 32 51"" src=""https://user-images.githubusercontent.com/1193670/49280839-66f89a00-f48b-11e8-9cb6-eaddb759e712.png"">_x000D_
_x000D_
---_x000D_
_x000D_
*Edit:*_x000D_
_x000D_
It seems that there's a better way to access to these connections. And we can even find the one we're looking for with the `object_id` as we can see here:_x000D_
_x000D_
<img width=""1680"" alt=""screenshot 2018-11-30 10 37 47"" src=""https://user-images.githubusercontent.com/1193670/49281265-6dd3dc80-f48c-11e8-9f5e-3cd254992471.png"">_x000D_
","PR 000355",0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0
"I close the PR since I think I've found the solution to our problem._x000D_
_x000D_
I you have any comment about anything, I look forward for them !_x000D_
_x000D_
I'm not a Rails expert at all, so maybe I'm doing something wrong or maybe there an easiest way to access to these connections","PR 000356",0,0,0,0,1,0,0,0,0,0,0,0,0,2,2,0,0,0,0
"I don't think this solves the issue at hand. At least in my case, each time a `sql.active_record` event is fired, I want to record the `host`, `port`, `database` and other configuration name from the connection used._x000D_
_x000D_
If we had to loop through the entire pool of connections to compare `:connection_id` each time `sql.active_record` was fired, I suspect that would severely hurt performance. I would still suggest that Rails exposes some kind of connection information via the `sql.active_record` event that either simplifies or eliminates the need to do such searching.","PR 000357",0,3,0,0,1,0,0,0,0,0,0,0,0,0,3,0,1,0,0
"That loops doesn't hurt performance, trust me. Of course I agree we should expose something else that is not the id. The name would be ideal since you want the connection pool that the connection uses and you can get the connection pool using the name","PR 000358",0,1,0,0,1,0,0,0,0,0,0,0,0,1,5,0,1,0,0
"@matthewd just pointed out that we are already sending complex objects in the notification https://github.com/rails/rails/pull/22856. So we have precedent to add the connection. Can you open a PR against the master branch?","PR 000359",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"@rafaelfranca Connection name would work just fine, I think. Thank you.","PR 000360",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@rafaelfranca I opened a new PR here https://github.com/rails/rails/pull/34602_x000D_
_x000D_
Thanks for your help ! :)","PR 000361",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thank you! Please use `[ci skip]` next time in commits when you open a PR in documentations so CI won't run for those commits.","PR 000362",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Sure, will do. I have put `[ci_skip]` in a few places actually, but it seems all the wrong ones. :)","PR 000363",0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"Use lazy load hook instead_x000D_
_x000D_
```ruby_x000D_
ActiveSupport.on_load(:action_dispatch_integration_test) do_x000D_
  include SignInHelper_x000D_
end_x000D_
```","PR 000364",0,0,0,0,1,0,0,0,0,0,0,0,1,0,2,0,0,0,0
"Interesting. I hadn't come across this before. Is there much benefit here, since by this point `test_helper` has required the Rails environment already._x000D_
_x000D_
I can switch to this if it's the preferred pattern, but I basically just copied the code from earlier in the same guide. Should I switch it in both places?","PR 000365",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"> since by this point test_helper has required the Rails environment already_x000D_
_x000D_
That's fine, loading the Rails environment doesn't mean the ActionDispatch::IntegrationTest class was loaded. _x000D_
About benefit; referencing constant too prematurely can lead to some bug that are hard to track down, so better to avoid it.","PR 000366",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I would prefer this to say `Using Separate Files`","PR 000367",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I think there's an extra t in cluttering.","PR 000368",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Should we be promoting using pathnames with `require` or appending the `lib/test` to the `$LOAD_PATH`?","PR 000369",0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0
"I've never seen this used for test code, but I'm not against it. In your test helper, its fairly safe to assume that `ActionDispatch::IntegrationTest` is loaded, I think.","PR 000370",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"https://github.com/rails/rails/blob/5bb4546439ed20a864c6df18788dce0eb45d8326/railties/lib/rails/test_help.rb","PR 000371",0,1,0,0,1,0,0,0,0,0,1,0,0,1,2,0,1,0,0
"Yes, it is used in Rails' `test_help`. I mainly mean I have never seen an app use that syntax in its `test_helper`. Above these changes, we recommend opening the integration test class directly in the sign in helper example. We also open `ActiveSupport::TestCase` in the [generated test helper](https://github.com/rails/rails/blob/5bb4546439ed20a864c6df18788dce0eb45d8326/railties/lib/rails/generators/rails/app/templates/test/test_helper.rb.tt).","PR 000372",0,0,0,0,0,0,0,1,0,0,0,0,0,1,2,3,0,0,0
"I could open a follow up PR where I update all the places that re-open `IntegrationTest` to be consistent (in this file, and in the generated test helper).","PR 000373",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Sorry! Forgot to answer 😅 . _x000D_
_x000D_
I think the generated_test_helper.rb isn't up to date, but anyway using a lazy load hook for ActiveSupport::TestCase or even ActionDispatch::IntegrationTest isn't a big deal compare to using a lazy_load_hook for ActiveRecord or ActionController for example, so I'm fine with either :)._x000D_
_x000D_
@sambostock Feel free to open another PR to make everything consistent _x000D_
_x000D_
","PR 000374",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"Sounds good to me, we can use consistent syntax for now and discuss changing it in another PR.","PR 000375",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0
"`lib` is actually already in the load_path so we can just use regular strings instead of pathnames.","PR 000376",0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0
"Yes, it is a big deal. `ActionDispatch::IntegrationTest` loads `ActionController::Base`. For test_helpers the current syntax is fine since this is after the environment is loaded and the application is initialized, but for gems it is a problem.","PR 000377",0,0,0,0,5,0,0,0,0,0,1,0,0,0,3,0,0,0,0
"So I'd replace this with_x000D_
```ruby_x000D_
require 'test/multiple_assertions`_x000D_
```_x000D_
_x000D_
If so, perhaps the directory should be renamed to something like `test_support`, `test_helpers` or something? 🤔 ","PR 000378",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Correct. The rails root isn't part of the load paths, so I don't think its entirely misleading.","PR 000379",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Addressed in #34619._x000D_
- If this is merged first, I'll update #34619._x000D_
- If #34619 is merged first, I'll update this._x000D_
- If #34619 is closed without merging, I'll leave this as is.","PR 000380",0,1,0,0,3,0,0,0,0,0,0,0,0,1,3,0,0,0,0
"Done 👍","PR 000381",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thank you for the pull request. Can you revert the break up of the long sentences? I don't think it make it easier to understand and just increase the overhead to review.","PR 000382",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks @rafaelfranca, I reverted the line wrapping and updated the commit message to reflect this.","PR 000383",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Why is this using the original class?","PR 000384",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"It dupes it, so the original class is unchanged. Since duping seems to have the same affect and doesn't need type columns, I'll change my code to just use a dup of `Topic` everywhere.","PR 000385",0,1,0,0,2,1,0,0,0,0,0,0,0,0,5,0,0,0,0
"why this use `+=` and not `<<`?","PR 000386",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I believe it is an array? The previous version implied it was.","PR 000387",0,1,0,0,0,0,0,0,0,0,0,0,0,1,5,4,1,1,0
"Duh! Yeah, that makes sense, can we use `concat` instead? Don't think we need to allocate other array.","PR 000388",0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
"Absolutely, done! I agonised a little over how to construct an array, then decided to just do something which aligned prettily and just wait for feedback. 😅","PR 000389",0,0,0,0,0,0,0,0,0,0,1,0,1,0,2,0,0,0,0
"I think we can avoid all those concats, too, I just don't know how I feel about the syntax:_x000D_
_x000D_
```ruby_x000D_
ActiveSupport::Deprecation.silence do_x000D_
  log_array(logger, [_x000D_
    ""  "",_x000D_
    ""#{exception.class} (#{exception.message}):"",_x000D_
    *(exception.annoted_source_code if exception.respond_to?(:annoted_source_code)),_x000D_
    ""  "",_x000D_
    *trace_x000D_
  ])_x000D_
end_x000D_
```","PR 000390",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I think you can do `require_relative` here, right?","PR 000391",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"This is misleading. I would adjust the comment to say `# shouldn't raise when module is required more than once`. I would also consider renaming the module to `SomeConcern`","PR 000392",0,0,0,0,0,0,0,1,0,0,1,0,0,1,3,1,0,0,0
"Using `require_relative` rather than `load` would result in a no-op on the second iteration, no?","PR 000393",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Happy with the renaming and I'll expand the comment tho, as above, I think it needs to be `when module loaded more than once` rather than `...required...`.","PR 000394",0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"1. What's the reason for this?_x000D_
2. Does this work in case when source location is the same, code changed, and reloaded?","PR 000395",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@simi: Please review the discussion on #14802 for context._x000D_
_x000D_
Regarding (2) - it depends what you mean by ""work"".  I don't think it works -- I've reopened a discussion about that aspect of this change on #14802, can you add your view there please?_x000D_
_x000D_
","PR 000396",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Can you squash your commits?","PR 000397",0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0
"@rafaelfranca: yup, was just going to wait until they were all done first, but can do that now, np.","PR 000398",0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"Is the first commit necessary?","PR 000399",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0
"No, I just wanted to ensure the original author of the patch, @razum2um, received sufficient credit.","PR 000400",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"We usually give him credit in the commit message for the rails contributors app to pickup on. You can do `[name & other name]` or `[name + other_name]` in a commit message to credit multiple people. [Example](https://github.com/rails/rails/commit/bcccf8b6a23d66f78d8b1349f92dcc19373daa9d)","PR 000401",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Ok, thanks for the example! Squashed and modified accordingly. 😄 ","PR 000402",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks for fixing this!","PR 000403",0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,1,0,0
"Backported to 5-2-stable in a69b5b1533557f2b29eb4f04aef7514ff1f53060","PR 000404",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Any chance this gets released as `5.2.1.2` any time soon?","PR 000405",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"No. You are free to use the 5-2-stable branch.","PR 000406",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Commenting because some folks have reached out to me to ask why we're not releasing a 5.2.1.2_x000D_
_x000D_
To clarify what Rafael means is we are releasing 5.2.2 v soon and that will include the bug fix. Building the gem from 5-2-stable is also a viable in the meantime.","PR 000407",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0
"There is three costs of releasing a security fix version:_x000D_
_x000D_
* maintainer overhead - it is very stressful and full of manual steps and verifications to release a security fix version._x000D_
* psychologic pressure - because it is a security release people think they need to upgrade ASAP._x000D_
* time pressure - The release needs to be done ASAP._x000D_
_x000D_
Since this is fixing a bug I'd prefer to release this in a bug fix release without of those costs. Bundler is here to help everyone. There is no reason why you can't use the 5-2-stable branch, it contains the same code that would be contained in the 5.2.2 release._x000D_
_x000D_
That being said, I'm planning to do a release, but not because of this issue and with no time commitment.","PR 000408",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@rafaelfranca Any chance of updating the post at https://weblog.rubyonrails.org/2018/11/27/Rails-4-2-5-0-5-1-5-2-have-been-released/ with a note about this issue? I spent a while this morning tracking down this issue in one of my apps before finding this PR and I dare say others will experience the same.","PR 000409",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"5.2.2.rc1 was released just to address this issue. I can update the blog post for the new release with that information.","PR 000410",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@rafaelfranca  did you have in mind that you're breaking all third-party active storage services implementations by changing `Service#upload` ActiveStorage API call?_x000D_
For example, chaadow/activestorage-openstack and others._x000D_
_x000D_
Maybe it's better to revert this change before pulling it in 5.2.2 and find another way of hacking this feature?","PR 000411",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@kugaevsky Just saw your comment by accident, I'm going to fix this and my gem altogether with the most recent `fog-openstack` version. Thank you.","PR 000412",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0
"@chaadow thank you. ","PR 000413",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
":shipit: 5-2-stable is also broken. Can you take a look?","PR 000414",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"There was a test that I missed in one place, so I fixed it in addition._x000D_
_x000D_
> Can you take a look?_x000D_
_x000D_
:ok_man: I will do.","PR 000415",0,2,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"@modosc Thanks!","PR 000416",0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Thank you for the pull request. When we added the `or` implementation we considered doing this by we chose to not add because it is hard to support not simple scenarios. That being said we prefer to not add two ways to build OR clauses. See https://github.com/rails/rails/pull/16052 and https://github.com/rails/rails/pull/32086","PR 000417",0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0
"I've reverted this PR in 93c94973ab574083a8cd1868aae03993ca156c34 since `scope.take` is not the same with `scope.to_a.first`.","PR 000418",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Can you add a test so the regression doesn't happen again?","PR 000419",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Sure, I'll do that later.","PR 000420",0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,2,0,0
"I can't see how `scope.take` can be different from `scope.to_a.first`  for the `scope` with `limit(1)`. If can explain it here, I can make the regression test myself and save you some time.","PR 000421",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"I've already added the regression test ba4e68f577efc76f351d30a2914e29942b97830e.","PR 000422",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"`must` implies to me that the framework is checking the type. Since no check is being done, `should` might be more appropriate. So:_x000D_
_x000D_
```suggestion_x000D_
Scoping allows you to specify commonly-used queries which can be referenced as method calls on the association objects or models. With these scopes, you can use every method previously covered such as `where`, `joins` and `includes`. All scope bodies should return an `ActiveRecord::Relation` or `nil` to allow for further methods (such as other scopes) to be called on it._x000D_
```_x000D_
What do you think?","PR 000423",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"A scope will never return `nil` and if it did then this documentation would be wrong because you would not be able to chain another scope on a `nil` result.","PR 000424",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"The scope body can return `nil` but the scope method will not. `scope :foo, ->() { all if false }`.","PR 000425",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"👍 ","PR 000426",0,0,0,0,2,0,0,0,0,0,0,0,0,2,4,0,0,0,0
"Have you folks seen: https://github.com/rails/rails/pull/32846? It tries to tackles that by issuing runtime warnings.","PR 000427",0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0
"Yes, but I don't think it is worth the overhead of checking if it is a relation or not every time a scope is executed. People who always do the right thing would have to execute an unneeded `if` just to protect people that do the wrong thing. I think it is better to not check anything at runtime in that case.","PR 000428",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Not excluding the idea of merging #32846. I still think it is overkill, but maybe the performance concern I have is not justified.","PR 000429",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"It seems that it is better to always use the `connection.schema_cache.columns_hash` here. `attributes_to_define_after_schema_loads` can contain attributes that are not in the database and we use this just to remove from `column_types`","PR 000430",0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,0,0,0,0
"What you are seeing is the expected behavior in my opinion. Because you ignored the column Rails should not know how to handle it coming from the database.","PR 000431",0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Thanks for the feedback!_x000D_
_x000D_
This behaviour seemed confusing to me, because [the doc](https://api.rubyonrails.org/classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-ignored_columns) says that ""Ignored columns won't have attribute accessors defined"", but since we do have the accessor (because of `select(""*"")`) I expect it to work :) Also, I believe that behavior should be consistent across the databases - my test passes for MySQL and SQLite","PR 000432",0,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,2,0,0
"I agree the behavior should be consistent, so we need to understand why with no changes your test pass in MySQL and SQLite and not in PostgreSQL and make it work in PostgreSQL without adding `attributes_to_define_after_schema_loads` back to `column_hash` again before removing it from `column_type`.","PR 000433",0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0
"I've traced the code to figure out why this issue does not affect other adapters. `DatabaseStatements#exec_query` returns `ActiveRecord::Result`, which accepts `columns`, `rows` and `column_types` to it's initializer. PostgreSQL `DatabaseStatements` [provide](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb#L93) all three arguments, while MySQL [one](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/mysql/database_statements.rb#L37) - only two, so `column_types` are always empty in that case. `Querying#find_by_sql` calls `result_set.column_types` as a part of instantiation.","PR 000434",0,0,0,2,0,0,0,0,0,0,0,1,1,0,2,0,1,0,0
"Cool! Thank you for investigating. What do you think on my suggestion of always using the column_hash returned by the schema cache on that line?","PR 000435",0,0,0,0,0,0,0,0,1,0,1,0,0,1,3,1,0,0,0
"I've added it to my commit, waiting for the tests to pass :) Thanks for the suggestion","PR 000436",0,1,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0
"`connection.schema_cache.columns_hash` works perfectly fine! I only had to add a small warmup setup to the instrumentation test (please let me know if there is a better way to do it) to make sure we have cache initialized before the first test - otherwise, the first event would be about the warmup instead of the desired one. Now all the specs are green","PR 000437",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Great work on this","PR 000438",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0
"The example doesn't make a lot of sense for cache key with version: only `id` is used inside of the `fetch` block so `cache_key` would be enough._x000D_
_x000D_
I would rewrite the example to use `Product#sku` instead of `id` for example and pass the `self` instead of the explicit call to the `cache_key_with_version` to the fetch method or pass `cache_key` and `cache_version` separately to `fetch`. This way it would be true use case and true ""low level"".   _x000D_
","PR 000439",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0
"Can you address the `test_dumping_composite_primary_key_out_of_order` too?_x000D_
_x000D_
https://github.com/rails/rails/blob/f5261909c517edc89b335ff5e025fd3f0f89e2b1/activerecord/test/cases/primary_keys_test.rb#L377-L381","PR 000440",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I guess the trailing `if result` isn't necessary anymore.","PR 000441",0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Use `assert_instance_of` instead.","PR 000442",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"This test case should be passed by all adapters, add it in generic test cases (e.g. in `test/cases/adapter_test.rb`, not in adapter specific test cases).","PR 000443",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Oh, I've missed that.","PR 000444",0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"How can I run specific test files using `./bin/test` script?!","PR 000445",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"e.g. `bin/test test/cases/adapter_test.rb -n test_select_all_always_return_activerecord_result`","PR 000446",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thanks","PR 000447",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Failed._x000D_
https://travis-ci.org/rails/rails/jobs/459404009#L1328-L1333","PR 000448",0,1,0,0,0,1,0,0,0,0,0,0,0,5,1,0,1,0,0
"I wanted to come up with a more creative idea to return an empty result but I thought maybe it'd be over-engineering. So I just used simple if/else statements to avoid complexity.","PR 000449",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Any time @eileencodes ","PR 000450",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Is this query deterministic order even if the ORDER BY is removed?","PR 000451",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Thanks for the comment. _x000D_
_x000D_
In my environment, it returns the primary key order as expected without order by but It does not look like deterministic since it does not `Sort` at the end of the query. _x000D_
_x000D_
Was thinking about adding `order by a.attnum` but it just shows the `column` order of the table, not the index key order._x000D_
_x000D_
```ruby_x000D_
  create_table :countries_treaties, force: true, primary_key: [:country_id, :treaty_id] do |t|_x000D_
    t.string :country_id, null: false_x000D_
    t.string :treaty_id, null: false_x000D_
  end_x000D_
```_x000D_
_x000D_
* Without `ORDER BY i.idx`_x000D_
_x000D_
_x000D_
```sql_x000D_
activerecord_unittest=#               SELECT a.attname_x000D_
              FROM (_x000D_
                     SELECT indrelid, indkey, generate_subscripts(indkey, 1) idx_x000D_
                       FROM pg_index_x000D_
                      WHERE indrelid = 'countries_treaties'::regclass_x000D_
                        AND indisprimary_x000D_
                   ) i_x000D_
              JOIN pg_attribute a_x000D_
                ON a.attrelid = i.indrelid_x000D_
               AND a.attnum = i.indkey[i.idx];_x000D_
  attname_x000D_
------------_x000D_
 country_id_x000D_
 treaty_id_x000D_
(2 rows)_x000D_
_x000D_
_x000D_
activerecord_unittest=# explain SELECT a.attname_x000D_
activerecord_unittest-#               FROM (_x000D_
activerecord_unittest(#                      SELECT indrelid, indkey, generate_subscripts(indkey, 1) idx_x000D_
activerecord_unittest(#                        FROM pg_index_x000D_
activerecord_unittest(#                       WHERE indrelid = 'countries_treaties'::regclass_x000D_
activerecord_unittest(#                         AND indisprimary_x000D_
activerecord_unittest(#                    ) i_x000D_
activerecord_unittest-#               JOIN pg_attribute a_x000D_
activerecord_unittest-#                 ON a.attrelid = i.indrelid_x000D_
activerecord_unittest-#                AND a.attnum = i.indkey[i.idx];_x000D_
                                                         QUERY PLAN_x000D_
-----------------------------------------------------------------------------------------------------------------------------_x000D_
 Hash Join  (cost=329.65..357.92 rows=43 width=64)_x000D_
   Hash Cond: ((pg_index.indrelid = a.attrelid) AND (pg_index.indkey[(generate_subscripts(pg_index.indkey, 1))] = a.attnum))_x000D_
   ->  ProjectSet  (cost=0.27..13.30 rows=1000 width=34)_x000D_
         ->  Index Scan using pg_index_indrelid_index on pg_index  (cost=0.27..8.29 rows=1 width=30)_x000D_
               Index Cond: (indrelid = '207561'::oid)_x000D_
               Filter: indisprimary_x000D_
   ->  Hash  (cost=218.75..218.75 rows=7375 width=70)_x000D_
         ->  Seq Scan on pg_attribute a  (cost=0.00..218.75 rows=7375 width=70)_x000D_
(8 rows)_x000D_
_x000D_
activerecord_unittest=#_x000D_
```_x000D_
_x000D_
* WITH `ORDER BY i.idx`_x000D_
```sql_x000D_
activerecord_unittest=# explain SELECT a.attname_x000D_
              FROM (_x000D_
                     SELECT indrelid, indkey, generate_subscripts(indkey, 1) idx_x000D_
                       FROM pg_index_x000D_
                      WHERE indrelid = 'countries_treaties'::regclass_x000D_
                        AND indisprimary_x000D_
                   ) i_x000D_
              JOIN pg_attribute a_x000D_
                ON a.attrelid = i.indrelid_x000D_
               AND a.attnum = i.indkey[i.idx] ORDER BY i.idx;_x000D_
                                                            QUERY PLAN_x000D_
-----------------------------------------------------------------------------------------------------------------------------------_x000D_
 Sort  (cost=359.09..359.20 rows=43 width=68)_x000D_
   Sort Key: (generate_subscripts(pg_index.indkey, 1))_x000D_
   ->  Hash Join  (cost=329.65..357.92 rows=43 width=68)_x000D_
         Hash Cond: ((pg_index.indrelid = a.attrelid) AND (pg_index.indkey[(generate_subscripts(pg_index.indkey, 1))] = a.attnum))_x000D_
         ->  ProjectSet  (cost=0.27..13.30 rows=1000 width=34)_x000D_
               ->  Index Scan using pg_index_indrelid_index on pg_index  (cost=0.27..8.29 rows=1 width=30)_x000D_
                     Index Cond: (indrelid = '207561'::oid)_x000D_
                     Filter: indisprimary_x000D_
         ->  Hash  (cost=218.75..218.75 rows=7375 width=70)_x000D_
               ->  Seq Scan on pg_attribute a  (cost=0.00..218.75 rows=7375 width=70)_x000D_
(10 rows)_x000D_
_x000D_
activerecord_unittest=#_x000D_
```","PR 000452",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Well, in the meantime I'm restoring this change to the current master one since it looks difficult (for me) to guarantee the order of index key, not table column order.","PR 000453",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Can also remove branch condition in `test_reconnection_after_actual_disconnection_with_verify`?_x000D_
https://github.com/rails/rails/blob/d6fcc419fe4f99d3f9414d39d081bd6355842018/activerecord/test/cases/adapters/postgresql/connection_test.rb#L163-L176_x000D_
","PR 000454",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Removed PostgreSQL version condition and `with_manual_interventions` from  `test_reconnection_after_actual_disconnection_with_verify`.","PR 000455",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Backport of https://github.com/rails/rails/pull/34524.","PR 000456",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"What do you think about freezing `enum_values` instead? That way we would get an error if we try to mutate the values, rather than failing silently._x000D_
_x000D_
We would have to do it after all the values are set: https://github.com/rails/rails/blob/8f2caec401c8e97d9eb1ea84d8263911c50e1ed6/activerecord/lib/active_record/enum.rb#L185_x000D_
_x000D_
","PR 000457",0,0,0,2,0,0,0,0,0,0,0,0,0,1,3,1,0,0,0
"It seems a smarter way to fix it, will push the change.","PR 000458",0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"Fixing code style.","PR 000459",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Does `*name & name*` work in the commit message? I know square braces are supported, but unsure about using asterisks.","PR 000460",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Not that I can see in the code. I think only `[` works","PR 000461",0,0,0,0,0,0,0,1,0,0,0,2,0,0,4,0,0,0,0
"I just checked locally; it doesn't. @albertoalmagro can you fix the syntax on your commit message? Thanks!","PR 000462",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Done @gmcgibbon @rafaelfranca ! I've written it now as `[`name `+` name`]`._x000D_
_x000D_
Thanks for checking it 👏 ","PR 000463",0,0,0,0,0,0,0,0,0,0,0,3,0,0,6,1,0,0,0
"This was not a doc change but since it is not related to production code it was fine to merge.","PR 000464",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"We do have code to do the same thing. So this would be useful for us._x000D_
_x000D_
We define it as ""is a query that is not reading"" (ie not select, etc)"", and we use:_x000D_
_x000D_
```_x000D_
      build_union_regexp = ->(*parts) do_x000D_
        parts = parts.map { |part| /\A\s*#{part}/i }_x000D_
        Regexp.union(*parts)_x000D_
      end_x000D_
      READ_QUERY = build_union_regexp.call(:select, :show, :set)_x000D_
```_x000D_
_x000D_
as definition.","PR 000465",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I like the idea of it, because it'd provide a good foundation to run a read/write-split application against a single database in development._x000D_
_x000D_
I don't think it's practical to detect read-only queries via string matching, though: even something that explicitly starts with ""SELECT"" can end up writing. I wonder about using `SET SESSION TRANSACTION READ ONLY` to have the DB enforce it instead? (Also worth noting I believe most write-ish queries go via `execute`, not `exec_query`.)_x000D_
_x000D_
On a specific API note, I'd prefer a synonym for 'blocking', just because it conflicts with ""[thread] blocking I/O"".","PR 000466",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Changed `while_blocking_writes` to `while_preventing_writes` to address @matthewd's concern. I also updated the SQL matcher to use the regex from @rafaelfranca and added some more tests. ","PR 000467",0,1,0,0,3,0,0,0,0,0,0,0,0,1,3,1,0,0,0
"Oh right I also need to move this to execute.  😄 ","PR 000468",0,0,0,0,4,0,0,0,0,0,0,1,0,1,4,0,0,0,0
"I agree with @matthewd that detecting read-only queries via string matching might be problematic. For example `SELECT ... INTO` is definitely not a read-only query but would pass the check. I am not sure what the best alternative is, though, but making the DB enforce it sounds much better.","PR 000469",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Ok I moved this to execute and added tests for create/delete/update/where.first to ensure these were all getting caught._x000D_
_x000D_
I updated the changelog to note that the purpose of preventing write queries when choosing readonly mode is for testing, catching accidental writes, and for switching to a readonly connection without opening a second connection. It's purpose isn't to catch ALL writes to a database - it's not meant as a replacement for a replica. ","PR 000470",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Thank you for the PR. We prefer to not implement stopgap solutions in the codebase. Let's wait for #34378","PR 000471",0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This bug can cause quite severe performance regression from my experience, and it largely goes unnoticed, unless you actively measure performance. Hope that #34378 gets merged quickly and also backported, to fix existing versions of rails affected by this regression.","PR 000472",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"> will show only those emails that have been queued for delivery_x000D_
_x000D_
I think this sentence is confusing, the ""queued for delivery"" might make people think about `deliver_later`, but that's actually the opposite (email sent with with `deliver_now` will be in the deliveries array)._x000D_
_x000D_
Maybe we can say ""The `ActionMailer::Base.deliveries` method will show only those emails that have been performed.""","PR 000473",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"We could inherit from `ActionDispatch::SystemTestCase` if someone copy/pastes this but we would need to add a `driven_by` line.","PR 000474",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"This isn't quite right. I think we should promote using `assert_enqueued_emails` when wanting to check email jobs enqueued without needing access to the actual message. Otherwise, use `assert_emails`. These assertions no longer has strict relationships with delivery methods.","PR 000475",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"@gmcgibbon yeah, I may need to make this PR for the 5.2 version of Rails and then modify the note for version 6. Does that sound right?","PR 000476",0,0,0,0,2,0,0,0,0,0,1,0,0,1,7,1,0,0,0
"No problem @gmcgibbon I can add that. I wasn't sure if the Rails opinion was they should be inheriting from ApplicationSystemTestCase since the generator does that by default.","PR 000477",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@gmcgibbon I wasn't sure about this `include ActionMailer::TestHelper` for Rails 6 either.","PR 000478",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
"You can remove it :), it gets included automatically on rails 6.0 https://github.com/rails/rails/commit/64a9759aff949761f1d79b010e4817a91f3ee226","PR 000479",0,1,0,0,1,0,0,0,0,0,0,0,0,0,6,1,0,0,0
"Sure. Reword this for the `master` patch, and then if you want to backport this patch to `5-2-stable` (in another PR) you can keep this wording.","PR 000480",0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@gmcgibbon I'm happy to make the updates. Anything else we should include? Should we remove the previous Functional Testing example that uses the `ActionMailer::Base.deliveries.size`?","PR 000481",0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0
"Good idea. Let's update the example to use test helpers. You can change `assert_difference 'ActionMailer::Base.deliveries.size', +1 do` to `assert_emails do` in the test above your changes.","PR 000482",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"I just pushed up some changes. I kept a note in there about the difference between `assert_emails` and `assert_enqueued_emails`. Let me know if you think that is clear!_x000D_
_x000D_
As more people move away from integration and functional tests, I thought it may be good to include a system test example.","PR 000483",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"I've used Rails for years, but am just now learning about participating in open source. I'm going to start with looking for documentation that can be improved, so please let me know if there are any sections you would like someone to tackle!","PR 000484",0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,0
"Oh man. I think I just blew the squash when I rebased it. Were these [instructions](https://github.com/todotxt/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit) the best way to do it? ","PR 000485",0,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0
"I think you squashed a commit that wasn't yours. You may have to do some git surgery to fix that. For future reference, if you just do `git rebase master -i` from your branch, it will give you a list of all the different commits from master. From there, you can replace `pick` with `squash` or `fixup`. Be sure to leave the top commit in your rebase as a pick otherwise you'll squash into the tip of your master branch._x000D_
_x000D_
I think you can squash what you have, amend the commit author to yourself, and revert the code changes to ActiveRecord.","PR 000486",0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"It may be easier for me to just submit a new PR. Is that okay? Sorry!","PR 000487",0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"Sure, whatever you are comfortable with.","PR 000488",0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0
"I submitted a new PR, and the commit had [ci skip], but it looks like it is still running the tests?","PR 000489",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Code climate (linting) checks still run, but the Travis CI (test suite) check does not. Thanks for contributing!","PR 000490",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"`""` is not part of column name, and also `\` isn't necessary.","PR 000491",0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0
"Can you add an extra test case that mixed with default opclass like `@connection.execute ""CREATE INDEX trains_name_and_position ON trains USING btree(name, position text_pattern_ops)""`?","PR 000492",0,0,0,0,1,0,0,0,0,0,0,2,0,1,3,2,1,0,0
"Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.

If any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.

This repository is being automatically checked for code quality issues using <a href=""https://codeclimate.com"">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.

Please see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.
","PR 000493",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0
"Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @eileencodes (or someone else) soon.

If any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.

This repository is being automatically checked for code quality issues using <a href=""https://codeclimate.com"">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.

Please see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.
","PR 000494",0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"I think this is good.  Database connections are backed by a file descriptor, so I expect them to be thread *unsafe* but safe for fibers since fibers can't interrupt calls inside the database connection._x000D_
_x000D_
We were investigating @fxn's comments about making actual thread locals easier to use (via `mattr_accessor`), but I don't know that using real thread locals is popular enough to warrant such an abstraction.  I like the idea of generalization, but I also like the idea of ""smallest patch to fix the bug"". 😉","PR 000495",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"@tenderlove my main concern at the time was ""if we call this thread local, it should be thread local"". As you said in your closing keynote in Chicago re computer science, I can't really believe I have to say this 😄 ._x000D_
_x000D_
If the real thread-local use case doesn't warrant API, then there's no need to generalize, but naming should reflect that the thing is fiber local!","PR 000496",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"sweet. thanks @eileencodes ","PR 000497",0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,0
"This will need a changelog entry","PR 000498",0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,1,0,0
"Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.

If any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.

This repository is being automatically checked for code quality issues using <a href=""https://codeclimate.com"">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.

Please see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.
","PR 000499",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Welcome to Rails @alfonsojimenez ! 👏 ","PR 000500",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0
